

Microchip Technology PIC LITE Macro Assembler V1.38 build -256452561 
                                                                                               Tue Dec 27 21:28:06 2016

Microchip Technology Omniscient Code Generator v1.38 (Free mode) build 201607010351
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	intentry,global,class=CODE,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	dabs	1,0x7E,2
    29  0000                     	;# 
    30  0001                     	;# 
    31  0002                     	;# 
    32  0003                     	;# 
    33  0004                     	;# 
    34  0005                     	;# 
    35  0006                     	;# 
    36  0007                     	;# 
    37  0008                     	;# 
    38  0009                     	;# 
    39  000A                     	;# 
    40  000B                     	;# 
    41  000C                     	;# 
    42  000D                     	;# 
    43  000E                     	;# 
    44  0011                     	;# 
    45  0012                     	;# 
    46  0013                     	;# 
    47  0014                     	;# 
    48  0015                     	;# 
    49  0016                     	;# 
    50  0016                     	;# 
    51  0017                     	;# 
    52  0018                     	;# 
    53  0019                     	;# 
    54  001A                     	;# 
    55  001B                     	;# 
    56  001C                     	;# 
    57  001E                     	;# 
    58  001F                     	;# 
    59  008C                     	;# 
    60  008D                     	;# 
    61  008E                     	;# 
    62  0091                     	;# 
    63  0092                     	;# 
    64  0093                     	;# 
    65  0094                     	;# 
    66  0095                     	;# 
    67  0096                     	;# 
    68  0097                     	;# 
    69  0098                     	;# 
    70  0099                     	;# 
    71  009A                     	;# 
    72  009B                     	;# 
    73  009B                     	;# 
    74  009C                     	;# 
    75  009D                     	;# 
    76  009E                     	;# 
    77  010C                     	;# 
    78  010D                     	;# 
    79  010E                     	;# 
    80  0111                     	;# 
    81  0112                     	;# 
    82  0113                     	;# 
    83  0114                     	;# 
    84  0115                     	;# 
    85  0116                     	;# 
    86  0117                     	;# 
    87  0118                     	;# 
    88  0119                     	;# 
    89  011A                     	;# 
    90  011B                     	;# 
    91  011D                     	;# 
    92  011E                     	;# 
    93  018C                     	;# 
    94  018D                     	;# 
    95  018E                     	;# 
    96  0191                     	;# 
    97  0191                     	;# 
    98  0192                     	;# 
    99  0193                     	;# 
   100  0193                     	;# 
   101  0193                     	;# 
   102  0194                     	;# 
   103  0195                     	;# 
   104  0196                     	;# 
   105  0199                     	;# 
   106  019A                     	;# 
   107  019B                     	;# 
   108  019B                     	;# 
   109  019C                     	;# 
   110  019D                     	;# 
   111  019E                     	;# 
   112  019F                     	;# 
   113  020C                     	;# 
   114  020D                     	;# 
   115  020E                     	;# 
   116  0211                     	;# 
   117  0211                     	;# 
   118  0212                     	;# 
   119  0212                     	;# 
   120  0213                     	;# 
   121  0213                     	;# 
   122  0214                     	;# 
   123  0214                     	;# 
   124  0215                     	;# 
   125  0215                     	;# 
   126  0215                     	;# 
   127  0216                     	;# 
   128  0216                     	;# 
   129  0217                     	;# 
   130  0217                     	;# 
   131  0219                     	;# 
   132  021A                     	;# 
   133  021B                     	;# 
   134  021C                     	;# 
   135  021D                     	;# 
   136  021E                     	;# 
   137  021F                     	;# 
   138  0291                     	;# 
   139  0291                     	;# 
   140  0292                     	;# 
   141  0293                     	;# 
   142  0294                     	;# 
   143  0295                     	;# 
   144  0295                     	;# 
   145  0296                     	;# 
   146  0298                     	;# 
   147  0298                     	;# 
   148  0299                     	;# 
   149  029A                     	;# 
   150  029B                     	;# 
   151  029C                     	;# 
   152  029D                     	;# 
   153  029E                     	;# 
   154  0311                     	;# 
   155  0311                     	;# 
   156  0312                     	;# 
   157  0313                     	;# 
   158  0318                     	;# 
   159  0318                     	;# 
   160  0319                     	;# 
   161  031A                     	;# 
   162  038C                     	;# 
   163  038D                     	;# 
   164  038E                     	;# 
   165  0391                     	;# 
   166  0392                     	;# 
   167  0393                     	;# 
   168  0394                     	;# 
   169  0395                     	;# 
   170  0396                     	;# 
   171  039A                     	;# 
   172  039C                     	;# 
   173  039D                     	;# 
   174  039E                     	;# 
   175  039F                     	;# 
   176  0415                     	;# 
   177  0416                     	;# 
   178  0417                     	;# 
   179  041C                     	;# 
   180  041D                     	;# 
   181  041E                     	;# 
   182  0FE4                     	;# 
   183  0FE5                     	;# 
   184  0FE6                     	;# 
   185  0FE7                     	;# 
   186  0FE8                     	;# 
   187  0FE9                     	;# 
   188  0FEA                     	;# 
   189  0FEB                     	;# 
   190  0FED                     	;# 
   191  0FEE                     	;# 
   192  0FEF                     	;# 
   193                           
   194                           	psect	stringtext
   195  03C0                     __pstringtext:	
   196  03C0                     _dpowers:	
   197  03C0  3401               	retlw	1
   198  03C1  3400               	retlw	0
   199  03C2  340A               	retlw	10
   200  03C3  3400               	retlw	0
   201  03C4  3464               	retlw	100
   202  03C5  3400               	retlw	0
   203  03C6  34E8               	retlw	232
   204  03C7  3403               	retlw	3
   205  03C8  3410               	retlw	16
   206  03C9  3427               	retlw	39
   207  03CA                     __end_of_dpowers:	
   208  000B                     _INTCON	set	11
   209  0011                     _PIR1bits	set	17
   210  0013                     _PIR3bits	set	19
   211  000C                     _PORTAbits	set	12
   212  001C                     _T2CON	set	28
   213  000C                     _PORTA	set	12
   214  008E                     _ADIF	set	142
   215  009B                     _TMR6IF	set	155
   216  009B                     _ADRES	set	155
   217  009D                     _ADCON0	set	157
   218  009D                     _ADCON0bits	set	157
   219  009E                     _ADCON1	set	158
   220  0099                     _OSCCON	set	153
   221  0091                     _PIE1bits	set	145
   222  0093                     _PIE3bits	set	147
   223  008C                     _TRISAbits	set	140
   224  008E                     _TRISCbits	set	142
   225  011D                     _APFCON0bits	set	285
   226  010E                     _LATC	set	270
   227  019B                     _SPBRG	set	411
   228  018C                     _ANSELAbits	set	396
   229  019F                     _BAUDCONbits	set	415
   230  0199                     _RCREG	set	409
   231  019D                     _RCSTAbits	set	413
   232  019C                     _SPBRGH	set	412
   233  019A                     _TXREG	set	410
   234  019E                     _TXSTAbits	set	414
   235  0CFB                     _BRG16	set	3323
   236  0CF1                     _TRMT	set	3313
   237  0393                     _IOCAFbits	set	915
   238  0392                     _IOCANbits	set	914
   239  0391                     _IOCAPbits	set	913
   240  041D                     _PR6	set	1053
   241  041E                     _T6CON	set	1054
   242  041E                     _T6CONbits	set	1054
   243  03CA                     STR_3:	
   244  03CA  3420               	retlw	32	;' '
   245  03CB  3425               	retlw	37	;'%'
   246  03CC  3464               	retlw	100	;'d'
   247  03CD  3400               	retlw	0
   248  03CE                     STR_2:	
   249  03CE  3478               	retlw	120	;'x'
   250  03CF  3479               	retlw	121	;'y'
   251  03D0  3400               	retlw	0
   252  03D1                     STR_1:	
   253  03D1  3456               	retlw	86	;'V'
   254  03D2  3400               	retlw	0
   255                           
   256                           ; #config settings
   257  0000                     
   258                           	psect	cinit
   259  010A                     start_initialization:	
   260  010A                     __initialization:	
   261                           
   262                           ; Clear objects allocated to BANK1
   263  010A  30A0               	movlw	low __pbssBANK1
   264  010B  0084               	movwf	4
   265  010C  3000               	movlw	high __pbssBANK1
   266  010D  0085               	movwf	5
   267  010E  3024               	movlw	36
   268  010F  3184  241C         	fcall	clear_ram0
   269  0111                     end_of_initialization:	
   270                           ;End of C runtime variable initialization code
   271                           
   272  0111                     __end_of__initialization:	
   273  0111  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   274  0112  0020               	movlb	0
   275  0113  3183  2B67         	ljmp	_main	;jump to C main() function
   276                           
   277                           	psect	bssBANK1
   278  00A0                     __pbssBANK1:	
   279  00A0                     _sensors:	
   280  00A0                     	ds	35
   281  00C3                     _shouldAutoBaud:	
   282  00C3                     	ds	1
   283                           
   284                           	psect	clrtext
   285  041C                     clear_ram0:	
   286                           ;	Called with FSR0 containing the base address, and
   287                           ;	WREG with the size to clear
   288                           
   289  041C  0064               	clrwdt	;clear the watchdog before getting into this loop
   290  041D                     clrloop0:	
   291  041D  0180               	clrf	0	;clear RAM location pointed to by FSR
   292  041E  3101               	addfsr 0,1
   293  041F  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   294  0420  2C1D               	goto	clrloop0	;have we reached the end yet?
   295  0421  3400               	retlw	0	;all done for this memory range, return
   296                           
   297                           	psect	cstackBANK1
   298  00C4                     __pcstackBANK1:	
   299  00C4                     ??_initializePIC:	
   300  00C4                     ??_autoBaud:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  00C4                     ??_UART_Write:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  00C4                     ?___bmul:	
   307                           ; 1 bytes @ 0x0
   308                           
   309  00C4                     UART_Write@data:	
   310                           ; 1 bytes @ 0x0
   311                           
   312  00C4                     ___bmul@multiplicand:	
   313                           ; 1 bytes @ 0x0
   314                           
   315                           
   316                           ; 1 bytes @ 0x0
   317  00C4                     	ds	1
   318  00C5                     ?_UART_Write_Text:	
   319  00C5                     ??___bmul:	
   320                           ; 1 bytes @ 0x1
   321                           
   322  00C5                     autoBaud@discard:	
   323                           ; 1 bytes @ 0x1
   324                           
   325  00C5                     UART_Write_Text@text:	
   326                           ; 1 bytes @ 0x1
   327                           
   328                           
   329                           ; 2 bytes @ 0x1
   330  00C5                     	ds	1
   331  00C6                     ___bmul@product:	
   332  00C6                     autoBaud@sync_count:	
   333                           ; 1 bytes @ 0x2
   334                           
   335                           
   336                           ; 2 bytes @ 0x2
   337  00C6                     	ds	1
   338  00C7                     ??_UART_Write_Text:	
   339  00C7                     ___bmul@multiplier:	
   340                           ; 1 bytes @ 0x3
   341                           
   342                           
   343                           ; 1 bytes @ 0x3
   344  00C7                     	ds	1
   345  00C8                     ??_initializeSensors:	
   346  00C8                     UART_Write_Text@count:	
   347                           ; 1 bytes @ 0x4
   348                           
   349  00C8                     autoBaud@index:	
   350                           ; 2 bytes @ 0x4
   351                           
   352                           
   353                           ; 2 bytes @ 0x4
   354  00C8                     	ds	3
   355  00CB                     initializeSensors@i:	
   356                           
   357                           ; 2 bytes @ 0x7
   358  00CB                     	ds	2
   359  00CD                     ??_main:	
   360                           
   361                           	psect	cstackCOMMON
   362  0070                     __pcstackCOMMON:	
   363                           ; 1 bytes @ 0x9
   364                           
   365  0070                     ?_initializePIC:	
   366  0070                     ?_initializeSensors:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     ?_autoBaud:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ?_default_handler:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ?_switch_handler:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ??_switch_handler:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0070                     ?_UART_Write:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0070                     ?_ISR:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0070                     ?i1_UART_Write:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ??i1_UART_Write:	
   391                           ; 1 bytes @ 0x0
   392                           
   393  0070                     ?i1___bmul:	
   394                           ; 1 bytes @ 0x0
   395                           
   396  0070                     ?_main:	
   397                           ; 1 bytes @ 0x0
   398                           
   399  0070                     ?___lwdiv:	
   400                           ; 2 bytes @ 0x0
   401                           
   402  0070                     i1UART_Write@data:	
   403                           ; 2 bytes @ 0x0
   404                           
   405  0070                     i1___bmul@multiplicand:	
   406                           ; 1 bytes @ 0x0
   407                           
   408  0070                     ___lwdiv@divisor:	
   409                           ; 1 bytes @ 0x0
   410                           
   411                           
   412                           ; 2 bytes @ 0x0
   413  0070                     	ds	1
   414  0071                     ?i1_UART_Write_Text:	
   415  0071                     ??i1___bmul:	
   416                           ; 1 bytes @ 0x1
   417                           
   418  0071                     i1UART_Write_Text@text:	
   419                           ; 1 bytes @ 0x1
   420                           
   421                           
   422                           ; 2 bytes @ 0x1
   423  0071                     	ds	1
   424  0072                     i1___bmul@multiplier:	
   425  0072                     ___lwdiv@dividend:	
   426                           ; 1 bytes @ 0x2
   427                           
   428                           
   429                           ; 2 bytes @ 0x2
   430  0072                     	ds	1
   431  0073                     ??i1_UART_Write_Text:	
   432  0073                     i1___bmul@product:	
   433                           ; 1 bytes @ 0x3
   434                           
   435                           
   436                           ; 1 bytes @ 0x3
   437  0073                     	ds	1
   438  0074                     ?_get_port_pin:	
   439  0074                     ??___lwdiv:	
   440                           ; 1 bytes @ 0x4
   441                           
   442  0074                     get_port_pin@port:	
   443                           ; 1 bytes @ 0x4
   444                           
   445  0074                     i1UART_Write_Text@count:	
   446                           ; 2 bytes @ 0x4
   447                           
   448                           
   449                           ; 2 bytes @ 0x4
   450  0074                     	ds	1
   451  0075                     ___lwdiv@quotient:	
   452                           
   453                           ; 2 bytes @ 0x5
   454  0075                     	ds	1
   455  0076                     ??_default_handler:	
   456  0076                     get_port_pin@pin:	
   457                           ; 1 bytes @ 0x6
   458                           
   459                           
   460                           ; 1 bytes @ 0x6
   461  0076                     	ds	1
   462  0077                     ??_get_port_pin:	
   463  0077                     ___lwdiv@counter:	
   464                           ; 1 bytes @ 0x7
   465                           
   466                           
   467                           ; 1 bytes @ 0x7
   468  0077                     	ds	1
   469  0078                     ?___lwmod:	
   470  0078                     ___lwmod@divisor:	
   471                           ; 2 bytes @ 0x8
   472                           
   473                           
   474                           ; 2 bytes @ 0x8
   475  0078                     	ds	2
   476  007A                     ___lwmod@dividend:	
   477                           
   478                           ; 2 bytes @ 0xA
   479  007A                     	ds	2
   480  007C                     ??___lwmod:	
   481                           
   482                           ; 1 bytes @ 0xC
   483  007C                     	ds	1
   484  007D                     ___lwmod@counter:	
   485                           
   486                           ; 1 bytes @ 0xD
   487  007D                     	ds	1
   488                           
   489                           	psect	cstackBANK0
   490  0020                     __pcstackBANK0:	
   491  0020                     ?_sprintf:	
   492  0020                     sprintf@f:	
   493                           ; 2 bytes @ 0x0
   494                           
   495                           
   496                           ; 2 bytes @ 0x0
   497  0020                     	ds	4
   498  0024                     ??_sprintf:	
   499                           
   500                           ; 1 bytes @ 0x4
   501  0024                     	ds	4
   502  0028                     sprintf@ap:	
   503                           
   504                           ; 1 bytes @ 0x8
   505  0028                     	ds	1
   506  0029                     sprintf@flag:	
   507                           
   508                           ; 1 bytes @ 0x9
   509  0029                     	ds	1
   510  002A                     sprintf@prec:	
   511                           
   512                           ; 1 bytes @ 0xA
   513  002A                     	ds	1
   514  002B                     sprintf@val:	
   515                           
   516                           ; 2 bytes @ 0xB
   517  002B                     	ds	2
   518  002D                     sprintf@sp:	
   519                           
   520                           ; 1 bytes @ 0xD
   521  002D                     	ds	1
   522  002E                     sprintf@c:	
   523                           
   524                           ; 1 bytes @ 0xE
   525  002E                     	ds	1
   526  002F                     ??_ISR:	
   527                           
   528                           ; 1 bytes @ 0xF
   529  002F                     	ds	5
   530  0034                     ISR@str:	
   531                           
   532                           ; 15 bytes @ 0x14
   533  0034                     	ds	15
   534  0043                     ISR@x:	
   535                           
   536                           ; 1 bytes @ 0x23
   537  0043                     	ds	1
   538  0044                     ISR@shouldDebounce:	
   539                           
   540                           ; 2 bytes @ 0x24
   541  0044                     	ds	2
   542  0046                     ISR@debounce:	
   543                           
   544                           ; 3 bytes @ 0x26
   545  0046                     	ds	3
   546  0049                     ISR@i:	
   547                           
   548                           ; 2 bytes @ 0x29
   549  0049                     	ds	2
   550                           
   551                           	psect	maintext
   552  0367                     __pmaintext:	
   553 ;;
   554 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   555 ;;
   556 ;; *************** function _main *****************
   557 ;; Defined at:
   558 ;;		line 49 in file "main.c"
   559 ;; Parameters:    Size  Location     Type
   560 ;;		None
   561 ;; Auto vars:     Size  Location     Type
   562 ;;		None
   563 ;; Return value:  Size  Location     Type
   564 ;;                  2   86[None  ] int 
   565 ;; Registers used:
   566 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   567 ;; Tracked objects:
   568 ;;		On entry : B1F/0
   569 ;;		On exit  : 0/0
   570 ;;		Unchanged: 0/0
   571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   575 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   576 ;;Total ram usage:        0 bytes
   577 ;; Hardware stack levels required when called:    6
   578 ;; This function calls:
   579 ;;		_UART_Write_Text
   580 ;;		_autoBaud
   581 ;;		_initializePIC
   582 ;;		_initializeSensors
   583 ;; This function is called by:
   584 ;;		Startup code after reset
   585 ;; This function uses a non-reentrant model
   586 ;;
   587                           
   588                           
   589                           ;psect for function _main
   590  0367                     _main:	
   591                           
   592                           ;main.c: 50: initializePIC();
   593                           
   594                           ;incstack = 0
   595                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   596  0367  3182  22BD  3183   	fcall	_initializePIC
   597                           
   598                           ;main.c: 51: initializeSensors();
   599  036A  3182  2251  3183   	fcall	_initializeSensors
   600  036D                     l1399:	
   601                           ;main.c: 53: while(1){
   602                           
   603                           
   604                           ;main.c: 54: if(shouldAutoBaud){
   605  036D  0021               	movlb	1	; select bank1
   606  036E  0843               	movf	_shouldAutoBaud^(0+128),w
   607  036F  1903               	btfsc	3,2
   608  0370  2B80               	goto	l1409
   609                           
   610                           ;main.c: 55: autoBaud();
   611  0371  3181  21E2  3183   	fcall	_autoBaud
   612                           
   613                           ;main.c: 56: UART_Write_Text("V");
   614  0374  30D1               	movlw	low (STR_1| (0+32768))
   615  0375  0021               	movlb	1	; select bank1
   616  0376  00C5               	movwf	UART_Write_Text@text^(0+128)
   617  0377  3083               	movlw	high (STR_1| (0+32768))
   618  0378  00C6               	movwf	(UART_Write_Text@text^(0+128)+1)
   619  0379  3183  238A  3183   	fcall	_UART_Write_Text
   620                           
   621                           ;main.c: 57: PIE1bits.RCIE = 1;
   622  037C  0021               	movlb	1	; select bank1
   623  037D  1691               	bsf	17,5	;volatile
   624                           
   625                           ;main.c: 58: PIE1bits.TXIE = 1;
   626  037E  1611               	bsf	17,4	;volatile
   627                           
   628                           ;main.c: 59: shouldAutoBaud = 0;
   629  037F  01C3               	clrf	_shouldAutoBaud^(0+128)
   630  0380                     l1409:	
   631                           
   632                           ;main.c: 60: }
   633                           ;main.c: 63: if(RCSTAbits.OERR)
   634  0380  0023               	movlb	3	; select bank3
   635  0381  1C9D               	btfss	29,1	;volatile
   636  0382  2B85               	goto	l89
   637                           
   638                           ;main.c: 64: {
   639                           ;main.c: 65: RCSTAbits.SPEN = 0;
   640  0383  139D               	bcf	29,7	;volatile
   641                           
   642                           ;main.c: 66: RCSTAbits.SPEN = 1;
   643  0384  179D               	bsf	29,7	;volatile
   644  0385                     l89:	
   645                           
   646                           ;main.c: 67: }
   647                           ;main.c: 69: if(RCSTAbits.FERR)
   648  0385  1D1D               	btfss	29,2	;volatile
   649  0386  2B6D               	goto	l1399
   650                           
   651                           ;main.c: 70: {
   652                           ;main.c: 71: RCSTAbits.SPEN = 0;
   653  0387  139D               	bcf	29,7	;volatile
   654                           
   655                           ;main.c: 72: RCSTAbits.SPEN = 1;
   656  0388  179D               	bsf	29,7	;volatile
   657  0389  2B6D               	goto	l1399
   658  038A                     __end_of_main:	
   659                           ;main.c: 73: }
   660                           ;main.c: 74: }
   661                           ;main.c: 76: return (0);
   662                           ;	Return value of _main is never used
   663                           
   664                           
   665                           	psect	text1
   666  0251                     __ptext1:	
   667 ;; *************** function _initializeSensors *****************
   668 ;; Defined at:
   669 ;;		line 209 in file "main.c"
   670 ;; Parameters:    Size  Location     Type
   671 ;;		None
   672 ;; Auto vars:     Size  Location     Type
   673 ;;  i               2    7[BANK1 ] int 
   674 ;; Return value:  Size  Location     Type
   675 ;;                  1    wreg      void 
   676 ;; Registers used:
   677 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   678 ;; Tracked objects:
   679 ;;		On entry : 0/0
   680 ;;		On exit  : 0/0
   681 ;;		Unchanged: 0/0
   682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   684 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
   685 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
   686 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
   687 ;;Total ram usage:        5 bytes
   688 ;; Hardware stack levels used:    1
   689 ;; Hardware stack levels required when called:    5
   690 ;; This function calls:
   691 ;;		___bmul
   692 ;; This function is called by:
   693 ;;		_main
   694 ;; This function uses a non-reentrant model
   695 ;;
   696                           
   697                           
   698                           ;psect for function _initializeSensors
   699  0251                     _initializeSensors:	
   700                           
   701                           ;main.c: 210: for(int i = 0; i < 5; ++i){
   702                           
   703                           ;incstack = 0
   704                           ; Regs used in _initializeSensors: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   705  0251  0021               	movlb	1	; select bank1
   706  0252  01CB               	clrf	initializeSensors@i^(0+128)
   707  0253  01CC               	clrf	(initializeSensors@i+1)^(0+128)
   708  0254  084C               	movf	(initializeSensors@i+1)^(0+128),w
   709  0255  3A80               	xorlw	128
   710  0256  00C8               	movwf	??_initializeSensors^(0+128)
   711  0257  3080               	movlw	128
   712  0258  0248               	subwf	??_initializeSensors^(0+128),w
   713  0259  1D03               	skipz
   714  025A  2A5D               	goto	u875
   715  025B  3005               	movlw	5
   716  025C  024B               	subwf	initializeSensors@i^(0+128),w
   717  025D                     u875:	
   718  025D  1803               	btfsc	3,0
   719  025E  2AB7               	goto	l1267
   720  025F                     l1261:	
   721                           
   722                           ;main.c: 211: sensors[i].index = i;
   723  025F  0021               	movlb	1	; select bank1
   724  0260  084B               	movf	initializeSensors@i^(0+128),w
   725  0261  00C8               	movwf	??_initializeSensors^(0+128)
   726  0262  3007               	movlw	7
   727  0263  00C9               	movwf	(??_initializeSensors+1)^(0+128)
   728  0264  0849               	movf	(??_initializeSensors+1)^(0+128),w
   729  0265  00C4               	movwf	___bmul@multiplicand^(0+128)
   730  0266  084B               	movf	initializeSensors@i^(0+128),w
   731  0267  3183  23D3  3182   	fcall	___bmul
   732  026A  3EA0               	addlw	(low (_sensors| 0))& (0+255)
   733  026B  0086               	movwf	6
   734  026C  0187               	clrf	7
   735  026D  0021               	movlb	1	; select bank1
   736  026E  0848               	movf	??_initializeSensors^(0+128),w
   737  026F  0081               	movwf	1
   738                           
   739                           ;main.c: 212: sensors[i].port = &PORTA;
   740  0270  300C               	movlw	12
   741  0271  00C8               	movwf	??_initializeSensors^(0+128)
   742  0272  3000               	movlw	0
   743  0273  00C9               	movwf	(??_initializeSensors^(0+128)+1)
   744  0274  3007               	movlw	7
   745  0275  00CA               	movwf	(??_initializeSensors+2)^(0+128)
   746  0276  084A               	movf	(??_initializeSensors+2)^(0+128),w
   747  0277  00C4               	movwf	___bmul@multiplicand^(0+128)
   748  0278  084B               	movf	initializeSensors@i^(0+128),w
   749  0279  3183  23D3  3182   	fcall	___bmul
   750  027C  3E01               	addlw	1
   751  027D  3EA0               	addlw	(low (_sensors| 0))& (0+255)
   752  027E  0086               	movwf	6
   753  027F  0187               	clrf	7
   754  0280  0021               	movlb	1	; select bank1
   755  0281  0848               	movf	??_initializeSensors^(0+128),w
   756  0282  3FC0               	movwi [0]fsr1
   757  0283  0849               	movf	(??_initializeSensors^(0+128)+1),w
   758  0284  3FC1               	movwi [1]fsr1
   759                           
   760                           ;main.c: 213: sensors[i].pin = i + 1;
   761  0285  084B               	movf	initializeSensors@i^(0+128),w
   762  0286  3E01               	addlw	1
   763  0287  00C8               	movwf	??_initializeSensors^(0+128)
   764  0288  3007               	movlw	7
   765  0289  00C9               	movwf	(??_initializeSensors+1)^(0+128)
   766  028A  0849               	movf	(??_initializeSensors+1)^(0+128),w
   767  028B  00C4               	movwf	___bmul@multiplicand^(0+128)
   768  028C  084B               	movf	initializeSensors@i^(0+128),w
   769  028D  3183  23D3  3182   	fcall	___bmul
   770  0290  3E03               	addlw	3
   771  0291  3EA0               	addlw	(low (_sensors| 0))& (0+255)
   772  0292  0086               	movwf	6
   773  0293  0187               	clrf	7
   774  0294  0021               	movlb	1	; select bank1
   775  0295  0848               	movf	??_initializeSensors^(0+128),w
   776  0296  0081               	movwf	1
   777                           
   778                           ;main.c: 214: sensors[i].debounce.handler = default_handler;
   779  0297  3007               	movlw	7
   780  0298  00C8               	movwf	??_initializeSensors^(0+128)
   781  0299  0848               	movf	??_initializeSensors^(0+128),w
   782  029A  00C4               	movwf	___bmul@multiplicand^(0+128)
   783  029B  084B               	movf	initializeSensors@i^(0+128),w
   784  029C  3183  23D3  3182   	fcall	___bmul
   785  029F  3E05               	addlw	5
   786  02A0  3EA0               	addlw	(low (_sensors| 0))& (0+255)
   787  02A1  0086               	movwf	6
   788  02A2  0187               	clrf	7
   789  02A3  300E               	movlw	low _default_handler
   790  02A4  3FC0               	movwi [0]fsr1
   791  02A5  3004               	movlw	high _default_handler
   792  02A6  3FC1               	movwi [1]fsr1
   793  02A7  3001               	movlw	1
   794  02A8  0021               	movlb	1	; select bank1
   795  02A9  07CB               	addwf	initializeSensors@i^(0+128),f
   796  02AA  3000               	movlw	0
   797  02AB  3DCC               	addwfc	(initializeSensors@i+1)^(0+128),f
   798  02AC  084C               	movf	(initializeSensors@i+1)^(0+128),w
   799  02AD  3A80               	xorlw	128
   800  02AE  00C8               	movwf	??_initializeSensors^(0+128)
   801  02AF  3080               	movlw	128
   802  02B0  0248               	subwf	??_initializeSensors^(0+128),w
   803  02B1  1D03               	skipz
   804  02B2  2AB5               	goto	u885
   805  02B3  3005               	movlw	5
   806  02B4  024B               	subwf	initializeSensors@i^(0+128),w
   807  02B5                     u885:	
   808  02B5  1C03               	skipc
   809  02B6  2A5F               	goto	l1261
   810  02B7                     l1267:	
   811                           
   812                           ;main.c: 215: }
   813                           ;main.c: 218: sensors[1].debounce.handler = switch_handler;
   814  02B7  3022               	movlw	low _switch_handler
   815  02B8  0021               	movlb	1	; select bank1
   816  02B9  00AC               	movwf	(low ((_sensors| 0+12)))^(0+128)
   817  02BA  3004               	movlw	high _switch_handler
   818  02BB  00AD               	movwf	((low ((_sensors| 0+12)))^(0+128)+1)
   819  02BC  0008               	return
   820  02BD                     __end_of_initializeSensors:	
   821                           
   822                           	psect	text2
   823  03D3                     __ptext2:	
   824 ;; *************** function ___bmul *****************
   825 ;; Defined at:
   826 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul8.c"
   827 ;; Parameters:    Size  Location     Type
   828 ;;  multiplier      1    wreg     unsigned char 
   829 ;;  multiplicand    1    0[BANK1 ] unsigned char 
   830 ;; Auto vars:     Size  Location     Type
   831 ;;  multiplier      1    3[BANK1 ] unsigned char 
   832 ;;  product         1    2[BANK1 ] unsigned char 
   833 ;; Return value:  Size  Location     Type
   834 ;;                  1    wreg      unsigned char 
   835 ;; Registers used:
   836 ;;		wreg, status,2, status,0
   837 ;; Tracked objects:
   838 ;;		On entry : 0/0
   839 ;;		On exit  : 0/0
   840 ;;		Unchanged: 0/0
   841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   842 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
   843 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
   844 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
   845 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
   846 ;;Total ram usage:        4 bytes
   847 ;; Hardware stack levels used:    1
   848 ;; Hardware stack levels required when called:    4
   849 ;; This function calls:
   850 ;;		Nothing
   851 ;; This function is called by:
   852 ;;		_initializeSensors
   853 ;;		_ISR
   854 ;; This function uses a non-reentrant model
   855 ;;
   856                           
   857                           
   858                           ;psect for function ___bmul
   859  03D3                     ___bmul:	
   860                           
   861                           ;incstack = 0
   862                           ; Regs used in ___bmul: [wreg+status,2+status,0]
   863                           ;___bmul@multiplier stored from wreg
   864  03D3  0021               	movlb	1	; select bank1
   865  03D4  00C7               	movwf	___bmul@multiplier^(0+128)
   866  03D5  01C6               	clrf	___bmul@product^(0+128)
   867  03D6                     l1107:	
   868  03D6  1C47               	btfss	___bmul@multiplier^(0+128),0
   869  03D7  2BDC               	goto	l1111
   870  03D8  0844               	movf	___bmul@multiplicand^(0+128),w
   871  03D9  00C5               	movwf	??___bmul^(0+128)
   872  03DA  0845               	movf	??___bmul^(0+128),w
   873  03DB  07C6               	addwf	___bmul@product^(0+128),f
   874  03DC                     l1111:	
   875  03DC  1003               	clrc
   876  03DD  0DC4               	rlf	___bmul@multiplicand^(0+128),f
   877  03DE  1003               	clrc
   878  03DF  0CC7               	rrf	___bmul@multiplier^(0+128),f
   879  03E0  0847               	movf	___bmul@multiplier^(0+128),w
   880  03E1  1D03               	btfss	3,2
   881  03E2  2BD6               	goto	l1107
   882  03E3  0846               	movf	___bmul@product^(0+128),w
   883  03E4  0008               	return
   884  03E5                     __end_of___bmul:	
   885                           
   886                           	psect	text3
   887  02BD                     __ptext3:	
   888 ;; *************** function _initializePIC *****************
   889 ;; Defined at:
   890 ;;		line 106 in file "main.c"
   891 ;; Parameters:    Size  Location     Type
   892 ;;		None
   893 ;; Auto vars:     Size  Location     Type
   894 ;;		None
   895 ;; Return value:  Size  Location     Type
   896 ;;                  1    wreg      void 
   897 ;; Registers used:
   898 ;;		wreg, status,2
   899 ;; Tracked objects:
   900 ;;		On entry : 0/0
   901 ;;		On exit  : 0/0
   902 ;;		Unchanged: 0/0
   903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   908 ;;Total ram usage:        0 bytes
   909 ;; Hardware stack levels used:    1
   910 ;; Hardware stack levels required when called:    4
   911 ;; This function calls:
   912 ;;		Nothing
   913 ;; This function is called by:
   914 ;;		_main
   915 ;; This function uses a non-reentrant model
   916 ;;
   917                           
   918                           
   919                           ;psect for function _initializePIC
   920  02BD                     _initializePIC:	
   921                           
   922                           ;main.c: 112: OSCCON = 0b00111000;
   923                           
   924                           ;incstack = 0
   925                           ; Regs used in _initializePIC: [wreg+status,2]
   926  02BD  3038               	movlw	56
   927  02BE  0021               	movlb	1	; select bank1
   928  02BF  0099               	movwf	25	;volatile
   929                           
   930                           ;main.c: 123: INTCON = 0b11001000;
   931  02C0  30C8               	movlw	200
   932  02C1  008B               	movwf	11	;volatile
   933                           
   934                           ;main.c: 126: TRISCbits.TRISC0 = 0;
   935  02C2  100E               	bcf	14,0	;volatile
   936                           
   937                           ;main.c: 127: TRISCbits.TRISC1 = 0;
   938  02C3  108E               	bcf	14,1	;volatile
   939                           
   940                           ;main.c: 128: TRISCbits.TRISC2 = 0;
   941  02C4  110E               	bcf	14,2	;volatile
   942                           
   943                           ;main.c: 129: TRISCbits.TRISC3 = 0;
   944  02C5  118E               	bcf	14,3	;volatile
   945                           
   946                           ;main.c: 130: LATC = 0;
   947  02C6  0022               	movlb	2	; select bank2
   948  02C7  018E               	clrf	14	;volatile
   949                           
   950                           ;main.c: 133: TRISAbits.TRISA0 = 1;
   951  02C8  0021               	movlb	1	; select bank1
   952  02C9  140C               	bsf	12,0	;volatile
   953                           
   954                           ;main.c: 134: ANSELAbits.ANSA0 = 1;
   955  02CA  0023               	movlb	3	; select bank3
   956  02CB  140C               	bsf	12,0	;volatile
   957                           
   958                           ;main.c: 137: TRISAbits.TRISA1 = 1;
   959  02CC  0021               	movlb	1	; select bank1
   960  02CD  148C               	bsf	12,1	;volatile
   961                           
   962                           ;main.c: 138: ANSELAbits.ANSA1 = 0;
   963  02CE  0023               	movlb	3	; select bank3
   964  02CF  108C               	bcf	12,1	;volatile
   965                           
   966                           ;main.c: 141: TRISAbits.TRISA2 = 1;
   967  02D0  0021               	movlb	1	; select bank1
   968  02D1  150C               	bsf	12,2	;volatile
   969                           
   970                           ;main.c: 142: ANSELAbits.ANSA2 = 0;
   971  02D2  0023               	movlb	3	; select bank3
   972  02D3  110C               	bcf	12,2	;volatile
   973                           
   974                           ;main.c: 145: TRISAbits.TRISA3 = 1;
   975  02D4  0021               	movlb	1	; select bank1
   976  02D5  158C               	bsf	12,3	;volatile
   977                           
   978                           ;main.c: 148: TRISAbits.TRISA4 = 1;
   979  02D6  160C               	bsf	12,4	;volatile
   980                           
   981                           ;main.c: 149: ANSELAbits.ANSA4 = 0;
   982  02D7  0023               	movlb	3	; select bank3
   983  02D8  120C               	bcf	12,4	;volatile
   984                           
   985                           ;main.c: 152: TRISAbits.TRISA5 = 1;
   986  02D9  0021               	movlb	1	; select bank1
   987  02DA  168C               	bsf	12,5	;volatile
   988                           
   989                           ;main.c: 155: IOCANbits.IOCAN1 = 1;
   990  02DB  0027               	movlb	7	; select bank7
   991  02DC  1492               	bsf	18,1	;volatile
   992                           
   993                           ;main.c: 156: IOCANbits.IOCAN2 = 1;
   994  02DD  1512               	bsf	18,2	;volatile
   995                           
   996                           ;main.c: 157: IOCANbits.IOCAN4 = 1;
   997  02DE  1612               	bsf	18,4	;volatile
   998                           
   999                           ;main.c: 160: IOCAPbits.IOCAP3 = 1;
  1000  02DF  1591               	bsf	17,3	;volatile
  1001                           
  1002                           ;main.c: 161: IOCAPbits.IOCAP5 = 1;
  1003  02E0  1691               	bsf	17,5	;volatile
  1004                           
  1005                           ;main.c: 168: ADCON0 = 0b00000001;
  1006  02E1  3001               	movlw	1
  1007  02E2  0021               	movlb	1	; select bank1
  1008  02E3  009D               	movwf	29	;volatile
  1009                           
  1010                           ;main.c: 175: ADCON1 = 0b10000000;
  1011  02E4  3080               	movlw	128
  1012  02E5  009E               	movwf	30	;volatile
  1013                           
  1014                           ;main.c: 177: PIR1bits.ADIF = 0;
  1015  02E6  0020               	movlb	0	; select bank0
  1016  02E7  1311               	bcf	17,6	;volatile
  1017                           
  1018                           ;main.c: 178: PIE1bits.ADIE = 1;
  1019  02E8  0021               	movlb	1	; select bank1
  1020  02E9  1711               	bsf	17,6	;volatile
  1021                           
  1022                           ;main.c: 181: T2CON = 0b01111111;
  1023  02EA  307F               	movlw	127
  1024  02EB  0020               	movlb	0	; select bank0
  1025  02EC  009C               	movwf	28	;volatile
  1026                           
  1027                           ;main.c: 182: PIE1bits.TMR2IE = 1;
  1028  02ED  0021               	movlb	1	; select bank1
  1029  02EE  1491               	bsf	17,1	;volatile
  1030                           
  1031                           ;main.c: 189: T6CON = 0b00100000;
  1032  02EF  3020               	movlw	32
  1033  02F0  0028               	movlb	8	; select bank8
  1034  02F1  009E               	movwf	30	;volatile
  1035                           
  1036                           ;main.c: 190: PR6 = 125;
  1037  02F2  307D               	movlw	125
  1038  02F3  009D               	movwf	29	;volatile
  1039                           
  1040                           ;main.c: 191: PIE3bits.TMR6IE = 1;
  1041  02F4  0021               	movlb	1	; select bank1
  1042  02F5  1593               	bsf	19,3	;volatile
  1043                           
  1044                           ;main.c: 194: APFCON0bits.RXDTSEL = 1;
  1045  02F6  0022               	movlb	2	; select bank2
  1046  02F7  179D               	bsf	29,7	;volatile
  1047                           
  1048                           ;main.c: 195: APFCON0bits.TXCKSEL = 1;
  1049  02F8  151D               	bsf	29,2	;volatile
  1050                           
  1051                           ;main.c: 197: BRG16 = 1;
  1052  02F9  0023               	movlb	3	; select bank3
  1053  02FA  159F               	bsf	31,3	;volatile
  1054                           
  1055                           ;main.c: 198: TXSTAbits.BRGH = 1;
  1056  02FB  151E               	bsf	30,2	;volatile
  1057                           
  1058                           ;main.c: 199: SPBRG = 12;
  1059  02FC  3000               	movlw	0
  1060  02FD  009C               	movwf	28	;volatile
  1061  02FE  300C               	movlw	12
  1062  02FF  009B               	movwf	27	;volatile
  1063                           
  1064                           ;main.c: 201: TXSTAbits.SYNC = 0;
  1065  0300  121E               	bcf	30,4	;volatile
  1066                           
  1067                           ;main.c: 202: RCSTAbits.SPEN = 1;
  1068  0301  179D               	bsf	29,7	;volatile
  1069                           
  1070                           ;main.c: 203: TXSTAbits.TXEN = 1;
  1071  0302  169E               	bsf	30,5	;volatile
  1072                           
  1073                           ;main.c: 204: RCSTAbits.CREN = 1;
  1074  0303  161D               	bsf	29,4	;volatile
  1075                           
  1076                           ;main.c: 206: PIE1bits.RCIE = 1;
  1077  0304  0021               	movlb	1	; select bank1
  1078  0305  1691               	bsf	17,5	;volatile
  1079  0306  0008               	return
  1080  0307                     __end_of_initializePIC:	
  1081                           
  1082                           	psect	text4
  1083  01E2                     __ptext4:	
  1084 ;; *************** function _autoBaud *****************
  1085 ;; Defined at:
  1086 ;;		line 221 in file "main.c"
  1087 ;; Parameters:    Size  Location     Type
  1088 ;;		None
  1089 ;; Auto vars:     Size  Location     Type
  1090 ;;  index           2    4[BANK1 ] int 
  1091 ;;  sync_count      2    2[BANK1 ] int 
  1092 ;;  discard         1    1[BANK1 ] unsigned char 
  1093 ;; Return value:  Size  Location     Type
  1094 ;;                  1    wreg      void 
  1095 ;; Registers used:
  1096 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1097 ;; Tracked objects:
  1098 ;;		On entry : 0/0
  1099 ;;		On exit  : 0/0
  1100 ;;		Unchanged: 0/0
  1101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1102 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1103 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  1104 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  1105 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  1106 ;;Total ram usage:        6 bytes
  1107 ;; Hardware stack levels used:    1
  1108 ;; Hardware stack levels required when called:    4
  1109 ;; This function calls:
  1110 ;;		Nothing
  1111 ;; This function is called by:
  1112 ;;		_main
  1113 ;; This function uses a non-reentrant model
  1114 ;;
  1115                           
  1116                           
  1117                           ;psect for function _autoBaud
  1118  01E2                     _autoBaud:	
  1119  01E2  2A47               	goto	l1299
  1120  01E3                     l127:	
  1121                           ;main.c: 230: {
  1122                           ;main.c: 231: case 0:
  1123                           
  1124                           ;main.c: 229: switch(index)
  1125                           
  1126                           ;main.c: 225: int sync_count;
  1127                           ;main.c: 227: try:
  1128                           
  1129                           ;main.c: 223: char discard;
  1130                           ;main.c: 224: int index = 0;
  1131                           
  1132                           ;incstack = 0
  1133                           ; Regs used in _autoBaud: [wreg-fsr0h+status,2+status,0]
  1134                           
  1135                           
  1136                           ;main.c: 232: BAUDCONbits.BRG16 = 0;
  1137  01E3  0023               	movlb	3	; select bank3
  1138  01E4  119F               	bcf	31,3	;volatile
  1139  01E5  29EB               	goto	L1
  1140  01E6                     l129:	
  1141                           ;main.c: 235: case 1:
  1142                           
  1143                           ;main.c: 234: break;
  1144                           
  1145                           ;main.c: 233: TXSTAbits.BRGH = 0;
  1146                           
  1147                           
  1148                           ;main.c: 236: BAUDCONbits.BRG16 = 0;
  1149  01E6  0023               	movlb	3	; select bank3
  1150  01E7  119F               	bcf	31,3	;volatile
  1151  01E8  29EF               	goto	L2
  1152  01E9                     l130:	
  1153                           ;main.c: 239: case 2:
  1154                           
  1155                           ;main.c: 238: break;
  1156                           
  1157                           ;main.c: 237: TXSTAbits.BRGH = 1;
  1158                           
  1159                           
  1160                           ;main.c: 240: BAUDCONbits.BRG16 = 1;
  1161  01E9  0023               	movlb	3	; select bank3
  1162  01EA  159F               	bsf	31,3	;volatile
  1163  01EB                     L1:	
  1164                           
  1165                           ;main.c: 241: TXSTAbits.BRGH = 0;
  1166  01EB  111E               	bcf	30,2	;volatile
  1167                           
  1168                           ;main.c: 242: break;
  1169  01EC  29F0               	goto	l128
  1170  01ED                     l131:	
  1171                           ;main.c: 243: case 3:
  1172                           
  1173                           
  1174                           ;main.c: 244: BAUDCONbits.BRG16 = 1;
  1175  01ED  0023               	movlb	3	; select bank3
  1176  01EE  159F               	bsf	31,3	;volatile
  1177  01EF                     L2:	
  1178                           
  1179                           ;main.c: 245: TXSTAbits.BRGH = 1;
  1180  01EF  151E               	bsf	30,2	;volatile
  1181  01F0                     l128:	
  1182                           ;main.c: 247: }
  1183                           
  1184                           ;main.c: 246: break;
  1185                           
  1186                           
  1187                           ;main.c: 249: BAUDCONbits.ABDEN = 1;
  1188  01F0  0023               	movlb	3	; select bank3
  1189  01F1  141F               	bsf	31,0	;volatile
  1190  01F2                     l132:	
  1191                           ;main.c: 250: while(!PIR1bits.RCIF);
  1192                           
  1193  01F2  0020               	movlb	0	; select bank0
  1194  01F3  1E91               	btfss	17,5	;volatile
  1195  01F4  29F2               	goto	l132
  1196                           
  1197                           ;main.c: 251: discard = RCREG;
  1198  01F5  0023               	movlb	3	; select bank3
  1199  01F6  0819               	movf	25,w	;volatile
  1200  01F7  0021               	movlb	1	; select bank1
  1201  01F8  00C4               	movwf	??_autoBaud^(0+128)
  1202  01F9  0844               	movf	??_autoBaud^(0+128),w
  1203  01FA  00C5               	movwf	autoBaud@discard^(0+128)
  1204                           
  1205                           ;main.c: 253: if(SPBRG != 0)
  1206  01FB  0023               	movlb	3	; select bank3
  1207  01FC  081B               	movf	27,w	;volatile
  1208  01FD  041C               	iorwf	28,w	;volatile
  1209  01FE  1903               	btfsc	3,2
  1210  01FF  2A04               	goto	l1281
  1211                           
  1212                           ;main.c: 254: {
  1213                           ;main.c: 255: --SPBRG;
  1214  0200  3001               	movlw	1
  1215  0201  029B               	subwf	27,f	;volatile
  1216  0202  3000               	movlw	0
  1217  0203  3B9C               	subwfb	28,f	;volatile
  1218  0204                     l1281:	
  1219                           
  1220                           ;main.c: 256: }
  1221                           ;main.c: 259: if(BAUDCONbits.ABDOVF)
  1222  0204  1F9F               	btfss	31,7	;volatile
  1223  0205  2A1C               	goto	l136
  1224                           
  1225                           ;main.c: 260: {
  1226                           ;main.c: 261: BAUDCONbits.ABDOVF = 0;
  1227  0206  139F               	bcf	31,7	;volatile
  1228  0207                     l1273:	
  1229                           
  1230                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1231                           ; Switch size 1, requested type "space"
  1232                           ; Number of cases is 1, Range of values is 0 to 0
  1233                           ; switch strategies available:
  1234                           ; Name         Instructions Cycles
  1235                           ; simple_byte            4     3 (average)
  1236                           ; direct_byte            8     6 (fixed)
  1237                           ; jumptable            260     6 (fixed)
  1238                           ;	Chosen strategy is simple_byte
  1239  0207  0021               	movlb	1	; select bank1
  1240  0208  0849               	movf	(autoBaud@index+1)^(0+128),w
  1241  0209  3A00               	xorlw	0	; case 0
  1242  020A  1903               	skipnz
  1243  020B  2A0D               	goto	l1531
  1244  020C  29F0               	goto	l128
  1245  020D                     l1531:	
  1246                           
  1247                           ; Switch size 1, requested type "space"
  1248                           ; Number of cases is 4, Range of values is 0 to 3
  1249                           ; switch strategies available:
  1250                           ; Name         Instructions Cycles
  1251                           ; simple_byte           13     7 (average)
  1252                           ; direct_byte           14     6 (fixed)
  1253                           ; jumptable            260     6 (fixed)
  1254                           ;	Chosen strategy is simple_byte
  1255  020D  0848               	movf	autoBaud@index^(0+128),w
  1256  020E  3A00               	xorlw	0	; case 0
  1257  020F  1903               	skipnz
  1258  0210  29E3               	goto	l127
  1259  0211  3A01               	xorlw	1	; case 1
  1260  0212  1903               	skipnz
  1261  0213  29E6               	goto	l129
  1262  0214  3A03               	xorlw	3	; case 2
  1263  0215  1903               	skipnz
  1264  0216  29E9               	goto	l130
  1265  0217  3A01               	xorlw	1	; case 3
  1266  0218  1903               	skipnz
  1267  0219  29ED               	goto	l131
  1268  021A  29F0               	goto	l128
  1269                           
  1270                           ;main.c: 262: goto try;
  1271  021B  29F0               	goto	l128
  1272  021C                     l136:	
  1273                           
  1274                           ;main.c: 263: }
  1275                           ;main.c: 264: if(!BAUDCONbits.BRG16 && SPBRGH)
  1276  021C  199F               	btfsc	31,3	;volatile
  1277  021D  2A21               	goto	l1289
  1278  021E  081C               	movf	28,w	;volatile
  1279  021F  1D03               	btfss	3,2
  1280  0220  2A07               	goto	l1273
  1281  0221                     l1289:	
  1282                           ;main.c: 265: {
  1283                           ;main.c: 266: goto try;
  1284                           
  1285                           
  1286                           ;main.c: 267: }
  1287                           ;main.c: 270: for (sync_count=0; sync_count < 2; ++sync_count)
  1288  0221  0021               	movlb	1	; select bank1
  1289  0222  01C6               	clrf	autoBaud@sync_count^(0+128)
  1290  0223  01C7               	clrf	(autoBaud@sync_count+1)^(0+128)
  1291  0224                     L3:	
  1292  0224  0847               	movf	(autoBaud@sync_count+1)^(0+128),w
  1293  0225  3A80               	xorlw	128
  1294  0226  00C4               	movwf	??_autoBaud^(0+128)
  1295  0227  3080               	movlw	128
  1296  0228  0244               	subwf	??_autoBaud^(0+128),w
  1297  0229  1D03               	skipz
  1298  022A  2A2D               	goto	u945
  1299  022B  3002               	movlw	2
  1300  022C  0246               	subwf	autoBaud@sync_count^(0+128),w
  1301  022D                     u945:	
  1302  022D  1803               	btfsc	3,0
  1303  022E  0008               	return
  1304  022F                     l140:	
  1305                           ;main.c: 271: {
  1306                           ;main.c: 272: while(!PIR1bits.RCIF);
  1307                           
  1308  022F  0020               	movlb	0	; select bank0
  1309  0230  1E91               	btfss	17,5	;volatile
  1310  0231  2A2F               	goto	l140
  1311                           
  1312                           ;main.c: 273: if(RCREG != 'U')
  1313  0232  3055               	movlw	85
  1314  0233  0023               	movlb	3	; select bank3
  1315  0234  0619               	xorwf	25,w	;volatile
  1316  0235  1903               	btfsc	3,2
  1317  0236  2A4B               	goto	l1301
  1318                           
  1319                           ;main.c: 274: {
  1320                           ;main.c: 275: ++index;
  1321  0237  3001               	movlw	1
  1322  0238  0021               	movlb	1	; select bank1
  1323  0239  07C8               	addwf	autoBaud@index^(0+128),f
  1324  023A  3000               	movlw	0
  1325  023B  3DC9               	addwfc	(autoBaud@index+1)^(0+128),f
  1326                           
  1327                           ;main.c: 276: if(index > 3)
  1328  023C  0849               	movf	(autoBaud@index+1)^(0+128),w
  1329  023D  3A80               	xorlw	128
  1330  023E  00C4               	movwf	??_autoBaud^(0+128)
  1331  023F  3080               	movlw	128
  1332  0240  0244               	subwf	??_autoBaud^(0+128),w
  1333  0241  1D03               	skipz
  1334  0242  2A45               	goto	u975
  1335  0243  3004               	movlw	4
  1336  0244  0248               	subwf	autoBaud@index^(0+128),w
  1337  0245                     u975:	
  1338  0245  1C03               	skipc
  1339  0246  2A07               	goto	l1273
  1340  0247                     l1299:	
  1341                           
  1342                           ;main.c: 277: index = 0;
  1343  0247  0021               	movlb	1	; select bank1
  1344  0248  01C8               	clrf	autoBaud@index^(0+128)
  1345  0249  01C9               	clrf	(autoBaud@index+1)^(0+128)
  1346                           
  1347                           ;main.c: 278: goto try;
  1348  024A  2A07               	goto	l1273
  1349  024B                     l1301:	
  1350  024B  3001               	movlw	1
  1351  024C  0021               	movlb	1	; select bank1
  1352  024D  07C6               	addwf	autoBaud@sync_count^(0+128),f
  1353  024E  3000               	movlw	0
  1354  024F  3DC7               	addwfc	(autoBaud@sync_count+1)^(0+128),f
  1355  0250  2A24               	goto	L3
  1356  0251                     __end_of_autoBaud:	
  1357                           
  1358                           	psect	text5
  1359  038A                     __ptext5:	
  1360 ;; *************** function _UART_Write_Text *****************
  1361 ;; Defined at:
  1362 ;;		line 97 in file "main.c"
  1363 ;; Parameters:    Size  Location     Type
  1364 ;;  text            2    1[BANK1 ] PTR unsigned char 
  1365 ;;		 -> ISR@str(15), STR_2(3), STR_1(2), 
  1366 ;; Auto vars:     Size  Location     Type
  1367 ;;  count           2    4[BANK1 ] int 
  1368 ;; Return value:  Size  Location     Type
  1369 ;;                  1    wreg      void 
  1370 ;; Registers used:
  1371 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1372 ;; Tracked objects:
  1373 ;;		On entry : 0/0
  1374 ;;		On exit  : 0/0
  1375 ;;		Unchanged: 0/0
  1376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1377 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1378 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1379 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  1380 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  1381 ;;Total ram usage:        5 bytes
  1382 ;; Hardware stack levels used:    1
  1383 ;; Hardware stack levels required when called:    5
  1384 ;; This function calls:
  1385 ;;		_UART_Write
  1386 ;; This function is called by:
  1387 ;;		_main
  1388 ;; This function uses a non-reentrant model
  1389 ;;
  1390                           
  1391                           
  1392                           ;psect for function _UART_Write_Text
  1393  038A                     _UART_Write_Text:	
  1394                           
  1395                           ;main.c: 99: int count;
  1396                           ;main.c: 100: for(count = 0; text[count]!='\0'; count++)
  1397                           
  1398                           ;incstack = 0
  1399                           ; Regs used in _UART_Write_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1400  038A  0021               	movlb	1	; select bank1
  1401  038B  01C8               	clrf	UART_Write_Text@count^(0+128)
  1402  038C  01C9               	clrf	(UART_Write_Text@count+1)^(0+128)
  1403  038D                     l1313:	
  1404  038D  0845               	movf	UART_Write_Text@text^(0+128),w
  1405  038E  0748               	addwf	UART_Write_Text@count^(0+128),w
  1406  038F  0084               	movwf	4
  1407  0390  0846               	movf	(UART_Write_Text@text+1)^(0+128),w
  1408  0391  3D49               	addwfc	(UART_Write_Text@count+1)^(0+128),w
  1409  0392  0085               	movwf	5
  1410  0393  0012               	moviw fsr0++
  1411  0394  1903               	btfsc	3,2
  1412  0395  0008               	return
  1413                           
  1414                           ;main.c: 101: {
  1415                           ;main.c: 102: UART_Write(text[count]);
  1416  0396  0845               	movf	UART_Write_Text@text^(0+128),w
  1417  0397  0748               	addwf	UART_Write_Text@count^(0+128),w
  1418  0398  0084               	movwf	4
  1419  0399  0846               	movf	(UART_Write_Text@text+1)^(0+128),w
  1420  039A  3D49               	addwfc	(UART_Write_Text@count+1)^(0+128),w
  1421  039B  0085               	movwf	5
  1422  039C  0800               	movf	0,w	;code access
  1423  039D  3184  2404  3183   	fcall	_UART_Write
  1424  03A0  3001               	movlw	1
  1425  03A1  0021               	movlb	1	; select bank1
  1426  03A2  07C8               	addwf	UART_Write_Text@count^(0+128),f
  1427  03A3  3000               	movlw	0
  1428  03A4  3DC9               	addwfc	(UART_Write_Text@count+1)^(0+128),f
  1429  03A5  2B8D               	goto	l1313
  1430  03A6                     __end_of_UART_Write_Text:	
  1431                           
  1432                           	psect	text6
  1433  0404                     __ptext6:	
  1434 ;; *************** function _UART_Write *****************
  1435 ;; Defined at:
  1436 ;;		line 91 in file "main.c"
  1437 ;; Parameters:    Size  Location     Type
  1438 ;;  data            1    wreg     unsigned char 
  1439 ;; Auto vars:     Size  Location     Type
  1440 ;;  data            1    0[BANK1 ] unsigned char 
  1441 ;; Return value:  Size  Location     Type
  1442 ;;                  1    wreg      void 
  1443 ;; Registers used:
  1444 ;;		wreg
  1445 ;; Tracked objects:
  1446 ;;		On entry : 0/0
  1447 ;;		On exit  : 0/0
  1448 ;;		Unchanged: 0/0
  1449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1451 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  1452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1453 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  1454 ;;Total ram usage:        1 bytes
  1455 ;; Hardware stack levels used:    1
  1456 ;; Hardware stack levels required when called:    4
  1457 ;; This function calls:
  1458 ;;		Nothing
  1459 ;; This function is called by:
  1460 ;;		_UART_Write_Text
  1461 ;; This function uses a non-reentrant model
  1462 ;;
  1463                           
  1464                           
  1465                           ;psect for function _UART_Write
  1466  0404                     _UART_Write:	
  1467                           
  1468                           ;incstack = 0
  1469                           ; Regs used in _UART_Write: [wreg]
  1470                           ;UART_Write@data stored from wreg
  1471  0404  0021               	movlb	1	; select bank1
  1472  0405  00C4               	movwf	UART_Write@data^(0+128)
  1473  0406                     l105:	
  1474                           ;main.c: 93: while(!TRMT);
  1475                           
  1476  0406  0023               	movlb	3	; select bank3
  1477  0407  1C9E               	btfss	30,1	;volatile
  1478  0408  2C06               	goto	l105
  1479                           
  1480                           ;main.c: 94: TXREG = data;
  1481  0409  0021               	movlb	1	; select bank1
  1482  040A  0844               	movf	UART_Write@data^(0+128),w
  1483  040B  0023               	movlb	3	; select bank3
  1484  040C  009A               	movwf	26	;volatile
  1485  040D  0008               	return
  1486  040E                     __end_of_UART_Write:	
  1487                           
  1488                           	psect	intentry
  1489  0004                     __pintentry:	
  1490 ;; *************** function _ISR *****************
  1491 ;; Defined at:
  1492 ;;		line 284 in file "main.c"
  1493 ;; Parameters:    Size  Location     Type
  1494 ;;		None
  1495 ;; Auto vars:     Size  Location     Type
  1496 ;;  debounce        3   38[BANK0 ] struct debounce_t
  1497 ;;  i               2   41[BANK0 ] int 
  1498 ;;  x               1   35[BANK0 ] unsigned char 
  1499 ;;  str            15   20[BANK0 ] unsigned char [15]
  1500 ;;  shouldDeboun    2   36[BANK0 ] int 
  1501 ;; Return value:  Size  Location     Type
  1502 ;;                  1    wreg      void 
  1503 ;; Registers used:
  1504 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1505 ;; Tracked objects:
  1506 ;;		On entry : 0/0
  1507 ;;		On exit  : 0/0
  1508 ;;		Unchanged: 0/0
  1509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1511 ;;      Locals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1512 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1513 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1514 ;;Total ram usage:       28 bytes
  1515 ;; Hardware stack levels used:    1
  1516 ;; Hardware stack levels required when called:    3
  1517 ;; This function calls:
  1518 ;;		_default_handler
  1519 ;;		_get_port_pin
  1520 ;;		_sprintf
  1521 ;;		_switch_handler
  1522 ;;		i1_UART_Write_Text
  1523 ;;		i1___bmul
  1524 ;; This function is called by:
  1525 ;;		Interrupt level 1
  1526 ;; This function uses a non-reentrant model
  1527 ;;
  1528                           
  1529  0004                     _ISR:	
  1530                           
  1531                           ;incstack = 0
  1532  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  1533                           
  1534                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1535  0005  3180               	pagesel	$
  1536  0006  0020               	movlb	0	; select bank0
  1537  0007  087F               	movf	127,w
  1538  0008  00B3               	movwf	??_ISR+4
  1539                           
  1540                           ;main.c: 285: int shouldDebounce = 0;
  1541  0009  01C4               	clrf	ISR@shouldDebounce
  1542  000A  01C5               	clrf	ISR@shouldDebounce+1
  1543                           
  1544                           ;main.c: 288: if(PIR3bits.TMR6IF){
  1545  000B  1D93               	btfss	19,3	;volatile
  1546  000C  287B               	goto	i1l148
  1547                           
  1548                           ;main.c: 289: T6CONbits.TMR6ON = 0;
  1549  000D  0028               	movlb	8	; select bank8
  1550  000E  111E               	bcf	30,2	;volatile
  1551                           
  1552                           ;main.c: 291: for(int i = 0; i < 5; ++i){
  1553  000F  0020               	movlb	0	; select bank0
  1554  0010  01C9               	clrf	ISR@i
  1555  0011  01CA               	clrf	ISR@i+1
  1556  0012  084A               	movf	ISR@i+1,w
  1557  0013  3A80               	xorlw	128
  1558  0014  00AF               	movwf	??_ISR
  1559  0015  3080               	movlw	128
  1560  0016  022F               	subwf	??_ISR,w
  1561  0017  1D03               	skipz
  1562  0018  281B               	goto	u115_25
  1563  0019  3005               	movlw	5
  1564  001A  0249               	subwf	ISR@i,w
  1565  001B                     u115_25:	
  1566  001B  1803               	btfsc	3,0
  1567  001C  2879               	goto	i1l150
  1568  001D                     i1l1427:	
  1569                           
  1570                           ;main.c: 292: Debounce debounce = sensors[i].debounce;
  1571  001D  3007               	movlw	7
  1572  001E  0020               	movlb	0	; select bank0
  1573  001F  00AF               	movwf	??_ISR
  1574  0020  082F               	movf	??_ISR,w
  1575  0021  00F0               	movwf	i1___bmul@multiplicand
  1576  0022  0849               	movf	ISR@i,w
  1577  0023  3183  23E5  3180   	fcall	i1___bmul
  1578  0026  3E04               	addlw	4
  1579  0027  3EA0               	addlw	(low (_sensors| 0))& (0+255)
  1580  0028  0086               	movwf	6
  1581  0029  0187               	clrf	7
  1582  002A  3F40               	moviw [0]fsr1
  1583  002B  0020               	movlb	0	; select bank0
  1584  002C  00C6               	movwf	ISR@debounce
  1585  002D  3F41               	moviw [1]fsr1
  1586  002E  00C7               	movwf	ISR@debounce+1
  1587  002F  3F42               	moviw [2]fsr1
  1588  0030  00C8               	movwf	ISR@debounce+2
  1589                           
  1590                           ;main.c: 293: if(debounce.shouldDebounce &&
  1591                           ;main.c: 294: debounce.previousState == get_port_pin(sensors[i].port, sensors[i].pin)){
  1592  0031  1C46               	btfss	ISR@debounce,0
  1593  0032  286A               	goto	i1l1437
  1594  0033  0C46               	rrf	ISR@debounce,w
  1595  0034  3901               	andlw	1
  1596  0035  00AF               	movwf	??_ISR
  1597  0036  3007               	movlw	7
  1598  0037  00B0               	movwf	??_ISR+1
  1599  0038  0830               	movf	??_ISR+1,w
  1600  0039  00F0               	movwf	i1___bmul@multiplicand
  1601  003A  0849               	movf	ISR@i,w
  1602  003B  3183  23E5  3180   	fcall	i1___bmul
  1603  003E  3E01               	addlw	1
  1604  003F  3EA0               	addlw	(low (_sensors| 0))& (0+255)
  1605  0040  0086               	movwf	6
  1606  0041  0187               	clrf	7
  1607  0042  3F40               	moviw [0]fsr1
  1608  0043  00F4               	movwf	get_port_pin@port
  1609  0044  3F41               	moviw [1]fsr1
  1610  0045  00F5               	movwf	get_port_pin@port+1
  1611  0046  3007               	movlw	7
  1612  0047  0020               	movlb	0	; select bank0
  1613  0048  00B1               	movwf	??_ISR+2
  1614  0049  0831               	movf	??_ISR+2,w
  1615  004A  00F0               	movwf	i1___bmul@multiplicand
  1616  004B  0849               	movf	ISR@i,w
  1617  004C  3183  23E5  3180   	fcall	i1___bmul
  1618  004F  3E03               	addlw	3
  1619  0050  3EA0               	addlw	(low (_sensors| 0))& (0+255)
  1620  0051  0086               	movwf	6
  1621  0052  0187               	clrf	7
  1622  0053  0801               	movf	1,w
  1623  0054  0020               	movlb	0	; select bank0
  1624  0055  00B2               	movwf	??_ISR+3
  1625  0056  0832               	movf	??_ISR+3,w
  1626  0057  00F6               	movwf	get_port_pin@pin
  1627  0058  3183  23F6  3180   	fcall	_get_port_pin
  1628  005B  0020               	movlb	0	; select bank0
  1629  005C  062F               	xorwf	??_ISR,w
  1630  005D  1D03               	skipz
  1631  005E  286A               	goto	i1l1437
  1632                           
  1633                           ;main.c: 295: debounce.handler();
  1634  005F  3001               	movlw	1
  1635  0060  3E46               	addlw	(low (ISR@debounce| 0))& (0+255)
  1636  0061  0086               	movwf	6
  1637  0062  0187               	clrf	7
  1638  0063  3F41               	moviw [1]fsr1
  1639  0064  008A               	movwf	10
  1640  0065  3F40               	moviw [0]fsr1
  1641  0066  000A               	callw
  1642  0067  3180               	pagesel	$
  1643                           
  1644                           ;main.c: 296: debounce.shouldDebounce = 0;
  1645  0068  0020               	movlb	0	; select bank0
  1646  0069  1046               	bcf	ISR@debounce,0
  1647  006A                     i1l1437:	
  1648  006A  3001               	movlw	1
  1649  006B  07C9               	addwf	ISR@i,f
  1650  006C  3000               	movlw	0
  1651  006D  3DCA               	addwfc	ISR@i+1,f
  1652  006E  084A               	movf	ISR@i+1,w
  1653  006F  3A80               	xorlw	128
  1654  0070  00AF               	movwf	??_ISR
  1655  0071  3080               	movlw	128
  1656  0072  022F               	subwf	??_ISR,w
  1657  0073  1D03               	skipz
  1658  0074  2877               	goto	u118_25
  1659  0075  3005               	movlw	5
  1660  0076  0249               	subwf	ISR@i,w
  1661  0077                     u118_25:	
  1662  0077  1C03               	skipc
  1663  0078  281D               	goto	i1l1427
  1664  0079                     i1l150:	
  1665                           
  1666                           ;main.c: 297: }
  1667                           ;main.c: 298: }
  1668                           ;main.c: 300: TMR6IF = 0;
  1669  0079  0020               	movlb	0	; select bank0
  1670  007A  1193               	bcf	19,3	;volatile
  1671  007B                     i1l148:	
  1672                           
  1673                           ;main.c: 301: }
  1674                           ;main.c: 305: if(ADIF){
  1675  007B  1F11               	btfss	17,6	;volatile
  1676  007C  2898               	goto	i1l1449
  1677                           
  1678                           ;main.c: 306: char str[15];
  1679                           ;main.c: 307: sprintf(str," %d", ADRES);
  1680  007D  30CA               	movlw	low (STR_3| (0+32768))
  1681  007E  00A0               	movwf	sprintf@f
  1682  007F  3083               	movlw	high (STR_3| (0+32768))
  1683  0080  00A1               	movwf	sprintf@f+1
  1684  0081  0021               	movlb	1	; select bank1
  1685  0082  081C               	movf	28,w	;volatile
  1686  0083  0020               	movlb	0	; select bank0
  1687  0084  00A3               	movwf	?_sprintf+3
  1688  0085  0021               	movlb	1	; select bank1
  1689  0086  081B               	movf	27,w	;volatile
  1690  0087  0020               	movlb	0	; select bank0
  1691  0088  00A2               	movwf	?_sprintf+2
  1692  0089  3034               	movlw	(low (ISR@str| 0))& (0+255)
  1693  008A  3181  2115  3180   	fcall	_sprintf
  1694                           
  1695                           ;main.c: 308: UART_Write_Text(str);
  1696  008D  3034               	movlw	low ISR@str
  1697  008E  00F1               	movwf	i1UART_Write_Text@text
  1698  008F  3000               	movlw	high ISR@str
  1699  0090  00F2               	movwf	i1UART_Write_Text@text+1
  1700  0091  3183  23A6  3180   	fcall	i1_UART_Write_Text
  1701                           
  1702                           ;main.c: 309: ADCON0bits.GO = 0;
  1703  0094  0021               	movlb	1	; select bank1
  1704  0095  109D               	bcf	29,1	;volatile
  1705                           
  1706                           ;main.c: 310: ADIF = 0;
  1707  0096  0020               	movlb	0	; select bank0
  1708  0097  1311               	bcf	17,6	;volatile
  1709  0098                     i1l1449:	
  1710                           
  1711                           ;main.c: 311: }
  1712                           ;main.c: 315: if(PIR1bits.RCIF){
  1713  0098  1E91               	btfss	17,5	;volatile
  1714  0099  28A1               	goto	i1l1455
  1715                           
  1716                           ;main.c: 316: char x = RCREG;
  1717  009A  0023               	movlb	3	; select bank3
  1718  009B  0819               	movf	25,w	;volatile
  1719  009C  0020               	movlb	0	; select bank0
  1720  009D  00AF               	movwf	??_ISR
  1721  009E  082F               	movf	??_ISR,w
  1722  009F  00C3               	movwf	ISR@x
  1723                           
  1724                           ;main.c: 317: PIR1bits.RCIF = 0;
  1725  00A0  1291               	bcf	17,5	;volatile
  1726  00A1                     i1l1455:	
  1727                           
  1728                           ;main.c: 318: }
  1729                           ;main.c: 321: if(PIR1bits.TMR2IF){
  1730  00A1  1C91               	btfss	17,1	;volatile
  1731  00A2  28A7               	goto	i1l154
  1732                           
  1733                           ;main.c: 322: ADCON0bits.GO = 1;
  1734  00A3  0021               	movlb	1	; select bank1
  1735  00A4  149D               	bsf	29,1	;volatile
  1736                           
  1737                           ;main.c: 323: PIR1bits.TMR2IF = 0;
  1738  00A5  0020               	movlb	0	; select bank0
  1739  00A6  1091               	bcf	17,1	;volatile
  1740  00A7                     i1l154:	
  1741                           
  1742                           ;main.c: 324: }
  1743                           ;main.c: 327: if(IOCAFbits.IOCAF1){
  1744  00A7  0027               	movlb	7	; select bank7
  1745  00A8  1C93               	btfss	19,1	;volatile
  1746  00A9  28B9               	goto	i1l1467
  1747                           
  1748                           ;main.c: 328: shouldDebounce = 1;
  1749  00AA  3001               	movlw	1
  1750  00AB  0020               	movlb	0	; select bank0
  1751  00AC  00C4               	movwf	ISR@shouldDebounce
  1752  00AD  3000               	movlw	0
  1753  00AE  00C5               	movwf	ISR@shouldDebounce+1
  1754                           
  1755                           ;main.c: 329: sensors[0].debounce.shouldDebounce = 1;
  1756  00AF  0021               	movlb	1	; select bank1
  1757  00B0  1424               	bsf	(_sensors^(0+128)+4),0
  1758                           
  1759                           ;main.c: 330: sensors[0].debounce.previousState = PORTAbits.RA1;
  1760  00B1  10A4               	bcf	(_sensors^(0+128)+4),1
  1761  00B2  0020               	movlb	0	; select bank0
  1762  00B3  1C8C               	btfss	12,1	;volatile
  1763  00B4  28B7               	goto	i1l1465
  1764  00B5  0021               	movlb	1	; select bank1
  1765  00B6  14A4               	bsf	(_sensors^(0+128)+4),1
  1766  00B7                     i1l1465:	
  1767                           
  1768                           ;main.c: 331: IOCAFbits.IOCAF1 = 0;
  1769  00B7  0027               	movlb	7	; select bank7
  1770  00B8  1093               	bcf	19,1	;volatile
  1771  00B9                     i1l1467:	
  1772                           
  1773                           ;main.c: 332: }
  1774                           ;main.c: 335: if(IOCAFbits.IOCAF2){
  1775  00B9  1D13               	btfss	19,2	;volatile
  1776  00BA  28CA               	goto	i1l1477
  1777                           
  1778                           ;main.c: 336: shouldDebounce = 1;
  1779  00BB  3001               	movlw	1
  1780  00BC  0020               	movlb	0	; select bank0
  1781  00BD  00C4               	movwf	ISR@shouldDebounce
  1782  00BE  3000               	movlw	0
  1783  00BF  00C5               	movwf	ISR@shouldDebounce+1
  1784                           
  1785                           ;main.c: 337: sensors[1].debounce.shouldDebounce = 1;
  1786  00C0  0021               	movlb	1	; select bank1
  1787  00C1  142B               	bsf	(_sensors^(0+128)+11),0
  1788                           
  1789                           ;main.c: 338: sensors[1].debounce.previousState = PORTAbits.RA2;
  1790  00C2  10AB               	bcf	(_sensors^(0+128)+11),1
  1791  00C3  0020               	movlb	0	; select bank0
  1792  00C4  1D0C               	btfss	12,2	;volatile
  1793  00C5  28C8               	goto	i1l1475
  1794  00C6  0021               	movlb	1	; select bank1
  1795  00C7  14AB               	bsf	(_sensors^(0+128)+11),1
  1796  00C8                     i1l1475:	
  1797                           
  1798                           ;main.c: 339: IOCAFbits.IOCAF2 = 0;
  1799  00C8  0027               	movlb	7	; select bank7
  1800  00C9  1113               	bcf	19,2	;volatile
  1801  00CA                     i1l1477:	
  1802                           
  1803                           ;main.c: 340: }
  1804                           ;main.c: 343: if(IOCAFbits.IOCAF3){
  1805  00CA  1D93               	btfss	19,3	;volatile
  1806  00CB  28DB               	goto	i1l1487
  1807                           
  1808                           ;main.c: 344: shouldDebounce = 1;
  1809  00CC  3001               	movlw	1
  1810  00CD  0020               	movlb	0	; select bank0
  1811  00CE  00C4               	movwf	ISR@shouldDebounce
  1812  00CF  3000               	movlw	0
  1813  00D0  00C5               	movwf	ISR@shouldDebounce+1
  1814                           
  1815                           ;main.c: 345: sensors[2].debounce.shouldDebounce = 1;
  1816  00D1  0021               	movlb	1	; select bank1
  1817  00D2  1432               	bsf	(_sensors^(0+128)+18),0
  1818                           
  1819                           ;main.c: 346: sensors[2].debounce.previousState = PORTAbits.RA3;
  1820  00D3  10B2               	bcf	(_sensors^(0+128)+18),1
  1821  00D4  0020               	movlb	0	; select bank0
  1822  00D5  1D8C               	btfss	12,3	;volatile
  1823  00D6  28D9               	goto	i1l1485
  1824  00D7  0021               	movlb	1	; select bank1
  1825  00D8  14B2               	bsf	(_sensors^(0+128)+18),1
  1826  00D9                     i1l1485:	
  1827                           
  1828                           ;main.c: 347: IOCAFbits.IOCAF3 = 0;
  1829  00D9  0027               	movlb	7	; select bank7
  1830  00DA  1193               	bcf	19,3	;volatile
  1831  00DB                     i1l1487:	
  1832                           
  1833                           ;main.c: 348: }
  1834                           ;main.c: 351: if(IOCAFbits.IOCAF4){
  1835  00DB  1E13               	btfss	19,4	;volatile
  1836  00DC  28EC               	goto	i1l1497
  1837                           
  1838                           ;main.c: 352: shouldDebounce = 1;
  1839  00DD  3001               	movlw	1
  1840  00DE  0020               	movlb	0	; select bank0
  1841  00DF  00C4               	movwf	ISR@shouldDebounce
  1842  00E0  3000               	movlw	0
  1843  00E1  00C5               	movwf	ISR@shouldDebounce+1
  1844                           
  1845                           ;main.c: 353: sensors[3].debounce.shouldDebounce = 1;
  1846  00E2  0021               	movlb	1	; select bank1
  1847  00E3  1439               	bsf	(_sensors^(0+128)+25),0
  1848                           
  1849                           ;main.c: 354: sensors[3].debounce.previousState = PORTAbits.RA4;
  1850  00E4  10B9               	bcf	(_sensors^(0+128)+25),1
  1851  00E5  0020               	movlb	0	; select bank0
  1852  00E6  1E0C               	btfss	12,4	;volatile
  1853  00E7  28EA               	goto	i1l1495
  1854  00E8  0021               	movlb	1	; select bank1
  1855  00E9  14B9               	bsf	(_sensors^(0+128)+25),1
  1856  00EA                     i1l1495:	
  1857                           
  1858                           ;main.c: 355: IOCAFbits.IOCAF4 = 0;
  1859  00EA  0027               	movlb	7	; select bank7
  1860  00EB  1213               	bcf	19,4	;volatile
  1861  00EC                     i1l1497:	
  1862                           
  1863                           ;main.c: 356: }
  1864                           ;main.c: 359: if(IOCAFbits.IOCAF5){
  1865  00EC  1E93               	btfss	19,5	;volatile
  1866  00ED  28FD               	goto	i1l1507
  1867                           
  1868                           ;main.c: 360: shouldDebounce = 1;
  1869  00EE  3001               	movlw	1
  1870  00EF  0020               	movlb	0	; select bank0
  1871  00F0  00C4               	movwf	ISR@shouldDebounce
  1872  00F1  3000               	movlw	0
  1873  00F2  00C5               	movwf	ISR@shouldDebounce+1
  1874                           
  1875                           ;main.c: 361: sensors[4].debounce.shouldDebounce = 1;
  1876  00F3  0021               	movlb	1	; select bank1
  1877  00F4  1440               	bsf	(_sensors^(0+128)+32),0
  1878                           
  1879                           ;main.c: 362: sensors[4].debounce.previousState = PORTAbits.RA5;
  1880  00F5  10C0               	bcf	(_sensors^(0+128)+32),1
  1881  00F6  0020               	movlb	0	; select bank0
  1882  00F7  1E8C               	btfss	12,5	;volatile
  1883  00F8  28FB               	goto	i1l1505
  1884  00F9  0021               	movlb	1	; select bank1
  1885  00FA  14C0               	bsf	(_sensors^(0+128)+32),1
  1886  00FB                     i1l1505:	
  1887                           
  1888                           ;main.c: 363: IOCAFbits.IOCAF5 = 0;
  1889  00FB  0027               	movlb	7	; select bank7
  1890  00FC  1293               	bcf	19,5	;volatile
  1891  00FD                     i1l1507:	
  1892                           
  1893                           ;main.c: 364: }
  1894                           ;main.c: 366: if(shouldDebounce){
  1895  00FD  0020               	movlb	0	; select bank0
  1896  00FE  0844               	movf	ISR@shouldDebounce,w
  1897  00FF  0445               	iorwf	ISR@shouldDebounce+1,w
  1898                           
  1899                           ;main.c: 367: T6CONbits.TMR6ON = 1;
  1900  0100  0028               	movlb	8	; select bank8
  1901  0101  1D03               	btfss	3,2
  1902  0102  151E               	bsf	30,2	;volatile
  1903  0103  0020               	movlb	0	; select bank0
  1904  0104  0833               	movf	??_ISR+4,w
  1905  0105  00FF               	movwf	127
  1906  0106  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  1907  0107  0009               	retfie
  1908  0108                     __end_of_ISR:	
  1909                           
  1910                           	psect	text8
  1911  03E5                     __ptext8:	
  1912 ;; *************** function i1___bmul *****************
  1913 ;; Defined at:
  1914 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\Umul8.c"
  1915 ;; Parameters:    Size  Location     Type
  1916 ;;  multiplier      1    wreg     unsigned char 
  1917 ;;  multiplicand    1    0[COMMON] unsigned char 
  1918 ;; Auto vars:     Size  Location     Type
  1919 ;;  multiplier      1    2[COMMON] unsigned char 
  1920 ;;  __bmul          1    3[COMMON] unsigned char 
  1921 ;; Return value:  Size  Location     Type
  1922 ;;                  1    wreg      unsigned char 
  1923 ;; Registers used:
  1924 ;;		wreg, status,2, status,0
  1925 ;; Tracked objects:
  1926 ;;		On entry : 0/0
  1927 ;;		On exit  : 0/0
  1928 ;;		Unchanged: 0/0
  1929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1930 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1931 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1932 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1933 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1934 ;;Total ram usage:        4 bytes
  1935 ;; Hardware stack levels used:    1
  1936 ;; This function calls:
  1937 ;;		Nothing
  1938 ;; This function is called by:
  1939 ;;		_ISR
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942                           
  1943                           
  1944                           ;psect for function i1___bmul
  1945  03E5                     i1___bmul:	
  1946                           
  1947                           ;incstack = 0
  1948                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
  1949                           ;i1___bmul@multiplier stored from wreg
  1950  03E5  00F2               	movwf	i1___bmul@multiplier
  1951  03E6  01F3               	clrf	i1___bmul@product
  1952  03E7                     i1l1383:	
  1953  03E7  1C72               	btfss	i1___bmul@multiplier,0
  1954  03E8  2BED               	goto	i1l1387
  1955  03E9  0870               	movf	i1___bmul@multiplicand,w
  1956  03EA  00F1               	movwf	??i1___bmul
  1957  03EB  0871               	movf	??i1___bmul,w
  1958  03EC  07F3               	addwf	i1___bmul@product,f
  1959  03ED                     i1l1387:	
  1960  03ED  1003               	clrc
  1961  03EE  0DF0               	rlf	i1___bmul@multiplicand,f
  1962  03EF  1003               	clrc
  1963  03F0  0CF2               	rrf	i1___bmul@multiplier,f
  1964  03F1  0872               	movf	i1___bmul@multiplier,w
  1965  03F2  1D03               	btfss	3,2
  1966  03F3  2BE7               	goto	i1l1383
  1967  03F4  0873               	movf	i1___bmul@product,w
  1968  03F5  0008               	return
  1969  03F6                     __end_ofi1___bmul:	
  1970                           
  1971                           	psect	text9
  1972  040E                     __ptext9:	
  1973 ;; *************** function _default_handler *****************
  1974 ;; Defined at:
  1975 ;;		line 83 in file "main.c"
  1976 ;; Parameters:    Size  Location     Type
  1977 ;;		None
  1978 ;; Auto vars:     Size  Location     Type
  1979 ;;		None
  1980 ;; Return value:  Size  Location     Type
  1981 ;;                  1    wreg      void 
  1982 ;; Registers used:
  1983 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1984 ;; Tracked objects:
  1985 ;;		On entry : 0/0
  1986 ;;		On exit  : 0/0
  1987 ;;		Unchanged: 0/0
  1988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1993 ;;Total ram usage:        0 bytes
  1994 ;; Hardware stack levels used:    1
  1995 ;; Hardware stack levels required when called:    2
  1996 ;; This function calls:
  1997 ;;		i1_UART_Write_Text
  1998 ;; This function is called by:
  1999 ;;		_initializeSensors
  2000 ;;		_ISR
  2001 ;; This function uses a non-reentrant model
  2002 ;;
  2003                           
  2004                           
  2005                           ;psect for function _default_handler
  2006  040E                     _default_handler:	
  2007                           
  2008                           ;main.c: 84: UART_Write_Text("xy");
  2009                           
  2010                           ;incstack = 0
  2011                           ; Regs used in _default_handler: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2012  040E  30CE               	movlw	low (STR_2| (0+32768))
  2013  040F  00F1               	movwf	i1UART_Write_Text@text
  2014  0410  3083               	movlw	high (STR_2| (0+32768))
  2015  0411  00F2               	movwf	i1UART_Write_Text@text+1
  2016  0412  3183  23A6         	fcall	i1_UART_Write_Text
  2017  0414  0008               	return
  2018  0415                     __end_of_default_handler:	
  2019                           
  2020                           	psect	text10
  2021  0422                     __ptext10:	
  2022 ;; *************** function _switch_handler *****************
  2023 ;; Defined at:
  2024 ;;		line 87 in file "main.c"
  2025 ;; Parameters:    Size  Location     Type
  2026 ;;		None
  2027 ;; Auto vars:     Size  Location     Type
  2028 ;;		None
  2029 ;; Return value:  Size  Location     Type
  2030 ;;                  1    wreg      void 
  2031 ;; Registers used:
  2032 ;;		None
  2033 ;; Tracked objects:
  2034 ;;		On entry : 0/0
  2035 ;;		On exit  : 0/0
  2036 ;;		Unchanged: 0/0
  2037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2042 ;;Total ram usage:        0 bytes
  2043 ;; Hardware stack levels used:    1
  2044 ;; This function calls:
  2045 ;;		Nothing
  2046 ;; This function is called by:
  2047 ;;		_initializeSensors
  2048 ;;		_ISR
  2049 ;; This function uses a non-reentrant model
  2050 ;;
  2051                           
  2052                           
  2053                           ;psect for function _switch_handler
  2054  0422                     _switch_handler:	
  2055                           
  2056                           ;main.c: 88: shouldAutoBaud = 1;
  2057                           
  2058                           ;incstack = 0
  2059                           ; Regs used in _switch_handler: []
  2060  0422  0021               	movlb	1	; select bank1
  2061  0423  01C3               	clrf	_shouldAutoBaud^(0+128)
  2062  0424  0AC3               	incf	_shouldAutoBaud^(0+128),f
  2063  0425  0008               	return
  2064  0426                     __end_of_switch_handler:	
  2065                           
  2066                           	psect	text11
  2067  0115                     __ptext11:	
  2068 ;; *************** function _sprintf *****************
  2069 ;; Defined at:
  2070 ;;		line 492 in file "D:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\doprnt.c"
  2071 ;; Parameters:    Size  Location     Type
  2072 ;;  sp              1    wreg     PTR unsigned char 
  2073 ;;		 -> ISR@str(15), 
  2074 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  2075 ;;		 -> STR_3(4), 
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;  sp              1   13[BANK0 ] PTR unsigned char 
  2078 ;;		 -> ISR@str(15), 
  2079 ;;  tmpval          4    0        struct .
  2080 ;;  val             2   11[BANK0 ] unsigned int 
  2081 ;;  cp              2    0        PTR const unsigned char 
  2082 ;;  len             2    0        unsigned int 
  2083 ;;  c               1   14[BANK0 ] char 
  2084 ;;  prec            1   10[BANK0 ] char 
  2085 ;;  flag            1    9[BANK0 ] unsigned char 
  2086 ;;  ap              1    8[BANK0 ] PTR void [1]
  2087 ;;		 -> ?_sprintf(2), 
  2088 ;; Return value:  Size  Location     Type
  2089 ;;                  2    0[BANK0 ] int 
  2090 ;; Registers used:
  2091 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2092 ;; Tracked objects:
  2093 ;;		On entry : 0/0
  2094 ;;		On exit  : 0/0
  2095 ;;		Unchanged: 0/0
  2096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2097 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2098 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2099 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2100 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2101 ;;Total ram usage:       15 bytes
  2102 ;; Hardware stack levels used:    1
  2103 ;; Hardware stack levels required when called:    1
  2104 ;; This function calls:
  2105 ;;		___lwdiv
  2106 ;;		___lwmod
  2107 ;; This function is called by:
  2108 ;;		_ISR
  2109 ;; This function uses a non-reentrant model
  2110 ;;
  2111                           
  2112                           
  2113                           ;psect for function _sprintf
  2114  0115                     _sprintf:	
  2115                           
  2116                           ;incstack = 0
  2117                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2118                           ;sprintf@sp stored from wreg
  2119  0115  0020               	movlb	0	; select bank0
  2120  0116  00AD               	movwf	sprintf@sp
  2121                           
  2122                           ;doprnt.c: 494: va_list ap;
  2123                           ;doprnt.c: 499: signed char c;
  2124                           ;doprnt.c: 506: signed char prec;
  2125                           ;doprnt.c: 508: unsigned char flag;
  2126                           ;doprnt.c: 523: union {
  2127                           ;doprnt.c: 524: unsigned long vd;
  2128                           ;doprnt.c: 525: double integ;
  2129                           ;doprnt.c: 526: } tmpval;
  2130                           ;doprnt.c: 528: unsigned int val;
  2131                           ;doprnt.c: 529: unsigned len;
  2132                           ;doprnt.c: 530: const char * cp;
  2133                           ;doprnt.c: 533: *ap = __va_start();
  2134  0117  3022               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  2135  0118  00A4               	movwf	??_sprintf
  2136  0119  0824               	movf	??_sprintf,w
  2137  011A  00A8               	movwf	sprintf@ap
  2138  011B                     i1l1375:	
  2139                           ;doprnt.c: 536: while(c = *f++) {
  2140                           
  2141  011B  0821               	movf	sprintf@f+1,w
  2142  011C  00A5               	movwf	??_sprintf+1
  2143  011D  0820               	movf	sprintf@f,w
  2144  011E  00A4               	movwf	??_sprintf
  2145  011F  0AA0               	incf	sprintf@f,f
  2146  0120  1903               	skipnz
  2147  0121  0AA1               	incf	sprintf@f+1,f
  2148  0122  0824               	movf	??_sprintf,w
  2149  0123  0084               	movwf	4
  2150  0124  0825               	movf	??_sprintf+1,w
  2151  0125  0085               	movwf	5
  2152  0126  0800               	movf	0,w	;code access
  2153  0127  00A6               	movwf	??_sprintf+2
  2154  0128  0826               	movf	??_sprintf+2,w
  2155  0129  00AE               	movwf	sprintf@c
  2156  012A  082E               	movf	sprintf@c,w
  2157  012B  1903               	btfsc	3,2
  2158  012C  29DD               	goto	i1l1377
  2159                           
  2160                           ;doprnt.c: 538: if(c != '%')
  2161  012D  3025               	movlw	37
  2162  012E  062E               	xorwf	sprintf@c,w
  2163  012F  1903               	btfsc	3,2
  2164  0130  293D               	goto	i1l1331
  2165                           
  2166                           ;doprnt.c: 540: {
  2167                           ;doprnt.c: 541: ((*sp++ = (c)));
  2168  0131  082E               	movf	sprintf@c,w
  2169  0132  00A4               	movwf	??_sprintf
  2170  0133  082D               	movf	sprintf@sp,w
  2171  0134  0086               	movwf	6
  2172  0135  0187               	clrf	7
  2173  0136  0824               	movf	??_sprintf,w
  2174  0137  0081               	movwf	1
  2175  0138  3001               	movlw	1
  2176  0139  00A4               	movwf	??_sprintf
  2177  013A  0824               	movf	??_sprintf,w
  2178  013B  07AD               	addwf	sprintf@sp,f
  2179                           
  2180                           ;doprnt.c: 542: continue;
  2181  013C  291B               	goto	i1l1375
  2182  013D                     i1l1331:	
  2183                           
  2184                           ;doprnt.c: 543: }
  2185                           ;doprnt.c: 548: flag = 0;
  2186  013D  01A9               	clrf	sprintf@flag
  2187                           
  2188                           ;doprnt.c: 822: }
  2189                           
  2190                           ;doprnt.c: 813: continue;
  2191                           
  2192                           ;doprnt.c: 802: default:
  2193                           
  2194                           ;doprnt.c: 698: case 'i':
  2195                           ;doprnt.c: 699: break;
  2196                           
  2197                           ;doprnt.c: 697: case 'd':
  2198                           
  2199                           ;doprnt.c: 638: goto alldone;
  2200                           
  2201                           ;doprnt.c: 637: case 0:
  2202                           
  2203                           ;doprnt.c: 635: switch(c = *f++) {
  2204  013E  0821               	movf	sprintf@f+1,w
  2205  013F  00A5               	movwf	??_sprintf+1
  2206  0140  0820               	movf	sprintf@f,w
  2207  0141  00A4               	movwf	??_sprintf
  2208  0142  0AA0               	incf	sprintf@f,f
  2209  0143  1903               	skipnz
  2210  0144  0AA1               	incf	sprintf@f+1,f
  2211  0145  0824               	movf	??_sprintf,w
  2212  0146  0084               	movwf	4
  2213  0147  0825               	movf	??_sprintf+1,w
  2214  0148  0085               	movwf	5
  2215  0149  0800               	movf	0,w	;code access
  2216  014A  00AE               	movwf	sprintf@c
  2217                           
  2218                           ; Switch size 1, requested type "space"
  2219                           ; Number of cases is 3, Range of values is 0 to 105
  2220                           ; switch strategies available:
  2221                           ; Name         Instructions Cycles
  2222                           ; simple_byte           10     6 (average)
  2223                           ; direct_byte          218     6 (fixed)
  2224                           ; jumptable            260     6 (fixed)
  2225                           ;	Chosen strategy is simple_byte
  2226  014B  3A00               	xorlw	0	; case 0
  2227  014C  1903               	skipnz
  2228  014D  29DD               	goto	i1l1377
  2229  014E  3A64               	xorlw	100	; case 100
  2230  014F  1903               	skipnz
  2231  0150  2955               	goto	i1l1337
  2232  0151  3A0D               	xorlw	13	; case 105
  2233  0152  1903               	skipnz
  2234  0153  2955               	goto	i1l1337
  2235  0154  291B               	goto	i1l1375
  2236  0155                     i1l1337:	
  2237                           
  2238                           ;doprnt.c: 1253: {
  2239                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2240  0155  0828               	movf	sprintf@ap,w
  2241  0156  0086               	movwf	6
  2242  0157  0187               	clrf	7
  2243  0158  3F40               	moviw [0]fsr1
  2244  0159  00AB               	movwf	sprintf@val
  2245  015A  3F41               	moviw [1]fsr1
  2246  015B  00AC               	movwf	sprintf@val+1
  2247  015C  3002               	movlw	2
  2248  015D  00A4               	movwf	??_sprintf
  2249  015E  0824               	movf	??_sprintf,w
  2250  015F  07A8               	addwf	sprintf@ap,f
  2251                           
  2252                           ;doprnt.c: 1261: if((int)val < 0) {
  2253  0160  1FAC               	btfss	sprintf@val+1,7
  2254  0161  296B               	goto	i1l1347
  2255                           
  2256                           ;doprnt.c: 1262: flag |= 0x03;
  2257  0162  3003               	movlw	3
  2258  0163  00A4               	movwf	??_sprintf
  2259  0164  0824               	movf	??_sprintf,w
  2260  0165  04A9               	iorwf	sprintf@flag,f
  2261                           
  2262                           ;doprnt.c: 1263: val = -val;
  2263  0166  09AB               	comf	sprintf@val,f
  2264  0167  09AC               	comf	sprintf@val+1,f
  2265  0168  0AAB               	incf	sprintf@val,f
  2266  0169  1903               	skipnz
  2267  016A  0AAC               	incf	sprintf@val+1,f
  2268  016B                     i1l1347:	
  2269                           
  2270                           ;doprnt.c: 1264: }
  2271                           ;doprnt.c: 1266: }
  2272                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2273  016B  01AE               	clrf	sprintf@c
  2274  016C  0AAE               	incf	sprintf@c,f
  2275  016D  3005               	movlw	5
  2276  016E  062E               	xorwf	sprintf@c,w
  2277  016F  1903               	btfsc	3,2
  2278  0170  2990               	goto	i1l1359
  2279  0171                     i1l1353:	
  2280                           
  2281                           ;doprnt.c: 1306: if(val < dpowers[c])
  2282  0171  082E               	movf	sprintf@c,w
  2283  0172  00A4               	movwf	??_sprintf
  2284  0173  01A5               	clrf	??_sprintf+1
  2285  0174  35A4               	lslf	??_sprintf,f
  2286  0175  0DA5               	rlf	??_sprintf+1,f
  2287  0176  30C0               	movlw	low (_dpowers| (0+32768))
  2288  0177  0724               	addwf	??_sprintf,w
  2289  0178  0084               	movwf	4
  2290  0179  3083               	movlw	high (_dpowers| (0+32768))
  2291  017A  3D25               	addwfc	??_sprintf+1,w
  2292  017B  0085               	movwf	5
  2293  017C  3F00               	moviw [0]fsr0
  2294  017D  00A6               	movwf	??_sprintf+2
  2295  017E  3F01               	moviw [1]fsr0
  2296  017F  00A7               	movwf	??_sprintf+3
  2297  0180  0827               	movf	??_sprintf+3,w
  2298  0181  022C               	subwf	sprintf@val+1,w
  2299  0182  1D03               	skipz
  2300  0183  2986               	goto	u104_25
  2301  0184  0826               	movf	??_sprintf+2,w
  2302  0185  022B               	subwf	sprintf@val,w
  2303  0186                     u104_25:	
  2304  0186  1C03               	btfss	3,0
  2305  0187  2990               	goto	i1l1359
  2306                           
  2307                           ;doprnt.c: 1307: break;
  2308  0188  3001               	movlw	1
  2309  0189  00A4               	movwf	??_sprintf
  2310  018A  0824               	movf	??_sprintf,w
  2311  018B  07AE               	addwf	sprintf@c,f
  2312  018C  3005               	movlw	5
  2313  018D  062E               	xorwf	sprintf@c,w
  2314  018E  1D03               	btfss	3,2
  2315  018F  2971               	goto	i1l1353
  2316  0190                     i1l1359:	
  2317                           
  2318                           ;doprnt.c: 1422: {
  2319                           ;doprnt.c: 1438: if(flag & 0x03)
  2320  0190  0829               	movf	sprintf@flag,w
  2321  0191  3903               	andlw	3
  2322  0192  1903               	btfsc	3,2
  2323  0193  299F               	goto	i1l1365
  2324                           
  2325                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2326  0194  302D               	movlw	45
  2327  0195  00A4               	movwf	??_sprintf
  2328  0196  082D               	movf	sprintf@sp,w
  2329  0197  0086               	movwf	6
  2330  0198  0187               	clrf	7
  2331  0199  0824               	movf	??_sprintf,w
  2332  019A  0081               	movwf	1
  2333  019B  3001               	movlw	1
  2334  019C  00A4               	movwf	??_sprintf
  2335  019D  0824               	movf	??_sprintf,w
  2336  019E  07AD               	addwf	sprintf@sp,f
  2337  019F                     i1l1365:	
  2338                           
  2339                           ;doprnt.c: 1469: }
  2340                           ;doprnt.c: 1472: prec = c;
  2341  019F  082E               	movf	sprintf@c,w
  2342  01A0  00A4               	movwf	??_sprintf
  2343  01A1  0824               	movf	??_sprintf,w
  2344  01A2  00AA               	movwf	sprintf@prec
  2345  01A3                     i1l1373:	
  2346                           ;doprnt.c: 1474: while(prec--) {
  2347                           
  2348  01A3  30FF               	movlw	255
  2349  01A4  00A4               	movwf	??_sprintf
  2350  01A5  0824               	movf	??_sprintf,w
  2351  01A6  07AA               	addwf	sprintf@prec,f
  2352  01A7  0A2A               	incf	sprintf@prec,w
  2353  01A8  1903               	btfsc	3,2
  2354  01A9  291B               	goto	i1l1375
  2355                           
  2356                           ;doprnt.c: 1478: {
  2357                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2358  01AA  300A               	movlw	10
  2359  01AB  00F8               	movwf	___lwmod@divisor
  2360  01AC  3000               	movlw	0
  2361  01AD  00F9               	movwf	___lwmod@divisor+1
  2362  01AE  082A               	movf	sprintf@prec,w
  2363  01AF  00A4               	movwf	??_sprintf
  2364  01B0  01A5               	clrf	??_sprintf+1
  2365  01B1  35A4               	lslf	??_sprintf,f
  2366  01B2  0DA5               	rlf	??_sprintf+1,f
  2367  01B3  30C0               	movlw	low (_dpowers| (0+32768))
  2368  01B4  0724               	addwf	??_sprintf,w
  2369  01B5  0084               	movwf	4
  2370  01B6  3083               	movlw	high (_dpowers| (0+32768))
  2371  01B7  3D25               	addwfc	??_sprintf+1,w
  2372  01B8  0085               	movwf	5
  2373  01B9  3F00               	moviw [0]fsr0
  2374  01BA  00F0               	movwf	___lwdiv@divisor
  2375  01BB  3F01               	moviw [1]fsr0
  2376  01BC  00F1               	movwf	___lwdiv@divisor+1
  2377  01BD  082C               	movf	sprintf@val+1,w
  2378  01BE  00F3               	movwf	___lwdiv@dividend+1
  2379  01BF  082B               	movf	sprintf@val,w
  2380  01C0  00F2               	movwf	___lwdiv@dividend
  2381  01C1  3183  2307  3181   	fcall	___lwdiv
  2382  01C4  0871               	movf	?___lwdiv+1,w
  2383  01C5  00FB               	movwf	___lwmod@dividend+1
  2384  01C6  0870               	movf	?___lwdiv,w
  2385  01C7  00FA               	movwf	___lwmod@dividend
  2386  01C8  3183  233B  3181   	fcall	___lwmod
  2387  01CB  0878               	movf	?___lwmod,w
  2388  01CC  3E30               	addlw	48
  2389  01CD  0020               	movlb	0	; select bank0
  2390  01CE  00A6               	movwf	??_sprintf+2
  2391  01CF  0826               	movf	??_sprintf+2,w
  2392  01D0  00AE               	movwf	sprintf@c
  2393                           
  2394                           ;doprnt.c: 1523: }
  2395                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2396  01D1  082E               	movf	sprintf@c,w
  2397  01D2  00A4               	movwf	??_sprintf
  2398  01D3  082D               	movf	sprintf@sp,w
  2399  01D4  0086               	movwf	6
  2400  01D5  0187               	clrf	7
  2401  01D6  0824               	movf	??_sprintf,w
  2402  01D7  0081               	movwf	1
  2403  01D8  3001               	movlw	1
  2404  01D9  00A4               	movwf	??_sprintf
  2405  01DA  0824               	movf	??_sprintf,w
  2406  01DB  07AD               	addwf	sprintf@sp,f
  2407  01DC  29A3               	goto	i1l1373
  2408  01DD                     i1l1377:	
  2409                           ;doprnt.c: 1525: }
  2410                           ;doprnt.c: 1533: }
  2411                           ;doprnt.c: 1535: alldone:
  2412                           
  2413                           
  2414                           ;doprnt.c: 1538: *sp = 0;
  2415  01DD  082D               	movf	sprintf@sp,w
  2416  01DE  0086               	movwf	6
  2417  01DF  0187               	clrf	7
  2418  01E0  0181               	clrf	1
  2419  01E1  0008               	return
  2420  01E2                     __end_of_sprintf:	
  2421                           ;doprnt.c: 1540: return 0;
  2422                           ;	Return value of _sprintf is never used
  2423                           
  2424                           
  2425                           	psect	text12
  2426  033B                     __ptext12:	
  2427 ;; *************** function ___lwmod *****************
  2428 ;; Defined at:
  2429 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwmod.c"
  2430 ;; Parameters:    Size  Location     Type
  2431 ;;  divisor         2    8[COMMON] unsigned int 
  2432 ;;  dividend        2   10[COMMON] unsigned int 
  2433 ;; Auto vars:     Size  Location     Type
  2434 ;;  counter         1   13[COMMON] unsigned char 
  2435 ;; Return value:  Size  Location     Type
  2436 ;;                  2    8[COMMON] unsigned int 
  2437 ;; Registers used:
  2438 ;;		wreg, status,2, status,0
  2439 ;; Tracked objects:
  2440 ;;		On entry : 0/0
  2441 ;;		On exit  : 0/0
  2442 ;;		Unchanged: 0/0
  2443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2444 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2445 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2446 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2447 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2448 ;;Total ram usage:        6 bytes
  2449 ;; Hardware stack levels used:    1
  2450 ;; This function calls:
  2451 ;;		Nothing
  2452 ;; This function is called by:
  2453 ;;		_sprintf
  2454 ;; This function uses a non-reentrant model
  2455 ;;
  2456                           
  2457                           
  2458                           ;psect for function ___lwmod
  2459  033B                     ___lwmod:	
  2460                           
  2461                           ;incstack = 0
  2462                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2463  033B  0878               	movf	___lwmod@divisor,w
  2464  033C  0479               	iorwf	___lwmod@divisor+1,w
  2465  033D  1903               	btfsc	3,2
  2466  033E  2B62               	goto	i1l1163
  2467  033F  01FD               	clrf	___lwmod@counter
  2468  0340  0AFD               	incf	___lwmod@counter,f
  2469  0341                     i1l1153:	
  2470  0341  1BF9               	btfsc	___lwmod@divisor+1,7
  2471  0342  2B4D               	goto	i1l1155
  2472  0343  3001               	movlw	1
  2473  0344                     u81_25:	
  2474  0344  35F8               	lslf	___lwmod@divisor,f
  2475  0345  0DF9               	rlf	___lwmod@divisor+1,f
  2476  0346  0B89               	decfsz	9,f
  2477  0347  2B44               	goto	u81_25
  2478  0348  3001               	movlw	1
  2479  0349  00FC               	movwf	??___lwmod
  2480  034A  087C               	movf	??___lwmod,w
  2481  034B  07FD               	addwf	___lwmod@counter,f
  2482  034C  2B41               	goto	i1l1153
  2483  034D                     i1l1155:	
  2484  034D  0879               	movf	___lwmod@divisor+1,w
  2485  034E  027B               	subwf	___lwmod@dividend+1,w
  2486  034F  1D03               	skipz
  2487  0350  2B53               	goto	u83_25
  2488  0351  0878               	movf	___lwmod@divisor,w
  2489  0352  027A               	subwf	___lwmod@dividend,w
  2490  0353                     u83_25:	
  2491  0353  1C03               	skipc
  2492  0354  2B59               	goto	i1l1159
  2493  0355  0878               	movf	___lwmod@divisor,w
  2494  0356  02FA               	subwf	___lwmod@dividend,f
  2495  0357  0879               	movf	___lwmod@divisor+1,w
  2496  0358  3BFB               	subwfb	___lwmod@dividend+1,f
  2497  0359                     i1l1159:	
  2498  0359  3001               	movlw	1
  2499  035A                     u84_25:	
  2500  035A  36F9               	lsrf	___lwmod@divisor+1,f
  2501  035B  0CF8               	rrf	___lwmod@divisor,f
  2502  035C  0B89               	decfsz	9,f
  2503  035D  2B5A               	goto	u84_25
  2504  035E  3001               	movlw	1
  2505  035F  02FD               	subwf	___lwmod@counter,f
  2506  0360  1D03               	btfss	3,2
  2507  0361  2B4D               	goto	i1l1155
  2508  0362                     i1l1163:	
  2509  0362  087B               	movf	___lwmod@dividend+1,w
  2510  0363  00F9               	movwf	?___lwmod+1
  2511  0364  087A               	movf	___lwmod@dividend,w
  2512  0365  00F8               	movwf	?___lwmod
  2513  0366  0008               	return
  2514  0367                     __end_of___lwmod:	
  2515                           
  2516                           	psect	text13
  2517  0307                     __ptext13:	
  2518 ;; *************** function ___lwdiv *****************
  2519 ;; Defined at:
  2520 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.38\sources\common\lwdiv.c"
  2521 ;; Parameters:    Size  Location     Type
  2522 ;;  divisor         2    0[COMMON] unsigned int 
  2523 ;;  dividend        2    2[COMMON] unsigned int 
  2524 ;; Auto vars:     Size  Location     Type
  2525 ;;  quotient        2    5[COMMON] unsigned int 
  2526 ;;  counter         1    7[COMMON] unsigned char 
  2527 ;; Return value:  Size  Location     Type
  2528 ;;                  2    0[COMMON] unsigned int 
  2529 ;; Registers used:
  2530 ;;		wreg, status,2, status,0
  2531 ;; Tracked objects:
  2532 ;;		On entry : 0/0
  2533 ;;		On exit  : 0/0
  2534 ;;		Unchanged: 0/0
  2535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2536 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2537 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2538 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2539 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2540 ;;Total ram usage:        8 bytes
  2541 ;; Hardware stack levels used:    1
  2542 ;; This function calls:
  2543 ;;		Nothing
  2544 ;; This function is called by:
  2545 ;;		_sprintf
  2546 ;; This function uses a non-reentrant model
  2547 ;;
  2548                           
  2549                           
  2550                           ;psect for function ___lwdiv
  2551  0307                     ___lwdiv:	
  2552                           
  2553                           ;incstack = 0
  2554                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2555  0307  01F5               	clrf	___lwdiv@quotient
  2556  0308  01F6               	clrf	___lwdiv@quotient+1
  2557  0309  0870               	movf	___lwdiv@divisor,w
  2558  030A  0471               	iorwf	___lwdiv@divisor+1,w
  2559  030B  1903               	btfsc	3,2
  2560  030C  2B36               	goto	i1l1141
  2561  030D  01F7               	clrf	___lwdiv@counter
  2562  030E  0AF7               	incf	___lwdiv@counter,f
  2563  030F                     i1l1129:	
  2564  030F  1BF1               	btfsc	___lwdiv@divisor+1,7
  2565  0310  2B1B               	goto	i1l1131
  2566  0311  3001               	movlw	1
  2567  0312                     u74_25:	
  2568  0312  35F0               	lslf	___lwdiv@divisor,f
  2569  0313  0DF1               	rlf	___lwdiv@divisor+1,f
  2570  0314  0B89               	decfsz	9,f
  2571  0315  2B12               	goto	u74_25
  2572  0316  3001               	movlw	1
  2573  0317  00F4               	movwf	??___lwdiv
  2574  0318  0874               	movf	??___lwdiv,w
  2575  0319  07F7               	addwf	___lwdiv@counter,f
  2576  031A  2B0F               	goto	i1l1129
  2577  031B                     i1l1131:	
  2578  031B  3001               	movlw	1
  2579  031C                     u76_25:	
  2580  031C  35F5               	lslf	___lwdiv@quotient,f
  2581  031D  0DF6               	rlf	___lwdiv@quotient+1,f
  2582  031E  0B89               	decfsz	9,f
  2583  031F  2B1C               	goto	u76_25
  2584  0320  0871               	movf	___lwdiv@divisor+1,w
  2585  0321  0273               	subwf	___lwdiv@dividend+1,w
  2586  0322  1D03               	skipz
  2587  0323  2B26               	goto	u77_25
  2588  0324  0870               	movf	___lwdiv@divisor,w
  2589  0325  0272               	subwf	___lwdiv@dividend,w
  2590  0326                     u77_25:	
  2591  0326  1C03               	skipc
  2592  0327  2B2D               	goto	i1l1137
  2593  0328  0870               	movf	___lwdiv@divisor,w
  2594  0329  02F2               	subwf	___lwdiv@dividend,f
  2595  032A  0871               	movf	___lwdiv@divisor+1,w
  2596  032B  3BF3               	subwfb	___lwdiv@dividend+1,f
  2597  032C  1475               	bsf	___lwdiv@quotient,0
  2598  032D                     i1l1137:	
  2599  032D  3001               	movlw	1
  2600  032E                     u78_25:	
  2601  032E  36F1               	lsrf	___lwdiv@divisor+1,f
  2602  032F  0CF0               	rrf	___lwdiv@divisor,f
  2603  0330  0B89               	decfsz	9,f
  2604  0331  2B2E               	goto	u78_25
  2605  0332  3001               	movlw	1
  2606  0333  02F7               	subwf	___lwdiv@counter,f
  2607  0334  1D03               	btfss	3,2
  2608  0335  2B1B               	goto	i1l1131
  2609  0336                     i1l1141:	
  2610  0336  0876               	movf	___lwdiv@quotient+1,w
  2611  0337  00F1               	movwf	?___lwdiv+1
  2612  0338  0875               	movf	___lwdiv@quotient,w
  2613  0339  00F0               	movwf	?___lwdiv
  2614  033A  0008               	return
  2615  033B                     __end_of___lwdiv:	
  2616                           
  2617                           	psect	text14
  2618  03F6                     __ptext14:	
  2619 ;; *************** function _get_port_pin *****************
  2620 ;; Defined at:
  2621 ;;		line 79 in file "main.c"
  2622 ;; Parameters:    Size  Location     Type
  2623 ;;  port            2    4[COMMON] PTR unsigned char 
  2624 ;;		 -> PORTA(1), 
  2625 ;;  pin             1    6[COMMON] unsigned char 
  2626 ;; Auto vars:     Size  Location     Type
  2627 ;;		None
  2628 ;; Return value:  Size  Location     Type
  2629 ;;                  1    wreg      unsigned char 
  2630 ;; Registers used:
  2631 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2632 ;; Tracked objects:
  2633 ;;		On entry : 0/0
  2634 ;;		On exit  : 0/0
  2635 ;;		Unchanged: 0/0
  2636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2637 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2639 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2640 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2641 ;;Total ram usage:        4 bytes
  2642 ;; Hardware stack levels used:    1
  2643 ;; This function calls:
  2644 ;;		Nothing
  2645 ;; This function is called by:
  2646 ;;		_ISR
  2647 ;; This function uses a non-reentrant model
  2648 ;;
  2649                           
  2650                           
  2651                           ;psect for function _get_port_pin
  2652  03F6                     _get_port_pin:	
  2653                           
  2654                           ;main.c: 80: return (*port & (1U << pin));
  2655                           
  2656                           ;incstack = 0
  2657                           ; Regs used in _get_port_pin: [wreg+fsr1l+fsr1h+status,2+status,0]
  2658  03F6  0874               	movf	get_port_pin@port,w
  2659  03F7  0086               	movwf	6
  2660  03F8  0875               	movf	get_port_pin@port+1,w
  2661  03F9  0087               	movwf	7
  2662  03FA  3001               	movlw	1
  2663  03FB  00F7               	movwf	??_get_port_pin
  2664  03FC  0A76               	incf	get_port_pin@pin,w
  2665  03FD  2BFF               	goto	u100_24
  2666  03FE                     u100_25:	
  2667  03FE  35F7               	lslf	??_get_port_pin,f
  2668  03FF                     u100_24:	
  2669  03FF  0B89               	decfsz	9,f
  2670  0400  2BFE               	goto	u100_25
  2671  0401  0877               	movf	??_get_port_pin,w
  2672  0402  0501               	andwf	1,w
  2673  0403  0008               	return
  2674  0404                     __end_of_get_port_pin:	
  2675                           
  2676                           	psect	text15
  2677  03A6                     __ptext15:	
  2678 ;; *************** function i1_UART_Write_Text *****************
  2679 ;; Defined at:
  2680 ;;		line 97 in file "main.c"
  2681 ;; Parameters:    Size  Location     Type
  2682 ;;  text            2    1[COMMON] PTR unsigned char 
  2683 ;;		 -> ISR@str(15), STR_2(3), STR_1(2), 
  2684 ;; Auto vars:     Size  Location     Type
  2685 ;;  UART_Write_T    2    4[COMMON] int 
  2686 ;; Return value:  Size  Location     Type
  2687 ;;                  1    wreg      void 
  2688 ;; Registers used:
  2689 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2690 ;; Tracked objects:
  2691 ;;		On entry : 0/0
  2692 ;;		On exit  : 0/0
  2693 ;;		Unchanged: 0/0
  2694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2695 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2696 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2697 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2698 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2699 ;;Total ram usage:        5 bytes
  2700 ;; Hardware stack levels used:    1
  2701 ;; Hardware stack levels required when called:    1
  2702 ;; This function calls:
  2703 ;;		i1_UART_Write
  2704 ;; This function is called by:
  2705 ;;		_default_handler
  2706 ;;		_ISR
  2707 ;; This function uses a non-reentrant model
  2708 ;;
  2709                           
  2710                           
  2711                           ;psect for function i1_UART_Write_Text
  2712  03A6                     i1_UART_Write_Text:	
  2713                           
  2714                           ;main.c: 99: int count;
  2715                           ;main.c: 100: for(count = 0; text[count]!='\0'; count++)
  2716                           
  2717                           ;incstack = 0
  2718                           ; Regs used in i1_UART_Write_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2719  03A6  01F4               	clrf	i1UART_Write_Text@count
  2720  03A7  01F5               	clrf	i1UART_Write_Text@count+1
  2721  03A8                     i1l1173:	
  2722  03A8  0871               	movf	i1UART_Write_Text@text,w
  2723  03A9  0774               	addwf	i1UART_Write_Text@count,w
  2724  03AA  0084               	movwf	4
  2725  03AB  0872               	movf	i1UART_Write_Text@text+1,w
  2726  03AC  3D75               	addwfc	i1UART_Write_Text@count+1,w
  2727  03AD  0085               	movwf	5
  2728  03AE  0012               	moviw fsr0++
  2729  03AF  1903               	btfsc	3,2
  2730  03B0  0008               	return
  2731                           
  2732                           ;main.c: 101: {
  2733                           ;main.c: 102: UART_Write(text[count]);
  2734  03B1  0871               	movf	i1UART_Write_Text@text,w
  2735  03B2  0774               	addwf	i1UART_Write_Text@count,w
  2736  03B3  0084               	movwf	4
  2737  03B4  0872               	movf	i1UART_Write_Text@text+1,w
  2738  03B5  3D75               	addwfc	i1UART_Write_Text@count+1,w
  2739  03B6  0085               	movwf	5
  2740  03B7  0800               	movf	0,w	;code access
  2741  03B8  3184  2415  3183   	fcall	i1_UART_Write
  2742  03BB  3001               	movlw	1
  2743  03BC  07F4               	addwf	i1UART_Write_Text@count,f
  2744  03BD  3000               	movlw	0
  2745  03BE  3DF5               	addwfc	i1UART_Write_Text@count+1,f
  2746  03BF  2BA8               	goto	i1l1173
  2747  03C0                     __end_ofi1_UART_Write_Text:	
  2748                           
  2749                           	psect	text16
  2750  0415                     __ptext16:	
  2751 ;; *************** function i1_UART_Write *****************
  2752 ;; Defined at:
  2753 ;;		line 91 in file "main.c"
  2754 ;; Parameters:    Size  Location     Type
  2755 ;;  data            1    wreg     unsigned char 
  2756 ;; Auto vars:     Size  Location     Type
  2757 ;;  data            1    0[COMMON] unsigned char 
  2758 ;; Return value:  Size  Location     Type
  2759 ;;                  1    wreg      void 
  2760 ;; Registers used:
  2761 ;;		wreg
  2762 ;; Tracked objects:
  2763 ;;		On entry : 0/0
  2764 ;;		On exit  : 0/0
  2765 ;;		Unchanged: 0/0
  2766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2768 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2770 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2771 ;;Total ram usage:        1 bytes
  2772 ;; Hardware stack levels used:    1
  2773 ;; This function calls:
  2774 ;;		Nothing
  2775 ;; This function is called by:
  2776 ;;		i1_UART_Write_Text
  2777 ;; This function uses a non-reentrant model
  2778 ;;
  2779                           
  2780                           
  2781                           ;psect for function i1_UART_Write
  2782  0415                     i1_UART_Write:	
  2783                           
  2784                           ;incstack = 0
  2785                           ; Regs used in i1_UART_Write: [wreg]
  2786                           ;i1UART_Write@data stored from wreg
  2787  0415  00F0               	movwf	i1UART_Write@data
  2788  0416                     i1l105:	
  2789                           ;main.c: 93: while(!TRMT);
  2790                           
  2791  0416  0023               	movlb	3	; select bank3
  2792  0417  1C9E               	btfss	30,1	;volatile
  2793  0418  2C16               	goto	i1l105
  2794                           
  2795                           ;main.c: 94: TXREG = data;
  2796  0419  0870               	movf	i1UART_Write@data,w
  2797  041A  009A               	movwf	26	;volatile
  2798  041B  0008               	return
  2799  041C                     __end_ofi1_UART_Write:	
  2800  007E                     btemp	set	126	;btemp
  2801  007E                     int$flags	set	126
  2802  007E                     wtemp	set	126
  2803  007E                     wtemp0	set	126
  2804  0080                     wtemp1	set	128
  2805  0082                     wtemp2	set	130
  2806  0084                     wtemp3	set	132
  2807  0086                     wtemp4	set	134
  2808  0088                     wtemp5	set	136
  2809  007F                     wtemp6	set	127
  2810  007E                     ttemp	set	126
  2811  007E                     ttemp0	set	126
  2812  0081                     ttemp1	set	129
  2813  0084                     ttemp2	set	132
  2814  0087                     ttemp3	set	135
  2815  007F                     ttemp4	set	127
  2816  007E                     ltemp	set	126
  2817  007E                     ltemp0	set	126
  2818  0082                     ltemp1	set	130
  2819  0086                     ltemp2	set	134
  2820  0080                     ltemp3	set	128


Data Sizes:
    Strings     9
    Constant    10
    Data        0
    BSS         36
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     43      43
    BANK1            80      9      45
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 15
		 -> ISR@str(BANK0[15]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    debounce.handler	PTR FTN()void  size(2) Largest target is 1
		 -> switch_handler(), default_handler(), 

    S20debounce_t$handler	PTR FTN()void  size(2) Largest target is 1
		 -> switch_handler(), default_handler(), 

    sensors.debounce.handler	PTR FTN()void  size(2) Largest target is 1
		 -> switch_handler(), default_handler(), 

    S24sensor_t$port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    sensors.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    UART_Write_Text@text	PTR unsigned char  size(2) Largest target is 15
		 -> ISR@str(BANK0[15]), STR_2(CODE[3]), STR_1(CODE[2]), 

    get_port_pin@port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _get_port_pin->i1___bmul
    _default_handler->i1_UART_Write_Text
    i1_UART_Write_Text->i1_UART_Write

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_sprintf

Critical Paths under _main in BANK1

    _main->_initializeSensors
    _initializeSensors->___bmul
    _UART_Write_Text->_UART_Write

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     708
                    _UART_Write_Text
                           _autoBaud
                      _initializePIC
                  _initializeSensors
 ---------------------------------------------------------------------------------
 (1) _initializeSensors                                    5     5      0     395
                                              4 BANK1      5     5      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     217
                                              0 BANK1      4     3      1
 ---------------------------------------------------------------------------------
 (1) _initializePIC                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _autoBaud                                             6     6      0      94
                                              0 BANK1      6     6      0
 ---------------------------------------------------------------------------------
 (1) _UART_Write_Text                                      5     3      2     219
                                              1 BANK1      5     3      2
                         _UART_Write
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           1     1      0      22
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                 28    28      0    1959
                                             15 BANK0     28    28      0
                    _default_handler *
                       _get_port_pin
                            _sprintf
                     _switch_handler *
                  i1_UART_Write_Text
                           i1___bmul
 ---------------------------------------------------------------------------------
 (4) i1___bmul                                             4     3      1     125
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _switch_handler                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             23    19      4    1090
                                              0 BANK0     15    11      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     265
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     268
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (4) _get_port_pin                                         4     1      3     150
                                              4 COMMON     4     1      3
                           i1___bmul (ARG)
 ---------------------------------------------------------------------------------
 (4) _default_handler                                      0     0      0     164
                  i1_UART_Write_Text
 ---------------------------------------------------------------------------------
 (4) i1_UART_Write_Text                                    5     3      2     164
                                              1 COMMON     5     3      2
                       i1_UART_Write
 ---------------------------------------------------------------------------------
 (5) i1_UART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Write_Text
     _UART_Write
   _autoBaud
   _initializePIC
   _initializeSensors
     ___bmul

 _ISR (ROOT)
   _default_handler *
     i1_UART_Write_Text
       i1_UART_Write
   _get_port_pin *
     i1___bmul (ARG)
   _sprintf *
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _switch_handler *
   i1_UART_Write_Text *
     i1_UART_Write
   i1___bmul *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2B      2B       5       53.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      9      2D       7       56.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      66      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      66      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.38 build -256452561 
Symbol Table                                                                                   Tue Dec 27 21:28:06 2016

            ___bmul@product 00C6                 __CFG_CP$OFF 0000                          l89 0385  
             ?_get_port_pin 0074                 __CFG_LVP$ON 0000                         l105 0406  
                       l130 01E9                         l131 01ED                         l140 022F  
                       l132 01F2                         l127 01E3                         l136 021C  
                       l128 01F0                         l129 01E6                __CFG_CPD$OFF 0000  
                       _PR6 041D                         _ISR 0004                         u945 022D  
                       u875 025D                         u885 02B5                         u975 0245  
              __CFG_BORV$LO 0000                         wreg 0009                __CFG_IESO$ON 0000  
                      ?_ISR 0070                        ISR@i 0049                        ISR@x 0043  
                      l1111 03DC                        l1107 03D6                        l1301 024B  
                      l1313 038D                        l1261 025F                        l1281 0204  
                      l1273 0207                        l1409 0380                        l1531 020D  
                      l1267 02B7                        l1289 0221                        l1299 0247  
                      l1399 036D                        _ADIF 008E                        STR_1 03D1  
                      STR_2 03CE                        STR_3 03CA                        _LATC 010E  
                      _TRMT 0CF1                __CFG_WRT$OFF 0000               __CFG_FCMEN$ON 0000  
                      _main 0367                        fsr0h 0005                        fsr1h 0007  
                      fsr0l 0004                        indf0 0000                        indf1 0001  
                      fsr1l 0006                        btemp 007E               __CFG_BOREN$ON 0000  
                      ltemp 007E                        start 0108                        ttemp 007E  
                      wtemp 007E           ___bmul@multiplier 00C7               __CFG_MCLRE$ON 0000  
   __end_of_UART_Write_Text 03A6                       ??_ISR 002F              ??_get_port_pin 0077  
                     ?_main 0070                       _ADRES 009B                       _BRG16 0CFB  
             __CFG_WDTE$OFF 0000                       _T2CON 001C                       _T6CON 041E  
           __end_of___lwdiv 033B                       i1l105 0416                       i1l150 0079  
                     i1l154 00A7                       i1l148 007B             __end_of___lwmod 0367  
                     _RCREG 0199                       _SPBRG 019B                       _PORTA 000C  
                     u81_25 0344                       u74_25 0312                       u83_25 0353  
                     u76_25 031C                       u84_25 035A                       u77_25 0326  
                     u78_25 032E                       _TXREG 019A             autoBaud@discard 00C5  
               ?_UART_Write 0070          initializeSensors@i 00CB             __end_of_dpowers 03CA  
          __end_ofi1___bmul 03F6                       pclath 000A                       ltemp0 007E  
                     ltemp1 0082                       ltemp2 0086                       ltemp3 0080  
                     ttemp0 007E                       ttemp1 0081                       ttemp2 0084  
                     ttemp3 0087                       ttemp4 007F                       status 0003  
                     wtemp0 007E                       wtemp1 0080                       wtemp2 0082  
                     wtemp3 0084                       wtemp4 0086                       wtemp5 0088  
                     wtemp6 007F             __end_of_sprintf 01E2             __initialization 010A  
              __end_of_main 038A                      ??_main 00CD              __CFG_PLLEN$OFF 0000  
                    ISR@str 0034                      _ADCON0 009D                      _ADCON1 009E  
                    u100_24 03FF                      u100_25 03FE                      i1l1131 031B  
                    i1l1141 0336                      i1l1137 032D                      i1l1129 030F  
                    i1l1153 0341                      i1l1155 034D                      i1l1163 0362  
                    i1l1331 013D                      i1l1173 03A8                      i1l1159 0359  
                    i1l1353 0171                      i1l1337 0155                      i1l1505 00FB  
                    i1l1347 016B                      i1l1507 00FD                      i1l1427 001D  
                    i1l1373 01A3                      i1l1365 019F                      u104_25 0186  
                    i1l1437 006A                      i1l1359 0190                      i1l1375 011B  
                    i1l1383 03E7                      i1l1455 00A1                      i1l1377 01DD  
                    i1l1465 00B7                      i1l1449 0098                      i1l1387 03ED  
                    i1l1475 00C8                      i1l1467 00B9                      i1l1485 00D9  
                    i1l1477 00CA                      i1l1495 00EA                      i1l1487 00DB  
                    i1l1497 00EC                      u115_25 001B                      u118_25 0077  
                    _INTCON 000B                      _OSCCON 0099                      _SPBRGH 019C  
                    _TMR6IF 009B              __CFG_PWRTE$OFF 0000                      ___bmul 03D3  
          __end_of_autoBaud 0251         __size_of_UART_Write 000A              __CFG_STVREN$ON 0000  
          ?_UART_Write_Text 00C5                   ??___lwdiv 0074                   ??___lwmod 007C  
           _default_handler 040E      __size_of_initializePIC 004A                   ??_sprintf 0024  
      __end_of_get_port_pin 0404     __end_of__initialization 0111         ___bmul@multiplicand 00C4  
             ?i1_UART_Write 0070              __pcstackCOMMON 0070                 ISR@debounce 0046  
             autoBaud@index 00C8                   ?i1___bmul 0070            i1___bmul@product 0073  
                __pbssBANK1 00A0       i1UART_Write_Text@text 0071              ??i1_UART_Write 0070  
   __end_of_default_handler 0415               _initializePIC 02BD                  __pmaintext 0367  
                   ?___bmul 00C4                  __pintentry 0004                  ??i1___bmul 0071  
         _initializeSensors 0251                ??_UART_Write 00C4          ?_initializeSensors 0070  
                 ?_autoBaud 0070     __size_of_switch_handler 0004         ??_initializeSensors 00C8  
            ?_initializePIC 0070             __size_of___bmul 0012          __end_of_UART_Write 040E  
                   ___lwdiv 0307                     ___lwmod 033B                     __ptext1 0251  
                   __ptext2 03D3                     __ptext3 02BD                     __ptext4 01E2  
                   __ptext5 038A                     __ptext6 0404                     __ptext8 03E5  
                   __ptext9 040E                __size_of_ISR 0104   __end_of_initializeSensors 02BD  
                   _dpowers 03C0                   _IOCAFbits 0393         i1___bmul@multiplier 0072  
                 _IOCANbits 0392                   _IOCAPbits 0391                   _T6CONbits 041E  
                   _sensors 00A0       __size_of_get_port_pin 000E                     _sprintf 0115  
                   clrloop0 041D        end_of_initialization 0111                  ??_autoBaud 00C4  
          ?_default_handler 0070                   _RCSTAbits 019D                __pstringtext 03C0  
              _get_port_pin 03F6                   _PORTAbits 000C              UART_Write@data 00C4  
          __CFG_FOSC$INTOSC 0000                   _TRISAbits 008C                   _TRISCbits 008E  
      __end_ofi1_UART_Write 041C             ??_initializePIC 00C4                   _TXSTAbits 019E  
            __end_of___bmul 03E5           i1_UART_Write_Text 03A6                 _BAUDCONbits 019F  
        ?i1_UART_Write_Text 0071  __size_of_initializeSensors 006C    __size_of_UART_Write_Text 001C  
         __size_ofi1___bmul 0011         start_initialization 010A                 __end_of_ISR 0108  
       ??i1_UART_Write_Text 0073              _switch_handler 0422                 _APFCON0bits 011D  
                  ??___bmul 00C5   __end_ofi1_UART_Write_Text 03C0                   ___latbits 0002  
             __pcstackBANK0 0020               __pcstackBANK1 00C4      i1UART_Write_Text@count 0074  
    __end_of_switch_handler 0426                 sprintf@flag 0029           __size_of_autoBaud 006F  
               sprintf@prec 002A            ___lwdiv@dividend 0072                    ?___lwdiv 0070  
                  ?___lwmod 0078       __size_ofi1_UART_Write 0007            get_port_pin@port 0074  
           ?_switch_handler 0070        UART_Write_Text@count 00C8            ___lwdiv@quotient 0075  
                  ?_sprintf 0020           ??_UART_Write_Text 00C7                   clear_ram0 041C  
                  _PIE1bits 0091                    _PIE3bits 0093       i1___bmul@multiplicand 0070  
                  _PIR1bits 0011                    _PIR3bits 0013                i1_UART_Write 0415  
__size_ofi1_UART_Write_Text 001A                    i1___bmul 03E5                  _ADCON0bits 009D  
          i1UART_Write@data 0070              _shouldAutoBaud 00C3            __size_of___lwdiv 0034  
          __size_of___lwmod 002C    __size_of_default_handler 0007                  _ANSELAbits 018C  
                sprintf@val 002B             ___lwdiv@divisor 0070             ___lwdiv@counter 0077  
                  __ptext10 0422                    __ptext11 0115                    __ptext12 033B  
                  __ptext13 0307                    __ptext14 03F6                    __ptext15 03A6  
                  __ptext16 0415             get_port_pin@pin 0076                    _autoBaud 01E2  
          __size_of_sprintf 00CD         UART_Write_Text@text 00C5               __size_of_main 0023  
     __end_of_initializePIC 0307                    int$flags 007E           ISR@shouldDebounce 0044  
                  intlevel1 0000                   sprintf@ap 0028                   sprintf@sp 002D  
          ___lwmod@dividend 007A           __CFG_CLKOUTEN$OFF 0000            ??_switch_handler 0070  
           _UART_Write_Text 038A                    sprintf@c 002E                    sprintf@f 0020  
           ___lwmod@divisor 0078             ___lwmod@counter 007D                  _UART_Write 0404  
         ??_default_handler 0076          autoBaud@sync_count 00C6  
