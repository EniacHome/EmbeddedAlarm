

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Jan 03 16:16:44 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	psect	text8,local,class=CODE,merge=1,delta=2
    19                           	psect	text9,local,class=CODE,merge=1,delta=2
    20                           	psect	text10,local,class=CODE,merge=1,delta=2
    21                           	psect	text11,local,class=CODE,merge=1,delta=2
    22                           	psect	text12,local,class=CODE,merge=1,delta=2
    23                           	psect	text13,local,class=CODE,merge=1,delta=2
    24                           	psect	text14,local,class=CODE,merge=1,delta=2
    25                           	psect	text15,local,class=CODE,merge=1,delta=2
    26                           	psect	text16,local,class=CODE,merge=1,delta=2
    27                           	dabs	1,0x7E,2
    28  0000                     
    29                           ; Version 1.40
    30                           ; Generated 01/12/2016 GMT
    31                           ; 
    32                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    33                           ; All rights reserved.
    34                           ; 
    35                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    36                           ; 
    37                           ; Redistribution and use in source and binary forms, with or without modification, are
    38                           ; permitted provided that the following conditions are met:
    39                           ; 
    40                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    41                           ;        conditions and the following disclaimer.
    42                           ; 
    43                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    44                           ;        of conditions and the following disclaimer in the documentation and/or other
    45                           ;        materials provided with the distribution.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC16F1829 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     	;# 
    64  0001                     	;# 
    65  0002                     	;# 
    66  0003                     	;# 
    67  0004                     	;# 
    68  0005                     	;# 
    69  0006                     	;# 
    70  0007                     	;# 
    71  0008                     	;# 
    72  0009                     	;# 
    73  000A                     	;# 
    74  000B                     	;# 
    75  000C                     	;# 
    76  000D                     	;# 
    77  000E                     	;# 
    78  0011                     	;# 
    79  0012                     	;# 
    80  0013                     	;# 
    81  0014                     	;# 
    82  0015                     	;# 
    83  0016                     	;# 
    84  0016                     	;# 
    85  0017                     	;# 
    86  0018                     	;# 
    87  0019                     	;# 
    88  001A                     	;# 
    89  001B                     	;# 
    90  001C                     	;# 
    91  001E                     	;# 
    92  001F                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  0091                     	;# 
    97  0092                     	;# 
    98  0093                     	;# 
    99  0094                     	;# 
   100  0095                     	;# 
   101  0096                     	;# 
   102  0097                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009A                     	;# 
   106  009B                     	;# 
   107  009B                     	;# 
   108  009C                     	;# 
   109  009D                     	;# 
   110  009E                     	;# 
   111  010C                     	;# 
   112  010D                     	;# 
   113  010E                     	;# 
   114  0111                     	;# 
   115  0112                     	;# 
   116  0113                     	;# 
   117  0114                     	;# 
   118  0115                     	;# 
   119  0116                     	;# 
   120  0117                     	;# 
   121  0118                     	;# 
   122  0119                     	;# 
   123  011A                     	;# 
   124  011B                     	;# 
   125  011D                     	;# 
   126  011E                     	;# 
   127  018C                     	;# 
   128  018D                     	;# 
   129  018E                     	;# 
   130  0191                     	;# 
   131  0191                     	;# 
   132  0192                     	;# 
   133  0193                     	;# 
   134  0193                     	;# 
   135  0193                     	;# 
   136  0194                     	;# 
   137  0195                     	;# 
   138  0196                     	;# 
   139  0199                     	;# 
   140  019A                     	;# 
   141  019B                     	;# 
   142  019B                     	;# 
   143  019C                     	;# 
   144  019D                     	;# 
   145  019E                     	;# 
   146  019F                     	;# 
   147  020C                     	;# 
   148  020D                     	;# 
   149  020E                     	;# 
   150  0211                     	;# 
   151  0211                     	;# 
   152  0212                     	;# 
   153  0212                     	;# 
   154  0213                     	;# 
   155  0213                     	;# 
   156  0214                     	;# 
   157  0214                     	;# 
   158  0215                     	;# 
   159  0215                     	;# 
   160  0215                     	;# 
   161  0216                     	;# 
   162  0216                     	;# 
   163  0217                     	;# 
   164  0217                     	;# 
   165  0219                     	;# 
   166  021A                     	;# 
   167  021B                     	;# 
   168  021C                     	;# 
   169  021D                     	;# 
   170  021E                     	;# 
   171  021F                     	;# 
   172  0291                     	;# 
   173  0291                     	;# 
   174  0292                     	;# 
   175  0293                     	;# 
   176  0294                     	;# 
   177  0295                     	;# 
   178  0295                     	;# 
   179  0296                     	;# 
   180  0298                     	;# 
   181  0298                     	;# 
   182  0299                     	;# 
   183  029A                     	;# 
   184  029B                     	;# 
   185  029C                     	;# 
   186  029D                     	;# 
   187  029E                     	;# 
   188  0311                     	;# 
   189  0311                     	;# 
   190  0312                     	;# 
   191  0313                     	;# 
   192  0318                     	;# 
   193  0318                     	;# 
   194  0319                     	;# 
   195  031A                     	;# 
   196  038C                     	;# 
   197  038D                     	;# 
   198  038E                     	;# 
   199  0391                     	;# 
   200  0392                     	;# 
   201  0393                     	;# 
   202  0394                     	;# 
   203  0395                     	;# 
   204  0396                     	;# 
   205  039A                     	;# 
   206  039C                     	;# 
   207  039D                     	;# 
   208  039E                     	;# 
   209  039F                     	;# 
   210  0415                     	;# 
   211  0416                     	;# 
   212  0417                     	;# 
   213  041C                     	;# 
   214  041D                     	;# 
   215  041E                     	;# 
   216  0FE4                     	;# 
   217  0FE5                     	;# 
   218  0FE6                     	;# 
   219  0FE7                     	;# 
   220  0FE8                     	;# 
   221  0FE9                     	;# 
   222  0FEA                     	;# 
   223  0FEB                     	;# 
   224  0FED                     	;# 
   225  0FEE                     	;# 
   226  0FEF                     	;# 
   227  0000                     	;# 
   228  0001                     	;# 
   229  0002                     	;# 
   230  0003                     	;# 
   231  0004                     	;# 
   232  0005                     	;# 
   233  0006                     	;# 
   234  0007                     	;# 
   235  0008                     	;# 
   236  0009                     	;# 
   237  000A                     	;# 
   238  000B                     	;# 
   239  000C                     	;# 
   240  000D                     	;# 
   241  000E                     	;# 
   242  0011                     	;# 
   243  0012                     	;# 
   244  0013                     	;# 
   245  0014                     	;# 
   246  0015                     	;# 
   247  0016                     	;# 
   248  0016                     	;# 
   249  0017                     	;# 
   250  0018                     	;# 
   251  0019                     	;# 
   252  001A                     	;# 
   253  001B                     	;# 
   254  001C                     	;# 
   255  001E                     	;# 
   256  001F                     	;# 
   257  008C                     	;# 
   258  008D                     	;# 
   259  008E                     	;# 
   260  0091                     	;# 
   261  0092                     	;# 
   262  0093                     	;# 
   263  0094                     	;# 
   264  0095                     	;# 
   265  0096                     	;# 
   266  0097                     	;# 
   267  0098                     	;# 
   268  0099                     	;# 
   269  009A                     	;# 
   270  009B                     	;# 
   271  009B                     	;# 
   272  009C                     	;# 
   273  009D                     	;# 
   274  009E                     	;# 
   275  010C                     	;# 
   276  010D                     	;# 
   277  010E                     	;# 
   278  0111                     	;# 
   279  0112                     	;# 
   280  0113                     	;# 
   281  0114                     	;# 
   282  0115                     	;# 
   283  0116                     	;# 
   284  0117                     	;# 
   285  0118                     	;# 
   286  0119                     	;# 
   287  011A                     	;# 
   288  011B                     	;# 
   289  011D                     	;# 
   290  011E                     	;# 
   291  018C                     	;# 
   292  018D                     	;# 
   293  018E                     	;# 
   294  0191                     	;# 
   295  0191                     	;# 
   296  0192                     	;# 
   297  0193                     	;# 
   298  0193                     	;# 
   299  0193                     	;# 
   300  0194                     	;# 
   301  0195                     	;# 
   302  0196                     	;# 
   303  0199                     	;# 
   304  019A                     	;# 
   305  019B                     	;# 
   306  019B                     	;# 
   307  019C                     	;# 
   308  019D                     	;# 
   309  019E                     	;# 
   310  019F                     	;# 
   311  020C                     	;# 
   312  020D                     	;# 
   313  020E                     	;# 
   314  0211                     	;# 
   315  0211                     	;# 
   316  0212                     	;# 
   317  0212                     	;# 
   318  0213                     	;# 
   319  0213                     	;# 
   320  0214                     	;# 
   321  0214                     	;# 
   322  0215                     	;# 
   323  0215                     	;# 
   324  0215                     	;# 
   325  0216                     	;# 
   326  0216                     	;# 
   327  0217                     	;# 
   328  0217                     	;# 
   329  0219                     	;# 
   330  021A                     	;# 
   331  021B                     	;# 
   332  021C                     	;# 
   333  021D                     	;# 
   334  021E                     	;# 
   335  021F                     	;# 
   336  0291                     	;# 
   337  0291                     	;# 
   338  0292                     	;# 
   339  0293                     	;# 
   340  0294                     	;# 
   341  0295                     	;# 
   342  0295                     	;# 
   343  0296                     	;# 
   344  0298                     	;# 
   345  0298                     	;# 
   346  0299                     	;# 
   347  029A                     	;# 
   348  029B                     	;# 
   349  029C                     	;# 
   350  029D                     	;# 
   351  029E                     	;# 
   352  0311                     	;# 
   353  0311                     	;# 
   354  0312                     	;# 
   355  0313                     	;# 
   356  0318                     	;# 
   357  0318                     	;# 
   358  0319                     	;# 
   359  031A                     	;# 
   360  038C                     	;# 
   361  038D                     	;# 
   362  038E                     	;# 
   363  0391                     	;# 
   364  0392                     	;# 
   365  0393                     	;# 
   366  0394                     	;# 
   367  0395                     	;# 
   368  0396                     	;# 
   369  039A                     	;# 
   370  039C                     	;# 
   371  039D                     	;# 
   372  039E                     	;# 
   373  039F                     	;# 
   374  0415                     	;# 
   375  0416                     	;# 
   376  0417                     	;# 
   377  041C                     	;# 
   378  041D                     	;# 
   379  041E                     	;# 
   380  0FE4                     	;# 
   381  0FE5                     	;# 
   382  0FE6                     	;# 
   383  0FE7                     	;# 
   384  0FE8                     	;# 
   385  0FE9                     	;# 
   386  0FEA                     	;# 
   387  0FEB                     	;# 
   388  0FED                     	;# 
   389  0FEE                     	;# 
   390  0FEF                     	;# 
   391  000B                     _INTCON	set	11
   392  0011                     _PIR1bits	set	17
   393  0013                     _PIR3bits	set	19
   394  001C                     _T2CON	set	28
   395  000C                     _PORTA	set	12
   396  008E                     _ADIF	set	142
   397  009B                     _TMR6IF	set	155
   398  009B                     _ADRES	set	155
   399  009D                     _ADCON0	set	157
   400  009D                     _ADCON0bits	set	157
   401  009E                     _ADCON1	set	158
   402  0099                     _OSCCON	set	153
   403  0091                     _PIE1bits	set	145
   404  0093                     _PIE3bits	set	147
   405  008C                     _TRISAbits	set	140
   406  008E                     _TRISCbits	set	142
   407  011D                     _APFCON0bits	set	285
   408  010E                     _LATC	set	270
   409  019B                     _SPBRG	set	411
   410  018C                     _ANSELAbits	set	396
   411  019F                     _BAUDCONbits	set	415
   412  0199                     _RCREG	set	409
   413  019D                     _RCSTAbits	set	413
   414  019C                     _SPBRGH	set	412
   415  019A                     _TXREG	set	410
   416  019E                     _TXSTAbits	set	414
   417  0CFB                     _BRG16	set	3323
   418  0CF1                     _TRMT	set	3313
   419  0393                     _IOCAFbits	set	915
   420  0392                     _IOCANbits	set	914
   421  0391                     _IOCAPbits	set	913
   422  041D                     _PR6	set	1053
   423  041E                     _T6CON	set	1054
   424  041E                     _T6CONbits	set	1054
   425                           
   426                           	psect	stringtext
   427  0318                     __pstringtext:	
   428  0318                     STR_1:	
   429  0318  3456               	retlw	86	;'V'
   430  0319  3400               	retlw	0
   431                           
   432                           ; #config settings
   433  0000                     
   434                           	psect	cinit
   435  00AC                     start_initialization:	
   436  00AC                     __initialization:	
   437                           
   438                           ; Clear objects allocated to BANK0
   439  00AC  3020               	movlw	low __pbssBANK0
   440  00AD  0084               	movwf	4
   441  00AE  3000               	movlw	high __pbssBANK0
   442  00AF  0085               	movwf	5
   443  00B0  302B               	movlw	43
   444  00B1  3183  230E         	fcall	clear_ram0
   445  00B3                     end_of_initialization:	
   446                           ;End of C runtime variable initialization code
   447                           
   448  00B3                     __end_of__initialization:	
   449  00B3  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   450  00B4  0020               	movlb	0
   451  00B5  3182  2A0A         	ljmp	_main	;jump to C main() function
   452                           
   453                           	psect	bssBANK0
   454  0020                     __pbssBANK0:	
   455  0020                     _should_autobaud:	
   456  0020                     	ds	1
   457  0021                     _sensors:	
   458  0021                     	ds	42
   459                           
   460                           	psect	clrtext
   461  030E                     clear_ram0:	
   462                           ;	Called with FSR0 containing the base address, and
   463                           ;	WREG with the size to clear
   464                           
   465  030E  0064               	clrwdt	;clear the watchdog before getting into this loop
   466  030F                     clrloop0:	
   467  030F  0180               	clrf	0	;clear RAM location pointed to by FSR
   468  0310  3101               	addfsr 0,1
   469  0311  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   470  0312  2B0F               	goto	clrloop0	;have we reached the end yet?
   471  0313  3400               	retlw	0	;all done for this memory range, return
   472                           
   473                           	psect	cstackCOMMON
   474  0070                     __pcstackCOMMON:	
   475  0070                     ?_initialize_PIC:	
   476  0070                     ?_initialize_sensors:	
   477                           ; 1 bytes @ 0x0
   478                           
   479  0070                     ?_autoBaud:	
   480                           ; 1 bytes @ 0x0
   481                           
   482  0070                     ?_get_value:	
   483                           ; 1 bytes @ 0x0
   484                           
   485  0070                     ??_get_value:	
   486                           ; 1 bytes @ 0x0
   487                           
   488  0070                     ?_UART_write:	
   489                           ; 1 bytes @ 0x0
   490                           
   491  0070                     ?_post_debounce:	
   492                           ; 1 bytes @ 0x0
   493                           
   494  0070                     ?_pre_debounce:	
   495                           ; 1 bytes @ 0x0
   496                           
   497  0070                     ?_ISR:	
   498                           ; 1 bytes @ 0x0
   499                           
   500  0070                     ?i1_UART_write:	
   501                           ; 1 bytes @ 0x0
   502                           
   503  0070                     ??i1_UART_write:	
   504                           ; 1 bytes @ 0x0
   505                           
   506  0070                     ?i1___bmul:	
   507                           ; 1 bytes @ 0x0
   508                           
   509  0070                     ?_main:	
   510                           ; 1 bytes @ 0x0
   511                           
   512  0070                     i1UART_write@data:	
   513                           ; 2 bytes @ 0x0
   514                           
   515  0070                     i1___bmul@multiplicand:	
   516                           ; 1 bytes @ 0x0
   517                           
   518                           
   519                           ; 1 bytes @ 0x0
   520  0070                     	ds	1
   521  0071                     ??i1___bmul:	
   522                           
   523                           ; 1 bytes @ 0x1
   524  0071                     	ds	1
   525  0072                     i1___bmul@multiplier:	
   526                           
   527                           ; 1 bytes @ 0x2
   528  0072                     	ds	1
   529  0073                     get_value@sensor:	
   530  0073                     i1___bmul@product:	
   531                           ; 1 bytes @ 0x3
   532                           
   533                           
   534                           ; 1 bytes @ 0x3
   535  0073                     	ds	1
   536  0074                     ??_pre_debounce:	
   537  0074                     ?_create_package:	
   538                           ; 1 bytes @ 0x4
   539                           
   540  0074                     create_package@value:	
   541                           ; 3 bytes @ 0x4
   542                           
   543                           
   544                           ; 2 bytes @ 0x4
   545  0074                     	ds	1
   546  0075                     pre_debounce@sensor:	
   547                           
   548                           ; 1 bytes @ 0x5
   549  0075                     	ds	1
   550  0076                     create_package@extended:	
   551                           
   552                           ; 1 bytes @ 0x6
   553  0076                     	ds	1
   554  0077                     ??_create_package:	
   555                           
   556                           ; 1 bytes @ 0x7
   557  0077                     	ds	1
   558  0078                     create_package@index:	
   559                           
   560                           ; 1 bytes @ 0x8
   561  0078                     	ds	1
   562  0079                     create_package@package:	
   563                           
   564                           ; 3 bytes @ 0x9
   565  0079                     	ds	3
   566  007C                     ?_default_handler:	
   567  007C                     ?_temperature_handler:	
   568                           ; 1 bytes @ 0xC
   569                           
   570  007C                     ?_switch_handler:	
   571                           ; 1 bytes @ 0xC
   572                           
   573  007C                     default_handler@sensor:	
   574                           ; 1 bytes @ 0xC
   575                           
   576  007C                     temperature_handler@sensor:	
   577                           ; 1 bytes @ 0xC
   578                           
   579  007C                     switch_handler@sensor:	
   580                           ; 1 bytes @ 0xC
   581                           
   582                           
   583                           ; 1 bytes @ 0xC
   584  007C                     	ds	1
   585  007D                     ??_post_debounce:	
   586  007D                     ??_temperature_handler:	
   587                           ; 1 bytes @ 0xD
   588                           
   589  007D                     ??_switch_handler:	
   590                           ; 1 bytes @ 0xD
   591                           
   592                           
   593                           ; 1 bytes @ 0xD
   594  007D                     	ds	1
   595                           
   596                           	psect	cstackBANK0
   597  004B                     __pcstackBANK0:	
   598  004B                     ??_default_handler:	
   599  004B                     temperature_handler@package:	
   600                           ; 1 bytes @ 0x0
   601                           
   602                           
   603                           ; 3 bytes @ 0x0
   604  004B                     	ds	2
   605  004D                     default_handler@package:	
   606                           
   607                           ; 3 bytes @ 0x2
   608  004D                     	ds	3
   609  0050                     post_debounce@sensor:	
   610                           
   611                           ; 1 bytes @ 0x5
   612  0050                     	ds	1
   613  0051                     ??_ISR:	
   614                           
   615                           ; 1 bytes @ 0x6
   616  0051                     	ds	2
   617  0053                     ISR@x:	
   618                           
   619                           ; 1 bytes @ 0x8
   620  0053                     	ds	1
   621  0054                     ISR@shouldDebounce:	
   622                           
   623                           ; 2 bytes @ 0x9
   624  0054                     	ds	2
   625  0056                     ISR@i:	
   626                           
   627                           ; 2 bytes @ 0xB
   628  0056                     	ds	2
   629  0058                     ??_initialize_PIC:	
   630  0058                     ??_autoBaud:	
   631                           ; 1 bytes @ 0xD
   632                           
   633  0058                     ??_UART_write:	
   634                           ; 1 bytes @ 0xD
   635                           
   636  0058                     ?___bmul:	
   637                           ; 1 bytes @ 0xD
   638                           
   639  0058                     UART_write@data:	
   640                           ; 1 bytes @ 0xD
   641                           
   642  0058                     ___bmul@multiplicand:	
   643                           ; 1 bytes @ 0xD
   644                           
   645                           
   646                           ; 1 bytes @ 0xD
   647  0058                     	ds	1
   648  0059                     ?_UART_write_text:	
   649  0059                     ??___bmul:	
   650                           ; 1 bytes @ 0xE
   651                           
   652  0059                     autoBaud@discard:	
   653                           ; 1 bytes @ 0xE
   654                           
   655  0059                     UART_write_text@text:	
   656                           ; 1 bytes @ 0xE
   657                           
   658                           
   659                           ; 2 bytes @ 0xE
   660  0059                     	ds	1
   661  005A                     ___bmul@product:	
   662  005A                     autoBaud@sync_count:	
   663                           ; 1 bytes @ 0xF
   664                           
   665                           
   666                           ; 2 bytes @ 0xF
   667  005A                     	ds	1
   668  005B                     ??_UART_write_text:	
   669  005B                     ___bmul@multiplier:	
   670                           ; 1 bytes @ 0x10
   671                           
   672                           
   673                           ; 1 bytes @ 0x10
   674  005B                     	ds	1
   675  005C                     ??_initialize_sensors:	
   676  005C                     UART_write_text@count:	
   677                           ; 1 bytes @ 0x11
   678                           
   679  005C                     autoBaud@index:	
   680                           ; 2 bytes @ 0x11
   681                           
   682                           
   683                           ; 2 bytes @ 0x11
   684  005C                     	ds	3
   685  005F                     initialize_sensors@i:	
   686                           
   687                           ; 2 bytes @ 0x14
   688  005F                     	ds	2
   689  0061                     ??_main:	
   690                           
   691                           	psect	maintext
   692  020A                     __pmaintext:	
   693                           ; 1 bytes @ 0x16
   694 ;;
   695 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   696 ;;
   697 ;; *************** function _main *****************
   698 ;; Defined at:
   699 ;;		line 62 in file "main.c"
   700 ;; Parameters:    Size  Location     Type
   701 ;;		None
   702 ;; Auto vars:     Size  Location     Type
   703 ;;		None
   704 ;; Return value:  Size  Location     Type
   705 ;;                  2   90[None  ] int 
   706 ;; Registers used:
   707 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   708 ;; Tracked objects:
   709 ;;		On entry : B1F/0
   710 ;;		On exit  : 0/0
   711 ;;		Unchanged: 0/0
   712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   716 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   717 ;;Total ram usage:        0 bytes
   718 ;; Hardware stack levels required when called:    6
   719 ;; This function calls:
   720 ;;		_UART_write_text
   721 ;;		_autoBaud
   722 ;;		_initialize_PIC
   723 ;;		_initialize_sensors
   724 ;; This function is called by:
   725 ;;		Startup code after reset
   726 ;; This function uses a non-reentrant model
   727 ;;
   728                           
   729                           
   730                           ;psect for function _main
   731  020A                     _main:	
   732                           
   733                           ;main.c: 63: initialize_PIC();
   734                           
   735                           ;incstack = 0
   736                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   737  020A  3181  2195  3182   	fcall	_initialize_PIC
   738                           
   739                           ;main.c: 64: initialize_sensors();
   740  020D  3180  20B7  3182   	fcall	_initialize_sensors
   741  0210                     l1211:	
   742                           ;main.c: 66: while(1){
   743                           
   744                           
   745                           ;main.c: 67: if(should_autobaud){
   746  0210  0020               	movlb	0	; select bank0
   747  0211  0820               	movf	_should_autobaud,w
   748  0212  1903               	btfsc	3,2
   749  0213  2A24               	goto	l1221
   750                           
   751                           ;main.c: 68: autoBaud();
   752  0214  3181  2126  3182   	fcall	_autoBaud
   753                           
   754                           ;main.c: 69: UART_write_text("V");
   755  0217  3018               	movlw	low (STR_1| (0+32768))
   756  0218  0020               	movlb	0	; select bank0
   757  0219  00D9               	movwf	UART_write_text@text
   758  021A  3083               	movlw	high (STR_1| (0+32768))
   759  021B  00DA               	movwf	UART_write_text@text+1
   760  021C  3182  2274  3182   	fcall	_UART_write_text
   761                           
   762                           ;main.c: 70: PIE1bits.RCIE = 1;
   763  021F  0021               	movlb	1	; select bank1
   764  0220  1691               	bsf	17,5	;volatile
   765                           
   766                           ;main.c: 71: PIE1bits.TXIE = 1;
   767  0221  1611               	bsf	17,4	;volatile
   768                           
   769                           ;main.c: 72: should_autobaud = 0;
   770  0222  0020               	movlb	0	; select bank0
   771  0223  01A0               	clrf	_should_autobaud
   772  0224                     l1221:	
   773                           
   774                           ;main.c: 73: }
   775                           ;main.c: 76: if(RCSTAbits.OERR)
   776  0224  0023               	movlb	3	; select bank3
   777  0225  1C9D               	btfss	29,1	;volatile
   778  0226  2A29               	goto	l93
   779                           
   780                           ;main.c: 77: {
   781                           ;main.c: 78: RCSTAbits.SPEN = 0;
   782  0227  139D               	bcf	29,7	;volatile
   783                           
   784                           ;main.c: 79: RCSTAbits.SPEN = 1;
   785  0228  179D               	bsf	29,7	;volatile
   786  0229                     l93:	
   787                           
   788                           ;main.c: 80: }
   789                           ;main.c: 82: if(RCSTAbits.FERR)
   790  0229  1D1D               	btfss	29,2	;volatile
   791  022A  2A10               	goto	l1211
   792                           
   793                           ;main.c: 83: {
   794                           ;main.c: 84: RCSTAbits.SPEN = 0;
   795  022B  139D               	bcf	29,7	;volatile
   796                           
   797                           ;main.c: 85: RCSTAbits.SPEN = 1;
   798  022C  179D               	bsf	29,7	;volatile
   799  022D  2A10               	goto	l1211
   800  022E                     __end_of_main:	
   801                           ;main.c: 86: }
   802                           ;main.c: 87: }
   803                           ;main.c: 89: return 0;
   804                           ;	Return value of _main is never used
   805                           
   806                           
   807                           	psect	text1
   808  00B7                     __ptext1:	
   809 ;; *************** function _initialize_sensors *****************
   810 ;; Defined at:
   811 ;;		line 239 in file "main.c"
   812 ;; Parameters:    Size  Location     Type
   813 ;;		None
   814 ;; Auto vars:     Size  Location     Type
   815 ;;  i               2   20[BANK0 ] int 
   816 ;; Return value:  Size  Location     Type
   817 ;;                  1    wreg      void 
   818 ;; Registers used:
   819 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   820 ;; Tracked objects:
   821 ;;		On entry : 0/0
   822 ;;		On exit  : 0/0
   823 ;;		Unchanged: 0/0
   824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   826 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
   827 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
   828 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
   829 ;;Total ram usage:        5 bytes
   830 ;; Hardware stack levels used:    1
   831 ;; Hardware stack levels required when called:    5
   832 ;; This function calls:
   833 ;;		___bmul
   834 ;; This function is called by:
   835 ;;		_main
   836 ;; This function uses a non-reentrant model
   837 ;;
   838                           
   839                           
   840                           ;psect for function _initialize_sensors
   841  00B7                     _initialize_sensors:	
   842                           
   843                           ;main.c: 240: for(int i = 0; i < 6; ++i){
   844                           
   845                           ;incstack = 0
   846                           ; Regs used in _initialize_sensors: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   847  00B7  0020               	movlb	0	; select bank0
   848  00B8  01DF               	clrf	initialize_sensors@i
   849  00B9  01E0               	clrf	initialize_sensors@i+1
   850  00BA  0860               	movf	initialize_sensors@i+1,w
   851  00BB  3A80               	xorlw	128
   852  00BC  00DC               	movwf	??_initialize_sensors
   853  00BD  3080               	movlw	128
   854  00BE  025C               	subwf	??_initialize_sensors,w
   855  00BF  1D03               	skipz
   856  00C0  28C3               	goto	u515
   857  00C1  3006               	movlw	6
   858  00C2  025F               	subwf	initialize_sensors@i,w
   859  00C3                     u515:	
   860  00C3  1803               	btfsc	3,0
   861  00C4  291C               	goto	l1133
   862  00C5                     l1127:	
   863                           
   864                           ;main.c: 241: sensors[i].index = i;
   865  00C5  0020               	movlb	0	; select bank0
   866  00C6  085F               	movf	initialize_sensors@i,w
   867  00C7  00DC               	movwf	??_initialize_sensors
   868  00C8  3007               	movlw	7
   869  00C9  00DD               	movwf	??_initialize_sensors+1
   870  00CA  085D               	movf	??_initialize_sensors+1,w
   871  00CB  00D8               	movwf	___bmul@multiplicand
   872  00CC  085F               	movf	initialize_sensors@i,w
   873  00CD  3182  22DA  3180   	fcall	___bmul
   874  00D0  3E21               	addlw	(low (_sensors| 0))& (0+255)
   875  00D1  0086               	movwf	6
   876  00D2  0187               	clrf	7
   877  00D3  0020               	movlb	0	; select bank0
   878  00D4  085C               	movf	??_initialize_sensors,w
   879  00D5  0081               	movwf	1
   880                           
   881                           ;main.c: 242: sensors[i].port = &PORTA;
   882  00D6  300C               	movlw	12
   883  00D7  00DC               	movwf	??_initialize_sensors
   884  00D8  3000               	movlw	0
   885  00D9  00DD               	movwf	??_initialize_sensors+1
   886  00DA  3007               	movlw	7
   887  00DB  00DE               	movwf	??_initialize_sensors+2
   888  00DC  085E               	movf	??_initialize_sensors+2,w
   889  00DD  00D8               	movwf	___bmul@multiplicand
   890  00DE  085F               	movf	initialize_sensors@i,w
   891  00DF  3182  22DA  3180   	fcall	___bmul
   892  00E2  3E02               	addlw	2
   893  00E3  3E21               	addlw	(low (_sensors| 0))& (0+255)
   894  00E4  0086               	movwf	6
   895  00E5  0187               	clrf	7
   896  00E6  0020               	movlb	0	; select bank0
   897  00E7  085C               	movf	??_initialize_sensors,w
   898  00E8  3FC0               	movwi [0]fsr1
   899  00E9  085D               	movf	??_initialize_sensors+1,w
   900  00EA  3FC1               	movwi [1]fsr1
   901                           
   902                           ;main.c: 243: sensors[i].pin = i;
   903  00EB  085F               	movf	initialize_sensors@i,w
   904  00EC  00DC               	movwf	??_initialize_sensors
   905  00ED  3007               	movlw	7
   906  00EE  00DD               	movwf	??_initialize_sensors+1
   907  00EF  085D               	movf	??_initialize_sensors+1,w
   908  00F0  00D8               	movwf	___bmul@multiplicand
   909  00F1  085F               	movf	initialize_sensors@i,w
   910  00F2  3182  22DA  3180   	fcall	___bmul
   911  00F5  3E01               	addlw	1
   912  00F6  3E21               	addlw	(low (_sensors| 0))& (0+255)
   913  00F7  0086               	movwf	6
   914  00F8  0187               	clrf	7
   915  00F9  0020               	movlb	0	; select bank0
   916  00FA  085C               	movf	??_initialize_sensors,w
   917  00FB  0081               	movwf	1
   918                           
   919                           ;main.c: 244: sensors[i].handler = default_handler;
   920  00FC  3007               	movlw	7
   921  00FD  00DC               	movwf	??_initialize_sensors
   922  00FE  085C               	movf	??_initialize_sensors,w
   923  00FF  00D8               	movwf	___bmul@multiplicand
   924  0100  085F               	movf	initialize_sensors@i,w
   925  0101  3182  22DA  3180   	fcall	___bmul
   926  0104  3E04               	addlw	4
   927  0105  3E21               	addlw	(low (_sensors| 0))& (0+255)
   928  0106  0086               	movwf	6
   929  0107  0187               	clrf	7
   930  0108  302E               	movlw	low _default_handler
   931  0109  3FC0               	movwi [0]fsr1
   932  010A  3002               	movlw	high _default_handler
   933  010B  3FC1               	movwi [1]fsr1
   934  010C  3001               	movlw	1
   935  010D  0020               	movlb	0	; select bank0
   936  010E  07DF               	addwf	initialize_sensors@i,f
   937  010F  3000               	movlw	0
   938  0110  3DE0               	addwfc	initialize_sensors@i+1,f
   939  0111  0860               	movf	initialize_sensors@i+1,w
   940  0112  3A80               	xorlw	128
   941  0113  00DC               	movwf	??_initialize_sensors
   942  0114  3080               	movlw	128
   943  0115  025C               	subwf	??_initialize_sensors,w
   944  0116  1D03               	skipz
   945  0117  291A               	goto	u525
   946  0118  3006               	movlw	6
   947  0119  025F               	subwf	initialize_sensors@i,w
   948  011A                     u525:	
   949  011A  1C03               	skipc
   950  011B  28C5               	goto	l1127
   951  011C                     l1133:	
   952                           
   953                           ;main.c: 245: }
   954                           ;main.c: 248: sensors[0].handler = temperature_handler;
   955  011C  3051               	movlw	low _temperature_handler
   956  011D  0020               	movlb	0	; select bank0
   957  011E  00A5               	movwf	low ((_sensors| 0+4))
   958  011F  3002               	movlw	high _temperature_handler
   959  0120  00A6               	movwf	(low ((_sensors| 0+4))+1)
   960                           
   961                           ;main.c: 251: sensors[2].handler = switch_handler;
   962  0121  3014               	movlw	low _switch_handler
   963  0122  00B3               	movwf	low ((_sensors| 0+18))
   964  0123  3003               	movlw	high _switch_handler
   965  0124  00B4               	movwf	(low ((_sensors| 0+18))+1)
   966  0125  0008               	return
   967  0126                     __end_of_initialize_sensors:	
   968                           
   969                           	psect	text2
   970  02DA                     __ptext2:	
   971 ;; *************** function ___bmul *****************
   972 ;; Defined at:
   973 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul8.c"
   974 ;; Parameters:    Size  Location     Type
   975 ;;  multiplier      1    wreg     unsigned char 
   976 ;;  multiplicand    1   13[BANK0 ] unsigned char 
   977 ;; Auto vars:     Size  Location     Type
   978 ;;  multiplier      1   16[BANK0 ] unsigned char 
   979 ;;  product         1   15[BANK0 ] unsigned char 
   980 ;; Return value:  Size  Location     Type
   981 ;;                  1    wreg      unsigned char 
   982 ;; Registers used:
   983 ;;		wreg, status,2, status,0
   984 ;; Tracked objects:
   985 ;;		On entry : 0/0
   986 ;;		On exit  : 0/0
   987 ;;		Unchanged: 0/0
   988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   989 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
   990 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
   991 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
   992 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
   993 ;;Total ram usage:        4 bytes
   994 ;; Hardware stack levels used:    1
   995 ;; Hardware stack levels required when called:    4
   996 ;; This function calls:
   997 ;;		Nothing
   998 ;; This function is called by:
   999 ;;		_initialize_sensors
  1000 ;;		_ISR
  1001 ;; This function uses a non-reentrant model
  1002 ;;
  1003                           
  1004                           
  1005                           ;psect for function ___bmul
  1006  02DA                     ___bmul:	
  1007                           
  1008                           ;incstack = 0
  1009                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1010                           ;___bmul@multiplier stored from wreg
  1011  02DA  0020               	movlb	0	; select bank0
  1012  02DB  00DB               	movwf	___bmul@multiplier
  1013  02DC  01DA               	clrf	___bmul@product
  1014  02DD                     l1029:	
  1015  02DD  1C5B               	btfss	___bmul@multiplier,0
  1016  02DE  2AE3               	goto	l1033
  1017  02DF  0858               	movf	___bmul@multiplicand,w
  1018  02E0  00D9               	movwf	??___bmul
  1019  02E1  0859               	movf	??___bmul,w
  1020  02E2  07DA               	addwf	___bmul@product,f
  1021  02E3                     l1033:	
  1022  02E3  1003               	clrc
  1023  02E4  0DD8               	rlf	___bmul@multiplicand,f
  1024  02E5  1003               	clrc
  1025  02E6  0CDB               	rrf	___bmul@multiplier,f
  1026  02E7  085B               	movf	___bmul@multiplier,w
  1027  02E8  1D03               	btfss	3,2
  1028  02E9  2ADD               	goto	l1029
  1029  02EA  085A               	movf	___bmul@product,w
  1030  02EB  0008               	return
  1031  02EC                     __end_of___bmul:	
  1032                           
  1033                           	psect	text3
  1034  0195                     __ptext3:	
  1035 ;; *************** function _initialize_PIC *****************
  1036 ;; Defined at:
  1037 ;;		line 136 in file "main.c"
  1038 ;; Parameters:    Size  Location     Type
  1039 ;;		None
  1040 ;; Auto vars:     Size  Location     Type
  1041 ;;		None
  1042 ;; Return value:  Size  Location     Type
  1043 ;;                  1    wreg      void 
  1044 ;; Registers used:
  1045 ;;		wreg, status,2
  1046 ;; Tracked objects:
  1047 ;;		On entry : 0/0
  1048 ;;		On exit  : 0/0
  1049 ;;		Unchanged: 0/0
  1050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1054 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1055 ;;Total ram usage:        0 bytes
  1056 ;; Hardware stack levels used:    1
  1057 ;; Hardware stack levels required when called:    4
  1058 ;; This function calls:
  1059 ;;		Nothing
  1060 ;; This function is called by:
  1061 ;;		_main
  1062 ;; This function uses a non-reentrant model
  1063 ;;
  1064                           
  1065                           
  1066                           ;psect for function _initialize_PIC
  1067  0195                     _initialize_PIC:	
  1068                           
  1069                           ;main.c: 142: OSCCON = 0b00111000;
  1070                           
  1071                           ;incstack = 0
  1072                           ; Regs used in _initialize_PIC: [wreg+status,2]
  1073  0195  3038               	movlw	56
  1074  0196  0021               	movlb	1	; select bank1
  1075  0197  0099               	movwf	25	;volatile
  1076                           
  1077                           ;main.c: 153: INTCON = 0b11001000;
  1078  0198  30C8               	movlw	200
  1079  0199  008B               	movwf	11	;volatile
  1080                           
  1081                           ;main.c: 156: TRISCbits.TRISC0 = 0;
  1082  019A  100E               	bcf	14,0	;volatile
  1083                           
  1084                           ;main.c: 157: TRISCbits.TRISC1 = 0;
  1085  019B  108E               	bcf	14,1	;volatile
  1086                           
  1087                           ;main.c: 158: TRISCbits.TRISC2 = 0;
  1088  019C  110E               	bcf	14,2	;volatile
  1089                           
  1090                           ;main.c: 159: TRISCbits.TRISC3 = 0;
  1091  019D  118E               	bcf	14,3	;volatile
  1092                           
  1093                           ;main.c: 160: LATC = 0;
  1094  019E  0022               	movlb	2	; select bank2
  1095  019F  018E               	clrf	14	;volatile
  1096                           
  1097                           ;main.c: 163: TRISAbits.TRISA0 = 1;
  1098  01A0  0021               	movlb	1	; select bank1
  1099  01A1  140C               	bsf	12,0	;volatile
  1100                           
  1101                           ;main.c: 164: ANSELAbits.ANSA0 = 1;
  1102  01A2  0023               	movlb	3	; select bank3
  1103  01A3  140C               	bsf	12,0	;volatile
  1104                           
  1105                           ;main.c: 167: TRISAbits.TRISA1 = 1;
  1106  01A4  0021               	movlb	1	; select bank1
  1107  01A5  148C               	bsf	12,1	;volatile
  1108                           
  1109                           ;main.c: 168: ANSELAbits.ANSA1 = 0;
  1110  01A6  0023               	movlb	3	; select bank3
  1111  01A7  108C               	bcf	12,1	;volatile
  1112                           
  1113                           ;main.c: 171: TRISAbits.TRISA2 = 1;
  1114  01A8  0021               	movlb	1	; select bank1
  1115  01A9  150C               	bsf	12,2	;volatile
  1116                           
  1117                           ;main.c: 172: ANSELAbits.ANSA2 = 0;
  1118  01AA  0023               	movlb	3	; select bank3
  1119  01AB  110C               	bcf	12,2	;volatile
  1120                           
  1121                           ;main.c: 175: TRISAbits.TRISA3 = 1;
  1122  01AC  0021               	movlb	1	; select bank1
  1123  01AD  158C               	bsf	12,3	;volatile
  1124                           
  1125                           ;main.c: 178: TRISAbits.TRISA4 = 1;
  1126  01AE  160C               	bsf	12,4	;volatile
  1127                           
  1128                           ;main.c: 179: ANSELAbits.ANSA4 = 0;
  1129  01AF  0023               	movlb	3	; select bank3
  1130  01B0  120C               	bcf	12,4	;volatile
  1131                           
  1132                           ;main.c: 182: TRISAbits.TRISA5 = 1;
  1133  01B1  0021               	movlb	1	; select bank1
  1134  01B2  168C               	bsf	12,5	;volatile
  1135                           
  1136                           ;main.c: 185: IOCANbits.IOCAN1 = 1;
  1137  01B3  0027               	movlb	7	; select bank7
  1138  01B4  1492               	bsf	18,1	;volatile
  1139                           
  1140                           ;main.c: 186: IOCANbits.IOCAN2 = 1;
  1141  01B5  1512               	bsf	18,2	;volatile
  1142                           
  1143                           ;main.c: 187: IOCANbits.IOCAN4 = 1;
  1144  01B6  1612               	bsf	18,4	;volatile
  1145                           
  1146                           ;main.c: 190: IOCAPbits.IOCAP3 = 1;
  1147  01B7  1591               	bsf	17,3	;volatile
  1148                           
  1149                           ;main.c: 191: IOCAPbits.IOCAP5 = 1;
  1150  01B8  1691               	bsf	17,5	;volatile
  1151                           
  1152                           ;main.c: 198: ADCON0 = 0b00000001;
  1153  01B9  3001               	movlw	1
  1154  01BA  0021               	movlb	1	; select bank1
  1155  01BB  009D               	movwf	29	;volatile
  1156                           
  1157                           ;main.c: 205: ADCON1 = 0b10000000;
  1158  01BC  3080               	movlw	128
  1159  01BD  009E               	movwf	30	;volatile
  1160                           
  1161                           ;main.c: 207: PIR1bits.ADIF = 0;
  1162  01BE  0020               	movlb	0	; select bank0
  1163  01BF  1311               	bcf	17,6	;volatile
  1164                           
  1165                           ;main.c: 208: PIE1bits.ADIE = 1;
  1166  01C0  0021               	movlb	1	; select bank1
  1167  01C1  1711               	bsf	17,6	;volatile
  1168                           
  1169                           ;main.c: 211: T2CON = 0b01111111;
  1170  01C2  307F               	movlw	127
  1171  01C3  0020               	movlb	0	; select bank0
  1172  01C4  009C               	movwf	28	;volatile
  1173                           
  1174                           ;main.c: 212: PIE1bits.TMR2IE = 1;
  1175  01C5  0021               	movlb	1	; select bank1
  1176  01C6  1491               	bsf	17,1	;volatile
  1177                           
  1178                           ;main.c: 219: T6CON = 0b00100000;
  1179  01C7  3020               	movlw	32
  1180  01C8  0028               	movlb	8	; select bank8
  1181  01C9  009E               	movwf	30	;volatile
  1182                           
  1183                           ;main.c: 220: PR6 = 125;
  1184  01CA  307D               	movlw	125
  1185  01CB  009D               	movwf	29	;volatile
  1186                           
  1187                           ;main.c: 221: PIE3bits.TMR6IE = 1;
  1188  01CC  0021               	movlb	1	; select bank1
  1189  01CD  1593               	bsf	19,3	;volatile
  1190                           
  1191                           ;main.c: 224: APFCON0bits.RXDTSEL = 1;
  1192  01CE  0022               	movlb	2	; select bank2
  1193  01CF  179D               	bsf	29,7	;volatile
  1194                           
  1195                           ;main.c: 225: APFCON0bits.TXCKSEL = 1;
  1196  01D0  151D               	bsf	29,2	;volatile
  1197                           
  1198                           ;main.c: 227: BRG16 = 1;
  1199  01D1  0023               	movlb	3	; select bank3
  1200  01D2  159F               	bsf	31,3	;volatile
  1201                           
  1202                           ;main.c: 228: TXSTAbits.BRGH = 1;
  1203  01D3  151E               	bsf	30,2	;volatile
  1204                           
  1205                           ;main.c: 229: SPBRG = 12;
  1206  01D4  3000               	movlw	0
  1207  01D5  009C               	movwf	28	;volatile
  1208  01D6  300C               	movlw	12
  1209  01D7  009B               	movwf	27	;volatile
  1210                           
  1211                           ;main.c: 231: TXSTAbits.SYNC = 0;
  1212  01D8  121E               	bcf	30,4	;volatile
  1213                           
  1214                           ;main.c: 232: RCSTAbits.SPEN = 1;
  1215  01D9  179D               	bsf	29,7	;volatile
  1216                           
  1217                           ;main.c: 233: TXSTAbits.TXEN = 1;
  1218  01DA  169E               	bsf	30,5	;volatile
  1219                           
  1220                           ;main.c: 234: RCSTAbits.CREN = 1;
  1221  01DB  161D               	bsf	29,4	;volatile
  1222                           
  1223                           ;main.c: 236: PIE1bits.RCIE = 1;
  1224  01DC  0021               	movlb	1	; select bank1
  1225  01DD  1691               	bsf	17,5	;volatile
  1226  01DE  0008               	return
  1227  01DF                     __end_of_initialize_PIC:	
  1228                           
  1229                           	psect	text4
  1230  0126                     __ptext4:	
  1231 ;; *************** function _autoBaud *****************
  1232 ;; Defined at:
  1233 ;;		line 254 in file "main.c"
  1234 ;; Parameters:    Size  Location     Type
  1235 ;;		None
  1236 ;; Auto vars:     Size  Location     Type
  1237 ;;  index           2   17[BANK0 ] int 
  1238 ;;  sync_count      2   15[BANK0 ] int 
  1239 ;;  discard         1   14[BANK0 ] unsigned char 
  1240 ;; Return value:  Size  Location     Type
  1241 ;;                  1    wreg      void 
  1242 ;; Registers used:
  1243 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1244 ;; Tracked objects:
  1245 ;;		On entry : 0/0
  1246 ;;		On exit  : 0/0
  1247 ;;		Unchanged: 0/0
  1248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1250 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1251 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1252 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1253 ;;Total ram usage:        6 bytes
  1254 ;; Hardware stack levels used:    1
  1255 ;; Hardware stack levels required when called:    4
  1256 ;; This function calls:
  1257 ;;		Nothing
  1258 ;; This function is called by:
  1259 ;;		_main
  1260 ;; This function uses a non-reentrant model
  1261 ;;
  1262                           
  1263                           
  1264                           ;psect for function _autoBaud
  1265  0126                     _autoBaud:	
  1266  0126  298B               	goto	l1165
  1267  0127                     l134:	
  1268                           ;main.c: 263: {
  1269                           ;main.c: 264: case 0:
  1270                           
  1271                           ;main.c: 262: switch(index)
  1272                           
  1273                           ;main.c: 258: int sync_count;
  1274                           ;main.c: 260: try:
  1275                           
  1276                           ;main.c: 256: char discard;
  1277                           ;main.c: 257: int index = 0;
  1278                           
  1279                           ;incstack = 0
  1280                           ; Regs used in _autoBaud: [wreg-fsr0h+status,2+status,0]
  1281                           
  1282                           
  1283                           ;main.c: 265: BAUDCONbits.BRG16 = 0;
  1284  0127  0023               	movlb	3	; select bank3
  1285  0128  119F               	bcf	31,3	;volatile
  1286  0129  292F               	goto	L1
  1287  012A                     l136:	
  1288                           ;main.c: 268: case 1:
  1289                           
  1290                           ;main.c: 267: break;
  1291                           
  1292                           ;main.c: 266: TXSTAbits.BRGH = 0;
  1293                           
  1294                           
  1295                           ;main.c: 269: BAUDCONbits.BRG16 = 0;
  1296  012A  0023               	movlb	3	; select bank3
  1297  012B  119F               	bcf	31,3	;volatile
  1298  012C  2933               	goto	L2
  1299  012D                     l137:	
  1300                           ;main.c: 272: case 2:
  1301                           
  1302                           ;main.c: 271: break;
  1303                           
  1304                           ;main.c: 270: TXSTAbits.BRGH = 1;
  1305                           
  1306                           
  1307                           ;main.c: 273: BAUDCONbits.BRG16 = 1;
  1308  012D  0023               	movlb	3	; select bank3
  1309  012E  159F               	bsf	31,3	;volatile
  1310  012F                     L1:	
  1311                           
  1312                           ;main.c: 274: TXSTAbits.BRGH = 0;
  1313  012F  111E               	bcf	30,2	;volatile
  1314                           
  1315                           ;main.c: 275: break;
  1316  0130  2934               	goto	l135
  1317  0131                     l138:	
  1318                           ;main.c: 276: case 3:
  1319                           
  1320                           
  1321                           ;main.c: 277: BAUDCONbits.BRG16 = 1;
  1322  0131  0023               	movlb	3	; select bank3
  1323  0132  159F               	bsf	31,3	;volatile
  1324  0133                     L2:	
  1325                           
  1326                           ;main.c: 278: TXSTAbits.BRGH = 1;
  1327  0133  151E               	bsf	30,2	;volatile
  1328  0134                     l135:	
  1329                           ;main.c: 280: }
  1330                           
  1331                           ;main.c: 279: break;
  1332                           
  1333                           
  1334                           ;main.c: 282: BAUDCONbits.ABDEN = 1;
  1335  0134  0023               	movlb	3	; select bank3
  1336  0135  141F               	bsf	31,0	;volatile
  1337  0136                     l139:	
  1338                           ;main.c: 283: while(!PIR1bits.RCIF);
  1339                           
  1340  0136  0020               	movlb	0	; select bank0
  1341  0137  1E91               	btfss	17,5	;volatile
  1342  0138  2936               	goto	l139
  1343                           
  1344                           ;main.c: 284: discard = RCREG;
  1345  0139  0023               	movlb	3	; select bank3
  1346  013A  0819               	movf	25,w	;volatile
  1347  013B  0020               	movlb	0	; select bank0
  1348  013C  00D8               	movwf	??_autoBaud
  1349  013D  0858               	movf	??_autoBaud,w
  1350  013E  00D9               	movwf	autoBaud@discard
  1351                           
  1352                           ;main.c: 286: if(SPBRG != 0)
  1353  013F  0023               	movlb	3	; select bank3
  1354  0140  081B               	movf	27,w	;volatile
  1355  0141  041C               	iorwf	28,w	;volatile
  1356  0142  1903               	btfsc	3,2
  1357  0143  2948               	goto	l1147
  1358                           
  1359                           ;main.c: 287: {
  1360                           ;main.c: 288: --SPBRG;
  1361  0144  3001               	movlw	1
  1362  0145  029B               	subwf	27,f	;volatile
  1363  0146  3000               	movlw	0
  1364  0147  3B9C               	subwfb	28,f	;volatile
  1365  0148                     l1147:	
  1366                           
  1367                           ;main.c: 289: }
  1368                           ;main.c: 292: if(BAUDCONbits.ABDOVF)
  1369  0148  1F9F               	btfss	31,7	;volatile
  1370  0149  2960               	goto	l143
  1371                           
  1372                           ;main.c: 293: {
  1373                           ;main.c: 294: BAUDCONbits.ABDOVF = 0;
  1374  014A  139F               	bcf	31,7	;volatile
  1375  014B                     l1139:	
  1376                           
  1377                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1378                           ; Switch size 1, requested type "space"
  1379                           ; Number of cases is 1, Range of values is 0 to 0
  1380                           ; switch strategies available:
  1381                           ; Name         Instructions Cycles
  1382                           ; simple_byte            4     3 (average)
  1383                           ; direct_byte            8     6 (fixed)
  1384                           ; jumptable            260     6 (fixed)
  1385                           ;	Chosen strategy is simple_byte
  1386  014B  0020               	movlb	0	; select bank0
  1387  014C  085D               	movf	autoBaud@index+1,w
  1388  014D  3A00               	xorlw	0	; case 0
  1389  014E  1903               	skipnz
  1390  014F  2951               	goto	l1323
  1391  0150  2934               	goto	l135
  1392  0151                     l1323:	
  1393                           
  1394                           ; Switch size 1, requested type "space"
  1395                           ; Number of cases is 4, Range of values is 0 to 3
  1396                           ; switch strategies available:
  1397                           ; Name         Instructions Cycles
  1398                           ; simple_byte           13     7 (average)
  1399                           ; direct_byte           14     6 (fixed)
  1400                           ; jumptable            260     6 (fixed)
  1401                           ;	Chosen strategy is simple_byte
  1402  0151  085C               	movf	autoBaud@index,w
  1403  0152  3A00               	xorlw	0	; case 0
  1404  0153  1903               	skipnz
  1405  0154  2927               	goto	l134
  1406  0155  3A01               	xorlw	1	; case 1
  1407  0156  1903               	skipnz
  1408  0157  292A               	goto	l136
  1409  0158  3A03               	xorlw	3	; case 2
  1410  0159  1903               	skipnz
  1411  015A  292D               	goto	l137
  1412  015B  3A01               	xorlw	1	; case 3
  1413  015C  1903               	skipnz
  1414  015D  2931               	goto	l138
  1415  015E  2934               	goto	l135
  1416                           
  1417                           ;main.c: 295: goto try;
  1418  015F  2934               	goto	l135
  1419  0160                     l143:	
  1420                           
  1421                           ;main.c: 296: }
  1422                           ;main.c: 297: if(!BAUDCONbits.BRG16 && SPBRGH)
  1423  0160  199F               	btfsc	31,3	;volatile
  1424  0161  2965               	goto	l1155
  1425  0162  081C               	movf	28,w	;volatile
  1426  0163  1D03               	btfss	3,2
  1427  0164  294B               	goto	l1139
  1428  0165                     l1155:	
  1429                           ;main.c: 298: {
  1430                           ;main.c: 299: goto try;
  1431                           
  1432                           
  1433                           ;main.c: 300: }
  1434                           ;main.c: 303: for (sync_count=0; sync_count < 2; ++sync_count)
  1435  0165  0020               	movlb	0	; select bank0
  1436  0166  01DA               	clrf	autoBaud@sync_count
  1437  0167  01DB               	clrf	autoBaud@sync_count+1
  1438  0168                     L3:	
  1439  0168  085B               	movf	autoBaud@sync_count+1,w
  1440  0169  3A80               	xorlw	128
  1441  016A  00D8               	movwf	??_autoBaud
  1442  016B  3080               	movlw	128
  1443  016C  0258               	subwf	??_autoBaud,w
  1444  016D  1D03               	skipz
  1445  016E  2971               	goto	u585
  1446  016F  3002               	movlw	2
  1447  0170  025A               	subwf	autoBaud@sync_count,w
  1448  0171                     u585:	
  1449  0171  1803               	btfsc	3,0
  1450  0172  0008               	return
  1451  0173                     l147:	
  1452                           ;main.c: 304: {
  1453                           ;main.c: 305: while(!PIR1bits.RCIF);
  1454                           
  1455  0173  0020               	movlb	0	; select bank0
  1456  0174  1E91               	btfss	17,5	;volatile
  1457  0175  2973               	goto	l147
  1458                           
  1459                           ;main.c: 306: if(RCREG != 'U')
  1460  0176  3055               	movlw	85
  1461  0177  0023               	movlb	3	; select bank3
  1462  0178  0619               	xorwf	25,w	;volatile
  1463  0179  1903               	btfsc	3,2
  1464  017A  298F               	goto	l1167
  1465                           
  1466                           ;main.c: 307: {
  1467                           ;main.c: 308: ++index;
  1468  017B  3001               	movlw	1
  1469  017C  0020               	movlb	0	; select bank0
  1470  017D  07DC               	addwf	autoBaud@index,f
  1471  017E  3000               	movlw	0
  1472  017F  3DDD               	addwfc	autoBaud@index+1,f
  1473                           
  1474                           ;main.c: 309: if(index > 3)
  1475  0180  085D               	movf	autoBaud@index+1,w
  1476  0181  3A80               	xorlw	128
  1477  0182  00D8               	movwf	??_autoBaud
  1478  0183  3080               	movlw	128
  1479  0184  0258               	subwf	??_autoBaud,w
  1480  0185  1D03               	skipz
  1481  0186  2989               	goto	u615
  1482  0187  3004               	movlw	4
  1483  0188  025C               	subwf	autoBaud@index,w
  1484  0189                     u615:	
  1485  0189  1C03               	skipc
  1486  018A  294B               	goto	l1139
  1487  018B                     l1165:	
  1488                           
  1489                           ;main.c: 310: index = 0;
  1490  018B  0020               	movlb	0	; select bank0
  1491  018C  01DC               	clrf	autoBaud@index
  1492  018D  01DD               	clrf	autoBaud@index+1
  1493                           
  1494                           ;main.c: 311: goto try;
  1495  018E  294B               	goto	l1139
  1496  018F                     l1167:	
  1497  018F  3001               	movlw	1
  1498  0190  0020               	movlb	0	; select bank0
  1499  0191  07DA               	addwf	autoBaud@sync_count,f
  1500  0192  3000               	movlw	0
  1501  0193  3DDB               	addwfc	autoBaud@sync_count+1,f
  1502  0194  2968               	goto	L3
  1503  0195                     __end_of_autoBaud:	
  1504                           
  1505                           	psect	text5
  1506  0274                     __ptext5:	
  1507 ;; *************** function _UART_write_text *****************
  1508 ;; Defined at:
  1509 ;;		line 127 in file "main.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;  text            2   14[BANK0 ] PTR unsigned char 
  1512 ;;		 -> STR_1(2), 
  1513 ;; Auto vars:     Size  Location     Type
  1514 ;;  count           2   17[BANK0 ] int 
  1515 ;; Return value:  Size  Location     Type
  1516 ;;                  1    wreg      void 
  1517 ;; Registers used:
  1518 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1519 ;; Tracked objects:
  1520 ;;		On entry : 0/0
  1521 ;;		On exit  : 0/0
  1522 ;;		Unchanged: 0/0
  1523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1524 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1525 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1526 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1527 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1528 ;;Total ram usage:        5 bytes
  1529 ;; Hardware stack levels used:    1
  1530 ;; Hardware stack levels required when called:    5
  1531 ;; This function calls:
  1532 ;;		_UART_write
  1533 ;; This function is called by:
  1534 ;;		_main
  1535 ;; This function uses a non-reentrant model
  1536 ;;
  1537                           
  1538                           
  1539                           ;psect for function _UART_write_text
  1540  0274                     _UART_write_text:	
  1541                           
  1542                           ;main.c: 129: int count;
  1543                           ;main.c: 130: for(count = 0; text[count]!='\0'; count++)
  1544                           
  1545                           ;incstack = 0
  1546                           ; Regs used in _UART_write_text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1547  0274  0020               	movlb	0	; select bank0
  1548  0275  01DC               	clrf	UART_write_text@count
  1549  0276  01DD               	clrf	UART_write_text@count+1
  1550  0277                     l1179:	
  1551  0277  0859               	movf	UART_write_text@text,w
  1552  0278  075C               	addwf	UART_write_text@count,w
  1553  0279  0084               	movwf	4
  1554  027A  085A               	movf	UART_write_text@text+1,w
  1555  027B  3D5D               	addwfc	UART_write_text@count+1,w
  1556  027C  0085               	movwf	5
  1557  027D  0012               	moviw fsr0++
  1558  027E  1903               	btfsc	3,2
  1559  027F  0008               	return
  1560                           
  1561                           ;main.c: 131: {
  1562                           ;main.c: 132: UART_write(text[count]);
  1563  0280  0859               	movf	UART_write_text@text,w
  1564  0281  075C               	addwf	UART_write_text@count,w
  1565  0282  0084               	movwf	4
  1566  0283  085A               	movf	UART_write_text@text+1,w
  1567  0284  3D5D               	addwfc	UART_write_text@count+1,w
  1568  0285  0085               	movwf	5
  1569  0286  0800               	movf	0,w	;code access
  1570  0287  3182  22FD  3182   	fcall	_UART_write
  1571  028A  3001               	movlw	1
  1572  028B  0020               	movlb	0	; select bank0
  1573  028C  07DC               	addwf	UART_write_text@count,f
  1574  028D  3000               	movlw	0
  1575  028E  3DDD               	addwfc	UART_write_text@count+1,f
  1576  028F  2A77               	goto	l1179
  1577  0290                     __end_of_UART_write_text:	
  1578                           
  1579                           	psect	text6
  1580  02FD                     __ptext6:	
  1581 ;; *************** function _UART_write *****************
  1582 ;; Defined at:
  1583 ;;		line 121 in file "main.c"
  1584 ;; Parameters:    Size  Location     Type
  1585 ;;  data            1    wreg     unsigned char 
  1586 ;; Auto vars:     Size  Location     Type
  1587 ;;  data            1   13[BANK0 ] unsigned char 
  1588 ;; Return value:  Size  Location     Type
  1589 ;;                  1    wreg      void 
  1590 ;; Registers used:
  1591 ;;		wreg
  1592 ;; Tracked objects:
  1593 ;;		On entry : 0/0
  1594 ;;		On exit  : 0/0
  1595 ;;		Unchanged: 0/0
  1596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1598 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1600 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1601 ;;Total ram usage:        1 bytes
  1602 ;; Hardware stack levels used:    1
  1603 ;; Hardware stack levels required when called:    4
  1604 ;; This function calls:
  1605 ;;		Nothing
  1606 ;; This function is called by:
  1607 ;;		_UART_write_text
  1608 ;; This function uses a non-reentrant model
  1609 ;;
  1610                           
  1611                           
  1612                           ;psect for function _UART_write
  1613  02FD                     _UART_write:	
  1614                           
  1615                           ;incstack = 0
  1616                           ; Regs used in _UART_write: [wreg]
  1617                           ;UART_write@data stored from wreg
  1618  02FD  0020               	movlb	0	; select bank0
  1619  02FE  00D8               	movwf	UART_write@data
  1620  02FF                     l112:	
  1621                           ;main.c: 123: while(!TRMT);
  1622                           
  1623  02FF  0023               	movlb	3	; select bank3
  1624  0300  1C9E               	btfss	30,1	;volatile
  1625  0301  2AFF               	goto	l112
  1626                           
  1627                           ;main.c: 124: TXREG = data;
  1628  0302  0020               	movlb	0	; select bank0
  1629  0303  0858               	movf	UART_write@data,w
  1630  0304  0023               	movlb	3	; select bank3
  1631  0305  009A               	movwf	26	;volatile
  1632  0306  0008               	return
  1633  0307                     __end_of_UART_write:	
  1634                           
  1635                           	psect	intentry
  1636  0004                     __pintentry:	
  1637 ;; *************** function _ISR *****************
  1638 ;; Defined at:
  1639 ;;		line 317 in file "main.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;		None
  1642 ;; Auto vars:     Size  Location     Type
  1643 ;;  i               2   11[BANK0 ] int 
  1644 ;;  x               1    8[BANK0 ] unsigned char 
  1645 ;;  shouldDeboun    2    9[BANK0 ] int 
  1646 ;; Return value:  Size  Location     Type
  1647 ;;                  1    wreg      void 
  1648 ;; Registers used:
  1649 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1650 ;; Tracked objects:
  1651 ;;		On entry : 0/0
  1652 ;;		On exit  : 0/0
  1653 ;;		Unchanged: 0/0
  1654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1656 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1657 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1658 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1659 ;;Total ram usage:        7 bytes
  1660 ;; Hardware stack levels used:    1
  1661 ;; Hardware stack levels required when called:    3
  1662 ;; This function calls:
  1663 ;;		_default_handler
  1664 ;;		_post_debounce
  1665 ;;		_pre_debounce
  1666 ;;		_switch_handler
  1667 ;;		_temperature_handler
  1668 ;;		i1___bmul
  1669 ;; This function is called by:
  1670 ;;		Interrupt level 1
  1671 ;; This function uses a non-reentrant model
  1672 ;;
  1673                           
  1674  0004                     _ISR:	
  1675                           
  1676                           ;incstack = 0
  1677  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  1678                           
  1679                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1680  0005  3180               	pagesel	$
  1681  0006  0020               	movlb	0	; select bank0
  1682  0007  087F               	movf	127,w
  1683  0008  00D2               	movwf	??_ISR+1
  1684                           
  1685                           ;main.c: 318: int shouldDebounce = 0;
  1686  0009  01D4               	clrf	ISR@shouldDebounce
  1687  000A  01D5               	clrf	ISR@shouldDebounce+1
  1688                           
  1689                           ;main.c: 321: if(PIR3bits.TMR6IF){
  1690  000B  1D93               	btfss	19,3	;volatile
  1691  000C  283C               	goto	i1l155
  1692                           
  1693                           ;main.c: 322: T6CONbits.TMR6ON = 0;
  1694  000D  0028               	movlb	8	; select bank8
  1695  000E  111E               	bcf	30,2	;volatile
  1696                           
  1697                           ;main.c: 324: for(int i = 0; i < 6; ++i){
  1698  000F  0020               	movlb	0	; select bank0
  1699  0010  01D6               	clrf	ISR@i
  1700  0011  01D7               	clrf	ISR@i+1
  1701  0012  0857               	movf	ISR@i+1,w
  1702  0013  3A80               	xorlw	128
  1703  0014  00D1               	movwf	??_ISR
  1704  0015  3080               	movlw	128
  1705  0016  0251               	subwf	??_ISR,w
  1706  0017  1D03               	skipz
  1707  0018  281B               	goto	u72_25
  1708  0019  3006               	movlw	6
  1709  001A  0256               	subwf	ISR@i,w
  1710  001B                     u72_25:	
  1711  001B  1803               	btfsc	3,0
  1712  001C  283A               	goto	i1l157
  1713  001D                     i1l1239:	
  1714                           
  1715                           ;main.c: 325: post_debounce(&sensors[i]);
  1716  001D  3007               	movlw	7
  1717  001E  0020               	movlb	0	; select bank0
  1718  001F  00D1               	movwf	??_ISR
  1719  0020  0851               	movf	??_ISR,w
  1720  0021  00F0               	movwf	i1___bmul@multiplicand
  1721  0022  0856               	movf	ISR@i,w
  1722  0023  3182  22EC  3180   	fcall	i1___bmul
  1723  0026  3E21               	addlw	(low (_sensors| 0))& (0+255)
  1724  0027  3181  21DF  3180   	fcall	_post_debounce
  1725  002A  3001               	movlw	1
  1726  002B  0020               	movlb	0	; select bank0
  1727  002C  07D6               	addwf	ISR@i,f
  1728  002D  3000               	movlw	0
  1729  002E  3DD7               	addwfc	ISR@i+1,f
  1730  002F  0857               	movf	ISR@i+1,w
  1731  0030  3A80               	xorlw	128
  1732  0031  00D1               	movwf	??_ISR
  1733  0032  3080               	movlw	128
  1734  0033  0251               	subwf	??_ISR,w
  1735  0034  1D03               	skipz
  1736  0035  2838               	goto	u73_25
  1737  0036  3006               	movlw	6
  1738  0037  0256               	subwf	ISR@i,w
  1739  0038                     u73_25:	
  1740  0038  1C03               	skipc
  1741  0039  281D               	goto	i1l1239
  1742  003A                     i1l157:	
  1743                           
  1744                           ;main.c: 326: }
  1745                           ;main.c: 328: TMR6IF = 0;
  1746  003A  0020               	movlb	0	; select bank0
  1747  003B  1193               	bcf	19,3	;volatile
  1748  003C                     i1l155:	
  1749                           
  1750                           ;main.c: 329: }
  1751                           ;main.c: 333: if(ADIF){
  1752  003C  1F11               	btfss	17,6	;volatile
  1753  003D  284F               	goto	i1l1251
  1754                           
  1755                           ;main.c: 334: sensors[0].handler(&sensors[0]);
  1756  003E  3021               	movlw	(low (_sensors| 0))& (0+255)
  1757  003F  00D1               	movwf	??_ISR
  1758  0040  0851               	movf	??_ISR,w
  1759  0041  00FC               	movwf	switch_handler@sensor
  1760  0042  3004               	movlw	4
  1761  0043  3E21               	addlw	(low (_sensors| 0))& (0+255)
  1762  0044  0086               	movwf	6
  1763  0045  0187               	clrf	7
  1764  0046  3F41               	moviw [1]fsr1
  1765  0047  008A               	movwf	10
  1766  0048  3F40               	moviw [0]fsr1
  1767  0049  000A               	callw
  1768  004A  3180               	pagesel	$
  1769                           
  1770                           ;main.c: 336: ADCON0bits.GO = 0;
  1771  004B  0021               	movlb	1	; select bank1
  1772  004C  109D               	bcf	29,1	;volatile
  1773                           
  1774                           ;main.c: 337: ADIF = 0;
  1775  004D  0020               	movlb	0	; select bank0
  1776  004E  1311               	bcf	17,6	;volatile
  1777  004F                     i1l1251:	
  1778                           
  1779                           ;main.c: 338: }
  1780                           ;main.c: 342: if(PIR1bits.RCIF){
  1781  004F  1E91               	btfss	17,5	;volatile
  1782  0050  2858               	goto	i1l1257
  1783                           
  1784                           ;main.c: 343: char x = RCREG;
  1785  0051  0023               	movlb	3	; select bank3
  1786  0052  0819               	movf	25,w	;volatile
  1787  0053  0020               	movlb	0	; select bank0
  1788  0054  00D1               	movwf	??_ISR
  1789  0055  0851               	movf	??_ISR,w
  1790  0056  00D3               	movwf	ISR@x
  1791                           
  1792                           ;main.c: 344: PIR1bits.RCIF = 0;
  1793  0057  1291               	bcf	17,5	;volatile
  1794  0058                     i1l1257:	
  1795                           
  1796                           ;main.c: 345: }
  1797                           ;main.c: 348: if(PIR1bits.TMR2IF){
  1798  0058  1C91               	btfss	17,1	;volatile
  1799  0059  285E               	goto	i1l160
  1800                           
  1801                           ;main.c: 349: ADCON0bits.GO = 1;
  1802  005A  0021               	movlb	1	; select bank1
  1803  005B  149D               	bsf	29,1	;volatile
  1804                           
  1805                           ;main.c: 350: PIR1bits.TMR2IF = 0;
  1806  005C  0020               	movlb	0	; select bank0
  1807  005D  1091               	bcf	17,1	;volatile
  1808  005E                     i1l160:	
  1809                           
  1810                           ;main.c: 351: }
  1811                           ;main.c: 354: if(IOCAFbits.IOCAF1){
  1812  005E  0027               	movlb	7	; select bank7
  1813  005F  1C93               	btfss	19,1	;volatile
  1814  0060  286C               	goto	i1l1267
  1815                           
  1816                           ;main.c: 355: shouldDebounce = 1;
  1817  0061  3001               	movlw	1
  1818  0062  0020               	movlb	0	; select bank0
  1819  0063  00D4               	movwf	ISR@shouldDebounce
  1820  0064  3000               	movlw	0
  1821  0065  00D5               	movwf	ISR@shouldDebounce+1
  1822                           
  1823                           ;main.c: 356: pre_debounce(&sensors[1]);
  1824  0066  3028               	movlw	(low ((_sensors| 0+7)))& (0+255)
  1825  0067  3182  22C5  3180   	fcall	_pre_debounce
  1826                           
  1827                           ;main.c: 357: IOCAFbits.IOCAF1 = 0;
  1828  006A  0027               	movlb	7	; select bank7
  1829  006B  1093               	bcf	19,1	;volatile
  1830  006C                     i1l1267:	
  1831                           
  1832                           ;main.c: 358: }
  1833                           ;main.c: 361: if(IOCAFbits.IOCAF2){
  1834  006C  1D13               	btfss	19,2	;volatile
  1835  006D  2879               	goto	i1l1275
  1836                           
  1837                           ;main.c: 362: shouldDebounce = 1;
  1838  006E  3001               	movlw	1
  1839  006F  0020               	movlb	0	; select bank0
  1840  0070  00D4               	movwf	ISR@shouldDebounce
  1841  0071  3000               	movlw	0
  1842  0072  00D5               	movwf	ISR@shouldDebounce+1
  1843                           
  1844                           ;main.c: 363: pre_debounce(&sensors[2]);
  1845  0073  302F               	movlw	(low ((_sensors| 0+14)))& (0+255)
  1846  0074  3182  22C5  3180   	fcall	_pre_debounce
  1847                           
  1848                           ;main.c: 364: IOCAFbits.IOCAF2 = 0;
  1849  0077  0027               	movlb	7	; select bank7
  1850  0078  1113               	bcf	19,2	;volatile
  1851  0079                     i1l1275:	
  1852                           
  1853                           ;main.c: 365: }
  1854                           ;main.c: 368: if(IOCAFbits.IOCAF3){
  1855  0079  1D93               	btfss	19,3	;volatile
  1856  007A  2886               	goto	i1l1283
  1857                           
  1858                           ;main.c: 369: shouldDebounce = 1;
  1859  007B  3001               	movlw	1
  1860  007C  0020               	movlb	0	; select bank0
  1861  007D  00D4               	movwf	ISR@shouldDebounce
  1862  007E  3000               	movlw	0
  1863  007F  00D5               	movwf	ISR@shouldDebounce+1
  1864                           
  1865                           ;main.c: 370: pre_debounce(&sensors[3]);
  1866  0080  3036               	movlw	(low ((_sensors| 0+21)))& (0+255)
  1867  0081  3182  22C5  3180   	fcall	_pre_debounce
  1868                           
  1869                           ;main.c: 371: IOCAFbits.IOCAF3 = 0;
  1870  0084  0027               	movlb	7	; select bank7
  1871  0085  1193               	bcf	19,3	;volatile
  1872  0086                     i1l1283:	
  1873                           
  1874                           ;main.c: 372: }
  1875                           ;main.c: 375: if(IOCAFbits.IOCAF4){
  1876  0086  1E13               	btfss	19,4	;volatile
  1877  0087  2893               	goto	i1l1291
  1878                           
  1879                           ;main.c: 376: shouldDebounce = 1;
  1880  0088  3001               	movlw	1
  1881  0089  0020               	movlb	0	; select bank0
  1882  008A  00D4               	movwf	ISR@shouldDebounce
  1883  008B  3000               	movlw	0
  1884  008C  00D5               	movwf	ISR@shouldDebounce+1
  1885                           
  1886                           ;main.c: 377: pre_debounce(&sensors[4]);
  1887  008D  303D               	movlw	(low ((_sensors| 0+28)))& (0+255)
  1888  008E  3182  22C5  3180   	fcall	_pre_debounce
  1889                           
  1890                           ;main.c: 378: IOCAFbits.IOCAF4 = 0;
  1891  0091  0027               	movlb	7	; select bank7
  1892  0092  1213               	bcf	19,4	;volatile
  1893  0093                     i1l1291:	
  1894                           
  1895                           ;main.c: 379: }
  1896                           ;main.c: 382: if(IOCAFbits.IOCAF5){
  1897  0093  1E93               	btfss	19,5	;volatile
  1898  0094  289F               	goto	i1l1299
  1899                           
  1900                           ;main.c: 383: shouldDebounce = 1;
  1901  0095  3001               	movlw	1
  1902  0096  0020               	movlb	0	; select bank0
  1903  0097  00D4               	movwf	ISR@shouldDebounce
  1904  0098  3000               	movlw	0
  1905  0099  00D5               	movwf	ISR@shouldDebounce+1
  1906                           
  1907                           ;main.c: 384: pre_debounce(&sensors[5]);
  1908  009A  3044               	movlw	(low ((_sensors| 0+35)))& (0+255)
  1909  009B  3182  22C5         	fcall	_pre_debounce
  1910                           
  1911                           ;main.c: 385: IOCAFbits.IOCAF5 = 0;
  1912  009D  0027               	movlb	7	; select bank7
  1913  009E  1293               	bcf	19,5	;volatile
  1914  009F                     i1l1299:	
  1915                           
  1916                           ;main.c: 386: }
  1917                           ;main.c: 388: if(shouldDebounce){
  1918  009F  0020               	movlb	0	; select bank0
  1919  00A0  0854               	movf	ISR@shouldDebounce,w
  1920  00A1  0455               	iorwf	ISR@shouldDebounce+1,w
  1921                           
  1922                           ;main.c: 389: T6CONbits.TMR6ON = 1;
  1923  00A2  0028               	movlb	8	; select bank8
  1924  00A3  1D03               	btfss	3,2
  1925  00A4  151E               	bsf	30,2	;volatile
  1926  00A5  0020               	movlb	0	; select bank0
  1927  00A6  0852               	movf	??_ISR+1,w
  1928  00A7  00FF               	movwf	127
  1929  00A8  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  1930  00A9  0009               	retfie
  1931  00AA                     __end_of_ISR:	
  1932                           
  1933                           	psect	text8
  1934  02EC                     __ptext8:	
  1935 ;; *************** function i1___bmul *****************
  1936 ;; Defined at:
  1937 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul8.c"
  1938 ;; Parameters:    Size  Location     Type
  1939 ;;  multiplier      1    wreg     unsigned char 
  1940 ;;  multiplicand    1    0[COMMON] unsigned char 
  1941 ;; Auto vars:     Size  Location     Type
  1942 ;;  multiplier      1    2[COMMON] unsigned char 
  1943 ;;  __bmul          1    3[COMMON] unsigned char 
  1944 ;; Return value:  Size  Location     Type
  1945 ;;                  1    wreg      unsigned char 
  1946 ;; Registers used:
  1947 ;;		wreg, status,2, status,0
  1948 ;; Tracked objects:
  1949 ;;		On entry : 0/0
  1950 ;;		On exit  : 0/0
  1951 ;;		Unchanged: 0/0
  1952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1953 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1954 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1955 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1956 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1957 ;;Total ram usage:        4 bytes
  1958 ;; Hardware stack levels used:    1
  1959 ;; This function calls:
  1960 ;;		Nothing
  1961 ;; This function is called by:
  1962 ;;		_ISR
  1963 ;; This function uses a non-reentrant model
  1964 ;;
  1965                           
  1966                           
  1967                           ;psect for function i1___bmul
  1968  02EC                     i1___bmul:	
  1969                           
  1970                           ;incstack = 0
  1971                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
  1972                           ;i1___bmul@multiplier stored from wreg
  1973  02EC  00F2               	movwf	i1___bmul@multiplier
  1974  02ED  01F3               	clrf	i1___bmul@product
  1975  02EE                     i1l1195:	
  1976  02EE  1C72               	btfss	i1___bmul@multiplier,0
  1977  02EF  2AF4               	goto	i1l1199
  1978  02F0  0870               	movf	i1___bmul@multiplicand,w
  1979  02F1  00F1               	movwf	??i1___bmul
  1980  02F2  0871               	movf	??i1___bmul,w
  1981  02F3  07F3               	addwf	i1___bmul@product,f
  1982  02F4                     i1l1199:	
  1983  02F4  1003               	clrc
  1984  02F5  0DF0               	rlf	i1___bmul@multiplicand,f
  1985  02F6  1003               	clrc
  1986  02F7  0CF2               	rrf	i1___bmul@multiplier,f
  1987  02F8  0872               	movf	i1___bmul@multiplier,w
  1988  02F9  1D03               	btfss	3,2
  1989  02FA  2AEE               	goto	i1l1195
  1990  02FB  0873               	movf	i1___bmul@product,w
  1991  02FC  0008               	return
  1992  02FD                     __end_ofi1___bmul:	
  1993                           
  1994                           	psect	text9
  1995  02C5                     __ptext9:	
  1996 ;; *************** function _pre_debounce *****************
  1997 ;; Defined at:
  1998 ;;		line 9 in file "sensor.c"
  1999 ;; Parameters:    Size  Location     Type
  2000 ;;  sensor          1    wreg     PTR struct sensor_t
  2001 ;;		 -> sensors(42), 
  2002 ;; Auto vars:     Size  Location     Type
  2003 ;;  sensor          1    5[COMMON] PTR struct sensor_t
  2004 ;;		 -> sensors(42), 
  2005 ;; Return value:  Size  Location     Type
  2006 ;;                  1    wreg      void 
  2007 ;; Registers used:
  2008 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2009 ;; Tracked objects:
  2010 ;;		On entry : 0/0
  2011 ;;		On exit  : 0/0
  2012 ;;		Unchanged: 0/0
  2013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2015 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2016 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2017 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2018 ;;Total ram usage:        2 bytes
  2019 ;; Hardware stack levels used:    1
  2020 ;; Hardware stack levels required when called:    1
  2021 ;; This function calls:
  2022 ;;		_get_value
  2023 ;; This function is called by:
  2024 ;;		_ISR
  2025 ;; This function uses a non-reentrant model
  2026 ;;
  2027                           
  2028                           
  2029                           ;psect for function _pre_debounce
  2030  02C5                     _pre_debounce:	
  2031                           
  2032                           ;incstack = 0
  2033                           ; Regs used in _pre_debounce: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2034                           ;pre_debounce@sensor stored from wreg
  2035  02C5  00F5               	movwf	pre_debounce@sensor
  2036                           
  2037                           ;sensor.c: 10: sensor->debounce.should_debounce = 1;
  2038  02C6  0875               	movf	pre_debounce@sensor,w
  2039  02C7  3E06               	addlw	6
  2040  02C8  0086               	movwf	6
  2041  02C9  0187               	clrf	7
  2042  02CA  1401               	bsf	1,0
  2043                           
  2044                           ;sensor.c: 11: sensor->debounce.previous_state = get_value(sensor);
  2045  02CB  0875               	movf	pre_debounce@sensor,w
  2046  02CC  3182  22AB         	fcall	_get_value
  2047  02CE  00F4               	movwf	??_pre_debounce
  2048  02CF  0875               	movf	pre_debounce@sensor,w
  2049  02D0  3E06               	addlw	6
  2050  02D1  0086               	movwf	6
  2051  02D2  0187               	clrf	7
  2052  02D3  0DF4               	rlf	??_pre_debounce,f
  2053  02D4  0801               	movf	1,w
  2054  02D5  0674               	xorwf	??_pre_debounce,w
  2055  02D6  39FD               	andlw	-3
  2056  02D7  0674               	xorwf	??_pre_debounce,w
  2057  02D8  0081               	movwf	1
  2058  02D9  0008               	return
  2059  02DA                     __end_of_pre_debounce:	
  2060                           
  2061                           	psect	text10
  2062  01DF                     __ptext10:	
  2063 ;; *************** function _post_debounce *****************
  2064 ;; Defined at:
  2065 ;;		line 14 in file "sensor.c"
  2066 ;; Parameters:    Size  Location     Type
  2067 ;;  sensor          1    wreg     PTR struct sensor_t
  2068 ;;		 -> sensors(42), 
  2069 ;; Auto vars:     Size  Location     Type
  2070 ;;  sensor          1    5[BANK0 ] PTR struct sensor_t
  2071 ;;		 -> sensors(42), 
  2072 ;; Return value:  Size  Location     Type
  2073 ;;                  1    wreg      void 
  2074 ;; Registers used:
  2075 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2076 ;; Tracked objects:
  2077 ;;		On entry : 0/0
  2078 ;;		On exit  : 0/0
  2079 ;;		Unchanged: 0/0
  2080 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2082 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2083 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2084 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2085 ;;Total ram usage:        2 bytes
  2086 ;; Hardware stack levels used:    1
  2087 ;; Hardware stack levels required when called:    2
  2088 ;; This function calls:
  2089 ;;		_default_handler
  2090 ;;		_get_value
  2091 ;;		_switch_handler
  2092 ;;		_temperature_handler
  2093 ;; This function is called by:
  2094 ;;		_ISR
  2095 ;; This function uses a non-reentrant model
  2096 ;;
  2097                           
  2098                           
  2099                           ;psect for function _post_debounce
  2100  01DF                     _post_debounce:	
  2101                           
  2102                           ;incstack = 0
  2103                           ; Regs used in _post_debounce: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2104                           ;post_debounce@sensor stored from wreg
  2105  01DF  0020               	movlb	0	; select bank0
  2106  01E0  00D0               	movwf	post_debounce@sensor
  2107                           
  2108                           ;sensor.c: 15: if(sensor->debounce.should_debounce &&
  2109                           ;sensor.c: 16: sensor->debounce.previous_state == get_value(sensor))
  2110  01E1  0850               	movf	post_debounce@sensor,w
  2111  01E2  3E06               	addlw	6
  2112  01E3  0086               	movwf	6
  2113  01E4  0187               	clrf	7
  2114  01E5  1C01               	btfss	1,0
  2115  01E6  0008               	return
  2116  01E7  0850               	movf	post_debounce@sensor,w
  2117  01E8  3E06               	addlw	6
  2118  01E9  0086               	movwf	6
  2119  01EA  0187               	clrf	7
  2120  01EB  0C01               	rrf	1,w
  2121  01EC  3901               	andlw	1
  2122  01ED  00FD               	movwf	??_post_debounce
  2123  01EE  0850               	movf	post_debounce@sensor,w
  2124  01EF  3182  22AB  3181   	fcall	_get_value
  2125  01F2  067D               	xorwf	??_post_debounce,w
  2126  01F3  1D03               	skipz
  2127  01F4  0008               	return
  2128                           
  2129                           ;sensor.c: 17: {
  2130                           ;sensor.c: 18: sensor->handler(sensor);
  2131  01F5  0020               	movlb	0	; select bank0
  2132  01F6  0850               	movf	post_debounce@sensor,w
  2133  01F7  00FD               	movwf	??_post_debounce
  2134  01F8  087D               	movf	??_post_debounce,w
  2135  01F9  00FC               	movwf	switch_handler@sensor
  2136  01FA  0850               	movf	post_debounce@sensor,w
  2137  01FB  3E04               	addlw	4
  2138  01FC  0086               	movwf	6
  2139  01FD  0187               	clrf	7
  2140  01FE  3F41               	moviw [1]fsr1
  2141  01FF  008A               	movwf	10
  2142  0200  3F40               	moviw [0]fsr1
  2143  0201  000A               	callw
  2144  0202  3181               	pagesel	$
  2145                           
  2146                           ;sensor.c: 19: sensor->debounce.should_debounce = 0;
  2147  0203  0020               	movlb	0	; select bank0
  2148  0204  0850               	movf	post_debounce@sensor,w
  2149  0205  3E06               	addlw	6
  2150  0206  0086               	movwf	6
  2151  0207  0187               	clrf	7
  2152  0208  1001               	bcf	1,0
  2153  0209  0008               	return
  2154  020A                     __end_of_post_debounce:	
  2155                           
  2156                           	psect	text11
  2157  0314                     __ptext11:	
  2158 ;; *************** function _switch_handler *****************
  2159 ;; Defined at:
  2160 ;;		line 117 in file "main.c"
  2161 ;; Parameters:    Size  Location     Type
  2162 ;;  sensor          1   12[COMMON] PTR struct sensor_t
  2163 ;;		 -> sensors(42), 
  2164 ;; Auto vars:     Size  Location     Type
  2165 ;;		None
  2166 ;; Return value:  Size  Location     Type
  2167 ;;                  1    wreg      void 
  2168 ;; Registers used:
  2169 ;;		None
  2170 ;; Tracked objects:
  2171 ;;		On entry : 0/0
  2172 ;;		On exit  : 0/0
  2173 ;;		Unchanged: 0/0
  2174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2175 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2178 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2179 ;;Total ram usage:        1 bytes
  2180 ;; Hardware stack levels used:    1
  2181 ;; This function calls:
  2182 ;;		Nothing
  2183 ;; This function is called by:
  2184 ;;		_initialize_sensors
  2185 ;;		_post_debounce
  2186 ;;		_ISR
  2187 ;; This function uses a non-reentrant model
  2188 ;;
  2189                           
  2190                           
  2191                           ;psect for function _switch_handler
  2192  0314                     _switch_handler:	
  2193                           
  2194                           ;main.c: 118: should_autobaud = 1;
  2195                           
  2196                           ;incstack = 0
  2197                           ; Regs used in _switch_handler: []
  2198  0314  0020               	movlb	0	; select bank0
  2199  0315  01A0               	clrf	_should_autobaud
  2200  0316  0AA0               	incf	_should_autobaud,f
  2201  0317  0008               	return
  2202  0318                     __end_of_switch_handler:	
  2203                           
  2204                           	psect	text12
  2205  022E                     __ptext12:	
  2206 ;; *************** function _default_handler *****************
  2207 ;; Defined at:
  2208 ;;		line 104 in file "main.c"
  2209 ;; Parameters:    Size  Location     Type
  2210 ;;  sensor          1   12[COMMON] PTR struct sensor_t
  2211 ;;		 -> sensors(42), 
  2212 ;; Auto vars:     Size  Location     Type
  2213 ;;  package         3    2[BANK0 ] struct package_t
  2214 ;; Return value:  Size  Location     Type
  2215 ;;                  1    wreg      void 
  2216 ;; Registers used:
  2217 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2218 ;; Tracked objects:
  2219 ;;		On entry : 0/0
  2220 ;;		On exit  : 0/0
  2221 ;;		Unchanged: 0/0
  2222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2223 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2224 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2225 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2226 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2227 ;;Total ram usage:        6 bytes
  2228 ;; Hardware stack levels used:    1
  2229 ;; Hardware stack levels required when called:    1
  2230 ;; This function calls:
  2231 ;;		_create_package
  2232 ;;		_get_value
  2233 ;;		i1_UART_write
  2234 ;; This function is called by:
  2235 ;;		_initialize_sensors
  2236 ;;		_post_debounce
  2237 ;;		_ISR
  2238 ;; This function uses a non-reentrant model
  2239 ;;
  2240                           
  2241                           
  2242                           ;psect for function _default_handler
  2243  022E                     _default_handler:	
  2244                           
  2245                           ;main.c: 105: Package package = create_package(sensor->index, get_value(sensor), 0);
  2246                           
  2247                           ;incstack = 0
  2248                           ; Regs used in _default_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2249  022E  087C               	movf	default_handler@sensor,w
  2250  022F  3182  22AB  3182   	fcall	_get_value
  2251  0232  0020               	movlb	0	; select bank0
  2252  0233  00CB               	movwf	??_default_handler
  2253  0234  01CC               	clrf	??_default_handler+1
  2254  0235  084B               	movf	??_default_handler,w
  2255  0236  00F4               	movwf	create_package@value
  2256  0237  084C               	movf	??_default_handler+1,w
  2257  0238  00F5               	movwf	create_package@value+1
  2258  0239  01F6               	clrf	create_package@extended
  2259  023A  087C               	movf	default_handler@sensor,w
  2260  023B  0086               	movwf	6
  2261  023C  0187               	clrf	7
  2262  023D  0801               	movf	1,w
  2263  023E  3182  2290  3182   	fcall	_create_package
  2264  0241  0874               	movf	?_create_package,w
  2265  0242  0020               	movlb	0	; select bank0
  2266  0243  00CD               	movwf	default_handler@package
  2267  0244  0875               	movf	?_create_package+1,w
  2268  0245  00CE               	movwf	default_handler@package+1
  2269  0246  0876               	movf	?_create_package+2,w
  2270  0247  00CF               	movwf	default_handler@package+2
  2271                           
  2272                           ;main.c: 106: UART_write(package.first);
  2273  0248  084D               	movf	default_handler@package,w
  2274  0249  3183  2307  3182   	fcall	i1_UART_write
  2275                           
  2276                           ;main.c: 107: UART_write(package.value);
  2277  024C  0020               	movlb	0	; select bank0
  2278  024D  084E               	movf	default_handler@package+1,w
  2279  024E  3183  2307         	fcall	i1_UART_write
  2280  0250  0008               	return
  2281  0251                     __end_of_default_handler:	
  2282                           
  2283                           	psect	text13
  2284  0251                     __ptext13:	
  2285 ;; *************** function _temperature_handler *****************
  2286 ;; Defined at:
  2287 ;;		line 110 in file "main.c"
  2288 ;; Parameters:    Size  Location     Type
  2289 ;;  sensor          1   12[COMMON] PTR struct sensor_t
  2290 ;;		 -> sensors(42), 
  2291 ;; Auto vars:     Size  Location     Type
  2292 ;;  package         3    0[BANK0 ] struct package_t
  2293 ;; Return value:  Size  Location     Type
  2294 ;;                  1    wreg      void 
  2295 ;; Registers used:
  2296 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2297 ;; Tracked objects:
  2298 ;;		On entry : 0/0
  2299 ;;		On exit  : 0/0
  2300 ;;		Unchanged: 0/0
  2301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2302 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2303 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2305 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2306 ;;Total ram usage:        4 bytes
  2307 ;; Hardware stack levels used:    1
  2308 ;; Hardware stack levels required when called:    1
  2309 ;; This function calls:
  2310 ;;		_create_package
  2311 ;;		i1_UART_write
  2312 ;; This function is called by:
  2313 ;;		_initialize_sensors
  2314 ;;		_post_debounce
  2315 ;;		_ISR
  2316 ;; This function uses a non-reentrant model
  2317 ;;
  2318                           
  2319                           
  2320                           ;psect for function _temperature_handler
  2321  0251                     _temperature_handler:	
  2322                           
  2323                           ;main.c: 111: Package package = create_package(sensor->index, ADRES, !0);
  2324                           
  2325                           ;incstack = 0
  2326                           ; Regs used in _temperature_handler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2327  0251  0021               	movlb	1	; select bank1
  2328  0252  081C               	movf	28,w	;volatile
  2329  0253  00F5               	movwf	create_package@value+1
  2330  0254  081B               	movf	27,w	;volatile
  2331  0255  00F4               	movwf	create_package@value
  2332  0256  01F6               	clrf	create_package@extended
  2333  0257  0AF6               	incf	create_package@extended,f
  2334  0258  087C               	movf	temperature_handler@sensor,w
  2335  0259  0086               	movwf	6
  2336  025A  0187               	clrf	7
  2337  025B  0801               	movf	1,w
  2338  025C  3182  2290  3182   	fcall	_create_package
  2339  025F  0874               	movf	?_create_package,w
  2340  0260  0020               	movlb	0	; select bank0
  2341  0261  00CB               	movwf	temperature_handler@package
  2342  0262  0875               	movf	?_create_package+1,w
  2343  0263  00CC               	movwf	temperature_handler@package+1
  2344  0264  0876               	movf	?_create_package+2,w
  2345  0265  00CD               	movwf	temperature_handler@package+2
  2346                           
  2347                           ;main.c: 112: UART_write(package.first);
  2348  0266  084B               	movf	temperature_handler@package,w
  2349  0267  3183  2307  3182   	fcall	i1_UART_write
  2350                           
  2351                           ;main.c: 113: UART_write(package.value);
  2352  026A  0020               	movlb	0	; select bank0
  2353  026B  084C               	movf	temperature_handler@package+1,w
  2354  026C  3183  2307  3182   	fcall	i1_UART_write
  2355                           
  2356                           ;main.c: 114: UART_write(package.extended_value);
  2357  026F  0020               	movlb	0	; select bank0
  2358  0270  084D               	movf	temperature_handler@package+2,w
  2359  0271  3183  2307         	fcall	i1_UART_write
  2360  0273  0008               	return
  2361  0274                     __end_of_temperature_handler:	
  2362                           
  2363                           	psect	text14
  2364  0307                     __ptext14:	
  2365 ;; *************** function i1_UART_write *****************
  2366 ;; Defined at:
  2367 ;;		line 121 in file "main.c"
  2368 ;; Parameters:    Size  Location     Type
  2369 ;;  data            1    wreg     unsigned char 
  2370 ;; Auto vars:     Size  Location     Type
  2371 ;;  data            1    0[COMMON] unsigned char 
  2372 ;; Return value:  Size  Location     Type
  2373 ;;                  1    wreg      void 
  2374 ;; Registers used:
  2375 ;;		wreg
  2376 ;; Tracked objects:
  2377 ;;		On entry : 0/0
  2378 ;;		On exit  : 0/0
  2379 ;;		Unchanged: 0/0
  2380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2382 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2384 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2385 ;;Total ram usage:        1 bytes
  2386 ;; Hardware stack levels used:    1
  2387 ;; This function calls:
  2388 ;;		Nothing
  2389 ;; This function is called by:
  2390 ;;		_default_handler
  2391 ;;		_temperature_handler
  2392 ;; This function uses a non-reentrant model
  2393 ;;
  2394                           
  2395                           
  2396                           ;psect for function i1_UART_write
  2397  0307                     i1_UART_write:	
  2398                           
  2399                           ;incstack = 0
  2400                           ; Regs used in i1_UART_write: [wreg]
  2401                           ;i1UART_write@data stored from wreg
  2402  0307  00F0               	movwf	i1UART_write@data
  2403  0308                     i1l112:	
  2404                           ;main.c: 123: while(!TRMT);
  2405                           
  2406  0308  0023               	movlb	3	; select bank3
  2407  0309  1C9E               	btfss	30,1	;volatile
  2408  030A  2B08               	goto	i1l112
  2409                           
  2410                           ;main.c: 124: TXREG = data;
  2411  030B  0870               	movf	i1UART_write@data,w
  2412  030C  009A               	movwf	26	;volatile
  2413  030D  0008               	return
  2414  030E                     __end_ofi1_UART_write:	
  2415                           
  2416                           	psect	text15
  2417  02AB                     __ptext15:	
  2418 ;; *************** function _get_value *****************
  2419 ;; Defined at:
  2420 ;;		line 5 in file "sensor.c"
  2421 ;; Parameters:    Size  Location     Type
  2422 ;;  sensor          1    wreg     PTR struct sensor_t
  2423 ;;		 -> sensors(42), 
  2424 ;; Auto vars:     Size  Location     Type
  2425 ;;  sensor          1    3[COMMON] PTR struct sensor_t
  2426 ;;		 -> sensors(42), 
  2427 ;; Return value:  Size  Location     Type
  2428 ;;                  1    wreg      unsigned char 
  2429 ;; Registers used:
  2430 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  2431 ;; Tracked objects:
  2432 ;;		On entry : 0/0
  2433 ;;		On exit  : 0/0
  2434 ;;		Unchanged: 0/0
  2435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2437 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2438 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2439 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2440 ;;Total ram usage:        4 bytes
  2441 ;; Hardware stack levels used:    1
  2442 ;; This function calls:
  2443 ;;		Nothing
  2444 ;; This function is called by:
  2445 ;;		_default_handler
  2446 ;;		_pre_debounce
  2447 ;;		_post_debounce
  2448 ;; This function uses a non-reentrant model
  2449 ;;
  2450                           
  2451                           
  2452                           ;psect for function _get_value
  2453  02AB                     _get_value:	
  2454                           
  2455                           ;incstack = 0
  2456                           ; Regs used in _get_value: [wreg-fsr1h+status,2+status,0]
  2457                           ;get_value@sensor stored from wreg
  2458  02AB  00F3               	movwf	get_value@sensor
  2459                           
  2460                           ;sensor.c: 6: return (*sensor->port & (1U << sensor->pin));
  2461  02AC  0873               	movf	get_value@sensor,w
  2462  02AD  3E02               	addlw	2
  2463  02AE  0086               	movwf	6
  2464  02AF  0187               	clrf	7
  2465  02B0  3F40               	moviw [0]fsr1
  2466  02B1  00F0               	movwf	??_get_value
  2467  02B2  3F41               	moviw [1]fsr1
  2468  02B3  00F1               	movwf	??_get_value+1
  2469  02B4  0870               	movf	??_get_value,w
  2470  02B5  0086               	movwf	6
  2471  02B6  0871               	movf	??_get_value+1,w
  2472  02B7  0087               	movwf	7
  2473  02B8  3001               	movlw	1
  2474  02B9  00F2               	movwf	??_get_value+2
  2475  02BA  0A73               	incf	get_value@sensor,w
  2476  02BB  0084               	movwf	4
  2477  02BC  0185               	clrf	5
  2478  02BD  0A00               	incf	0,w
  2479  02BE  2AC0               	goto	u46_24
  2480  02BF                     u46_25:	
  2481  02BF  35F2               	lslf	??_get_value+2,f
  2482  02C0                     u46_24:	
  2483  02C0  0B89               	decfsz	9,f
  2484  02C1  2ABF               	goto	u46_25
  2485  02C2  0872               	movf	??_get_value+2,w
  2486  02C3  0501               	andwf	1,w
  2487  02C4  0008               	return
  2488  02C5                     __end_of_get_value:	
  2489                           
  2490                           	psect	text16
  2491  0290                     __ptext16:	
  2492 ;; *************** function _create_package *****************
  2493 ;; Defined at:
  2494 ;;		line 93 in file "main.c"
  2495 ;; Parameters:    Size  Location     Type
  2496 ;;  index           1    wreg     unsigned char 
  2497 ;;  value           2    4[COMMON] unsigned short 
  2498 ;;  extended        1    6[COMMON] unsigned char 
  2499 ;; Auto vars:     Size  Location     Type
  2500 ;;  index           1    8[COMMON] unsigned char 
  2501 ;;  package         3    9[COMMON] struct package_t
  2502 ;; Return value:  Size  Location     Type
  2503 ;;                  3    4[COMMON] struct package_t
  2504 ;; Registers used:
  2505 ;;		wreg, status,2, status,0
  2506 ;; Tracked objects:
  2507 ;;		On entry : 0/0
  2508 ;;		On exit  : 0/0
  2509 ;;		Unchanged: 0/0
  2510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2511 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2512 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2513 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2514 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2515 ;;Total ram usage:        8 bytes
  2516 ;; Hardware stack levels used:    1
  2517 ;; This function calls:
  2518 ;;		Nothing
  2519 ;; This function is called by:
  2520 ;;		_default_handler
  2521 ;;		_temperature_handler
  2522 ;; This function uses a non-reentrant model
  2523 ;;
  2524                           
  2525                           
  2526                           ;psect for function _create_package
  2527  0290                     _create_package:	
  2528                           
  2529                           ;incstack = 0
  2530                           ; Regs used in _create_package: [wreg+status,2+status,0]
  2531                           ;create_package@index stored from wreg
  2532  0290  00F8               	movwf	create_package@index
  2533                           
  2534                           ;main.c: 94: Package package;
  2535                           ;main.c: 96: package.index = index;
  2536  0291  0879               	movf	create_package@package,w
  2537  0292  0678               	xorwf	create_package@index,w
  2538  0293  3980               	andlw	-128
  2539  0294  0678               	xorwf	create_package@index,w
  2540  0295  00F9               	movwf	create_package@package
  2541                           
  2542                           ;main.c: 97: package.extended = extended ? 1 : 0;
  2543  0296  0876               	movf	create_package@extended,w
  2544  0297  1903               	btfsc	3,2
  2545  0298  2A9B               	goto	u44_20
  2546  0299  17F9               	bsf	create_package@package,7
  2547  029A  2A9C               	goto	i1l991
  2548  029B                     u44_20:	
  2549  029B  13F9               	bcf	create_package@package,7
  2550  029C                     i1l991:	
  2551                           
  2552                           ;main.c: 98: package.value = value;
  2553  029C  0874               	movf	create_package@value,w
  2554  029D  00F7               	movwf	??_create_package
  2555  029E  0877               	movf	??_create_package,w
  2556  029F  00FA               	movwf	create_package@package+1
  2557                           
  2558                           ;main.c: 99: package.extended_value = value >> 8;
  2559  02A0  0875               	movf	create_package@value+1,w
  2560  02A1  00F7               	movwf	??_create_package
  2561  02A2  0877               	movf	??_create_package,w
  2562  02A3  00FB               	movwf	create_package@package+2
  2563                           
  2564                           ;main.c: 101: return package;
  2565  02A4  0879               	movf	create_package@package,w
  2566  02A5  00F4               	movwf	?_create_package
  2567  02A6  087A               	movf	create_package@package+1,w
  2568  02A7  00F5               	movwf	?_create_package+1
  2569  02A8  087B               	movf	create_package@package+2,w
  2570  02A9  00F6               	movwf	?_create_package+2
  2571  02AA  0008               	return
  2572  02AB                     __end_of_create_package:	
  2573  007E                     btemp	set	126	;btemp
  2574  007E                     int$flags	set	126
  2575  007E                     wtemp0	set	126


Data Sizes:
    Strings     2
    Constant    0
    Data        0
    BSS         43
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     22      65
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    switch_handler@sensor	PTR struct sensor_t size(1) Largest target is 42
		 -> sensors(BANK0[42]), 

    S20$3$0	PTR struct sensor_t size(1) Largest target is 42
		 -> sensors(BANK0[42]), 

    post_debounce@sensor.handler	PTR FTN(PTR struct sensor_t,)void  size(2) Largest target is 1
		 -> switch_handler(), temperature_handler(), default_handler(), 

    post_debounce@sensor.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    post_debounce@sensor	PTR struct sensor_t size(1) Largest target is 42
		 -> sensors(BANK0[42]), 

    pre_debounce@sensor.handler	PTR FTN(PTR struct sensor_t,)void  size(2) Largest target is 1
		 -> switch_handler(), temperature_handler(), default_handler(), 

    pre_debounce@sensor.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    pre_debounce@sensor	PTR struct sensor_t size(1) Largest target is 42
		 -> sensors(BANK0[42]), 

    get_value@sensor.handler	PTR FTN(PTR struct sensor_t,)void  size(2) Largest target is 1
		 -> switch_handler(), temperature_handler(), default_handler(), 

    get_value@sensor.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    get_value@sensor	PTR struct sensor_t size(1) Largest target is 42
		 -> sensors(BANK0[42]), 

    sensors.handler	PTR FTN(PTR struct sensor_t,)void  size(2) Largest target is 1
		 -> switch_handler(), temperature_handler(), default_handler(), 

    sensors.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    UART_write_text@text	PTR unsigned char  size(2) Largest target is 2
		 -> STR_1(CODE[2]), 

    temperature_handler@sensor.handler	PTR FTN(PTR struct sensor_t,)void  size(2) Largest target is 1
		 -> switch_handler(), temperature_handler(), default_handler(), 

    temperature_handler@sensor.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    temperature_handler@sensor	PTR struct sensor_t size(1) Largest target is 42
		 -> sensors(BANK0[42]), 

    S20sensor_t$handler	PTR FTN(PTR struct sensor_t,)void  size(2) Largest target is 1
		 -> switch_handler(), temperature_handler(), default_handler(), 

    default_handler@sensor.handler	PTR FTN(PTR struct sensor_t,)void  size(2) Largest target is 1
		 -> switch_handler(), temperature_handler(), default_handler(), 

    S20sensor_t$port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    default_handler@sensor.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    default_handler@sensor	PTR struct sensor_t size(1) Largest target is 42
		 -> sensors(BANK0[42]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_post_debounce
    _pre_debounce->_get_value
    _post_debounce->_default_handler
    _post_debounce->_switch_handler
    _post_debounce->_temperature_handler
    _temperature_handler->_create_package
    _default_handler->_create_package
    _create_package->_get_value

Critical Paths under _main in BANK0

    _main->_initialize_sensors
    _initialize_sensors->___bmul
    _UART_write_text->_UART_write

Critical Paths under _ISR in BANK0

    _ISR->_post_debounce
    _post_debounce->_default_handler

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     651
                    _UART_write_text
                           _autoBaud
                     _initialize_PIC
                 _initialize_sensors
 ---------------------------------------------------------------------------------
 (1) _initialize_sensors                                   5     5      0     381
                                             17 BANK0      5     5      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     203
                                             13 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (1) _initialize_PIC                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _autoBaud                                             6     6      0      94
                                             13 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _UART_write_text                                      5     3      2     176
                                             14 BANK0      5     3      2
                         _UART_write
 ---------------------------------------------------------------------------------
 (2) _UART_write                                           1     1      0      22
                                             13 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  7     7      0    3384
                                              6 BANK0      7     7      0
                    _default_handler *
                      _post_debounce
                       _pre_debounce
                     _switch_handler *
                _temperature_handler *
                           i1___bmul
 ---------------------------------------------------------------------------------
 (4) i1___bmul                                             4     3      1      87
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _pre_debounce                                         2     2      0     350
                                              4 COMMON     2     2      0
                          _get_value
 ---------------------------------------------------------------------------------
 (4) _post_debounce                                        2     2      0    1573
                                             13 COMMON     1     1      0
                                              5 BANK0      1     1      0
                    _default_handler *
                          _get_value
                     _switch_handler *
                _temperature_handler *
 ---------------------------------------------------------------------------------
 (4) _temperature_handler                                  4     3      1     529
                                             12 COMMON     1     0      1
                                              0 BANK0      3     3      0
                     _create_package
                       i1_UART_write
 ---------------------------------------------------------------------------------
 (4) _switch_handler                                       1     0      1      86
                                             12 COMMON     1     0      1
 ---------------------------------------------------------------------------------
 (5) _default_handler                                      6     5      1     662
                                             12 COMMON     1     0      1
                                              0 BANK0      5     5      0
                     _create_package
                          _get_value
                       i1_UART_write
 ---------------------------------------------------------------------------------
 (5) i1_UART_write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _get_value                                            4     4      0     134
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (5) _create_package                                       8     5      3     416
                                              4 COMMON     8     5      3
                          _get_value (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_write_text
     _UART_write
   _autoBaud
   _initialize_PIC
   _initialize_sensors
     ___bmul

 _ISR (ROOT)
   _default_handler *
     _create_package
       _get_value (ARG)
     _get_value
     i1_UART_write
   _post_debounce *
     _default_handler *
       _create_package
         _get_value (ARG)
       _get_value
       i1_UART_write
     _get_value *
     _switch_handler *
     _temperature_handler *
       _create_package
         _get_value (ARG)
       i1_UART_write
   _pre_debounce *
     _get_value
   _switch_handler *
   _temperature_handler *
     _create_package
       _get_value (ARG)
     i1_UART_write
   i1___bmul *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     16      41       5       81.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      4F      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      4F      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Jan 03 16:16:44 2017

              ___bmul@product 005A                   __CFG_CP$OFF 0000                            l93 0229  
                 __CFG_LVP$ON 0000                           l112 02FF                           l134 0127  
                         l143 0160                           l135 0134                           l136 012A  
                         l137 012D                           l138 0131                           l147 0173  
                         l139 0136                  __CFG_CPD$OFF 0000                           _PR6 041D  
                         u515 00C3                           _ISR 0004                           u525 011A  
                         u615 0189                           u585 0171                ?_post_debounce 0070  
                __CFG_BORV$LO 0000                           wreg 0009                  __CFG_IESO$ON 0000  
                        ?_ISR 0070                          ISR@i 0056                          ISR@x 0053  
                        l1033 02E3                          l1211 0210                          l1029 02DD  
                        l1133 011C                          l1221 0224                          l1127 00C5  
                        l1155 0165                          l1147 0148                          l1323 0151  
                        l1139 014B                          l1165 018B                          l1167 018F  
                        l1179 0277                          _ADIF 008E                          STR_1 0318  
                        _LATC 010E              ??_initialize_PIC 0058                          _TRMT 0CF1  
                __CFG_WRT$OFF 0000                 __CFG_FCMEN$ON 0000                          _main 020A  
                        fsr0h 0005                          fsr1h 0007                          indf0 0000  
                        fsr0l 0004                          indf1 0001                          fsr1l 0006  
                        btemp 007E              i1UART_write@data 0070                 __CFG_BOREN$ON 0000  
                        start 00AA             ___bmul@multiplier 005B                 __CFG_MCLRE$ON 0000  
                       ??_ISR 0051                         ?_main 0070                         _ADRES 009B  
                       _BRG16 0CFB                 __CFG_WDTE$OFF 0000                         _T2CON 001C  
                       _T6CON 041E                         i1l112 0308                         i1l160 005E  
                       i1l155 003C                         i1l157 003A                         i1l991 029C  
                       _RCREG 0199                         _SPBRG 019B                         _PORTA 000C  
                       u44_20 029B                         u46_24 02C0                         u46_25 02BF  
                       u72_25 001B                         u73_25 0038                         _TXREG 019A  
             autoBaud@discard 0059                   ?_UART_write 0070              __end_ofi1___bmul 02FD  
   temperature_handler@sensor 007C                         pclath 000A            pre_debounce@sensor 0075  
                       status 0003                         wtemp0 007E   __end_of_temperature_handler 0274  
            ??_create_package 0077               __initialization 00AC                  __end_of_main 022E  
 __size_of_initialize_sensors 006F                        ??_main 0061               ??_post_debounce 007D  
              __CFG_PLLEN$OFF 0000                        _ADCON0 009D                        _ADCON1 009E  
       create_package@package 0079                        i1l1251 004F                        i1l1239 001D  
                      i1l1257 0058                        i1l1195 02EE                        i1l1291 0093  
                      i1l1283 0086                        i1l1275 0079                        i1l1267 006C  
                      i1l1199 02F4                        i1l1299 009F                        _INTCON 000B  
                      _OSCCON 0099                        _SPBRGH 019C                        _TMR6IF 009B  
              __CFG_PWRTE$OFF 0000                        ___bmul 02DA              __end_of_autoBaud 0195  
              __CFG_STVREN$ON 0000           __size_of_UART_write 000A               _default_handler 022E  
             _UART_write_text 0274       __end_of__initialization 00B3          switch_handler@sensor 007C  
         ___bmul@multiplicand 0058                __pcstackCOMMON 0070                 ?i1_UART_write 0070  
               autoBaud@index 005C                     ?i1___bmul 0070           create_package@index 0078  
         create_package@value 0074            __size_of_get_value 001A              i1___bmul@product 0073  
        UART_write_text@count 005C                    __pbssBANK0 0020       __end_of_default_handler 0251  
                  __pmaintext 020A                       ?___bmul 0058                ??i1_UART_write 0070  
                  __pintentry 0004           initialize_sensors@i 005F       __end_of_UART_write_text 0290  
                  ??i1___bmul 0071        create_package@extended 0076                 ?_pre_debounce 0070  
                ??_UART_write 0058                     ?_autoBaud 0070       __size_of_switch_handler 0004  
           __end_of_get_value 02C5               __size_of___bmul 0012            __end_of_UART_write 0307  
                     __ptext1 00B7                       __ptext2 02DA                       __ptext3 0195  
                     __ptext4 0126                       __ptext5 0274                       __ptext6 02FD  
                     __ptext8 02EC                       __ptext9 02C5                  __size_of_ISR 00A6  
                   _IOCAFbits 0393           i1___bmul@multiplier 0072                     _IOCANbits 0392  
                   _IOCAPbits 0391                ??_pre_debounce 0074                     _T6CONbits 041E  
                     _sensors 0021                       clrloop0 030F          end_of_initialization 00B3  
                  ??_autoBaud 0058              ?_default_handler 007C                     _RCSTAbits 019D  
     __size_of_initialize_PIC 004A    __end_of_initialize_sensors 0126                  __pstringtext 0318  
__size_of_temperature_handler 0023              ?_UART_write_text 0059              __CFG_FOSC$INTOSC 0000  
       __end_of_post_debounce 020A                     _TRISAbits 008C                     _TRISCbits 008E  
        __end_ofi1_UART_write 030E                     _TXSTAbits 019E        default_handler@package 004D  
              __end_of___bmul 02EC                   _BAUDCONbits 019F       __size_of_create_package 001B  
           __size_ofi1___bmul 0011           start_initialization 00AC                   __end_of_ISR 00AA  
              _switch_handler 0314                   _APFCON0bits 011D                      ??___bmul 0059  
        __end_of_pre_debounce 02DA                     ___latbits 0002                 __pcstackBANK0 004B  
      __end_of_switch_handler 0318             __size_of_autoBaud 006F           UART_write_text@text 0059  
              _initialize_PIC 0195                     _get_value 02AB               _should_autobaud 0020  
       __size_ofi1_UART_write 0007               ?_switch_handler 007C           _temperature_handler 0251  
                   clear_ram0 030E                      _PIE1bits 0091                      _PIE3bits 0093  
      __end_of_initialize_PIC 01DF         i1___bmul@multiplicand 0070                      _PIR1bits 0011  
                    _PIR3bits 0013               get_value@sensor 0073                  i1_UART_write 0307  
        ?_temperature_handler 007C                _create_package 0290                      i1___bmul 02EC  
                  ?_get_value 0070                    _ADCON0bits 009D                UART_write@data 0058  
          _initialize_sensors 00B7         default_handler@sensor 007C           ?_initialize_sensors 0070  
       __size_of_pre_debounce 0015               ?_initialize_PIC 0070    temperature_handler@package 004B  
      __end_of_create_package 02AB         ??_temperature_handler 007D          ??_initialize_sensors 005C  
    __size_of_default_handler 0023                    _ANSELAbits 018C      __size_of_UART_write_text 001C  
                    __ptext10 01DF                      __ptext11 0314                      __ptext12 022E  
                    __ptext13 0251                      __ptext14 0307                      __ptext15 02AB  
                    __ptext16 0290                  _pre_debounce 02C5                      _autoBaud 0126  
               __size_of_main 0024        __size_of_post_debounce 002B                      int$flags 007E  
             ?_create_package 0074                   ??_get_value 0070             ISR@shouldDebounce 0054  
         post_debounce@sensor 0050                      intlevel1 0000             __CFG_CLKOUTEN$OFF 0000  
            ??_switch_handler 007D                 _post_debounce 01DF             ??_default_handler 004B  
                  _UART_write 02FD            autoBaud@sync_count 005A             ??_UART_write_text 005B  
