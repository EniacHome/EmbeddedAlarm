

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Dec 28 21:59:53 2016

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	intentry,global,class=CODE,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	dabs	1,0x7E,2
    31  0000                     
    32                           ; Version 1.40
    33                           ; Generated 01/12/2016 GMT
    34                           ; 
    35                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    36                           ; All rights reserved.
    37                           ; 
    38                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    39                           ; 
    40                           ; Redistribution and use in source and binary forms, with or without modification, are
    41                           ; permitted provided that the following conditions are met:
    42                           ; 
    43                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    44                           ;        conditions and the following disclaimer.
    45                           ; 
    46                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    47                           ;        of conditions and the following disclaimer in the documentation and/or other
    48                           ;        materials provided with the distribution.
    49                           ; 
    50                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    51                           ;        software without specific prior written permission.
    52                           ; 
    53                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    54                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    55                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    56                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    57                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    58                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    59                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    60                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    61                           ; 
    62                           ; 
    63                           ; Code-generator required, PIC16F1829 Definitions
    64                           ; 
    65                           ; SFR Addresses
    66  0000                     	;# 
    67  0001                     	;# 
    68  0002                     	;# 
    69  0003                     	;# 
    70  0004                     	;# 
    71  0005                     	;# 
    72  0006                     	;# 
    73  0007                     	;# 
    74  0008                     	;# 
    75  0009                     	;# 
    76  000A                     	;# 
    77  000B                     	;# 
    78  000C                     	;# 
    79  000D                     	;# 
    80  000E                     	;# 
    81  0011                     	;# 
    82  0012                     	;# 
    83  0013                     	;# 
    84  0014                     	;# 
    85  0015                     	;# 
    86  0016                     	;# 
    87  0016                     	;# 
    88  0017                     	;# 
    89  0018                     	;# 
    90  0019                     	;# 
    91  001A                     	;# 
    92  001B                     	;# 
    93  001C                     	;# 
    94  001E                     	;# 
    95  001F                     	;# 
    96  008C                     	;# 
    97  008D                     	;# 
    98  008E                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0094                     	;# 
   103  0095                     	;# 
   104  0096                     	;# 
   105  0097                     	;# 
   106  0098                     	;# 
   107  0099                     	;# 
   108  009A                     	;# 
   109  009B                     	;# 
   110  009B                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  010C                     	;# 
   115  010D                     	;# 
   116  010E                     	;# 
   117  0111                     	;# 
   118  0112                     	;# 
   119  0113                     	;# 
   120  0114                     	;# 
   121  0115                     	;# 
   122  0116                     	;# 
   123  0117                     	;# 
   124  0118                     	;# 
   125  0119                     	;# 
   126  011A                     	;# 
   127  011B                     	;# 
   128  011D                     	;# 
   129  011E                     	;# 
   130  018C                     	;# 
   131  018D                     	;# 
   132  018E                     	;# 
   133  0191                     	;# 
   134  0191                     	;# 
   135  0192                     	;# 
   136  0193                     	;# 
   137  0193                     	;# 
   138  0193                     	;# 
   139  0194                     	;# 
   140  0195                     	;# 
   141  0196                     	;# 
   142  0199                     	;# 
   143  019A                     	;# 
   144  019B                     	;# 
   145  019B                     	;# 
   146  019C                     	;# 
   147  019D                     	;# 
   148  019E                     	;# 
   149  019F                     	;# 
   150  020C                     	;# 
   151  020D                     	;# 
   152  020E                     	;# 
   153  0211                     	;# 
   154  0211                     	;# 
   155  0212                     	;# 
   156  0212                     	;# 
   157  0213                     	;# 
   158  0213                     	;# 
   159  0214                     	;# 
   160  0214                     	;# 
   161  0215                     	;# 
   162  0215                     	;# 
   163  0215                     	;# 
   164  0216                     	;# 
   165  0216                     	;# 
   166  0217                     	;# 
   167  0217                     	;# 
   168  0219                     	;# 
   169  021A                     	;# 
   170  021B                     	;# 
   171  021C                     	;# 
   172  021D                     	;# 
   173  021E                     	;# 
   174  021F                     	;# 
   175  0291                     	;# 
   176  0291                     	;# 
   177  0292                     	;# 
   178  0293                     	;# 
   179  0294                     	;# 
   180  0295                     	;# 
   181  0295                     	;# 
   182  0296                     	;# 
   183  0298                     	;# 
   184  0298                     	;# 
   185  0299                     	;# 
   186  029A                     	;# 
   187  029B                     	;# 
   188  029C                     	;# 
   189  029D                     	;# 
   190  029E                     	;# 
   191  0311                     	;# 
   192  0311                     	;# 
   193  0312                     	;# 
   194  0313                     	;# 
   195  0318                     	;# 
   196  0318                     	;# 
   197  0319                     	;# 
   198  031A                     	;# 
   199  038C                     	;# 
   200  038D                     	;# 
   201  038E                     	;# 
   202  0391                     	;# 
   203  0392                     	;# 
   204  0393                     	;# 
   205  0394                     	;# 
   206  0395                     	;# 
   207  0396                     	;# 
   208  039A                     	;# 
   209  039C                     	;# 
   210  039D                     	;# 
   211  039E                     	;# 
   212  039F                     	;# 
   213  0415                     	;# 
   214  0416                     	;# 
   215  0417                     	;# 
   216  041C                     	;# 
   217  041D                     	;# 
   218  041E                     	;# 
   219  0FE4                     	;# 
   220  0FE5                     	;# 
   221  0FE6                     	;# 
   222  0FE7                     	;# 
   223  0FE8                     	;# 
   224  0FE9                     	;# 
   225  0FEA                     	;# 
   226  0FEB                     	;# 
   227  0FED                     	;# 
   228  0FEE                     	;# 
   229  0FEF                     	;# 
   230  0000                     	;# 
   231  0001                     	;# 
   232  0002                     	;# 
   233  0003                     	;# 
   234  0004                     	;# 
   235  0005                     	;# 
   236  0006                     	;# 
   237  0007                     	;# 
   238  0008                     	;# 
   239  0009                     	;# 
   240  000A                     	;# 
   241  000B                     	;# 
   242  000C                     	;# 
   243  000D                     	;# 
   244  000E                     	;# 
   245  0011                     	;# 
   246  0012                     	;# 
   247  0013                     	;# 
   248  0014                     	;# 
   249  0015                     	;# 
   250  0016                     	;# 
   251  0016                     	;# 
   252  0017                     	;# 
   253  0018                     	;# 
   254  0019                     	;# 
   255  001A                     	;# 
   256  001B                     	;# 
   257  001C                     	;# 
   258  001E                     	;# 
   259  001F                     	;# 
   260  008C                     	;# 
   261  008D                     	;# 
   262  008E                     	;# 
   263  0091                     	;# 
   264  0092                     	;# 
   265  0093                     	;# 
   266  0094                     	;# 
   267  0095                     	;# 
   268  0096                     	;# 
   269  0097                     	;# 
   270  0098                     	;# 
   271  0099                     	;# 
   272  009A                     	;# 
   273  009B                     	;# 
   274  009B                     	;# 
   275  009C                     	;# 
   276  009D                     	;# 
   277  009E                     	;# 
   278  010C                     	;# 
   279  010D                     	;# 
   280  010E                     	;# 
   281  0111                     	;# 
   282  0112                     	;# 
   283  0113                     	;# 
   284  0114                     	;# 
   285  0115                     	;# 
   286  0116                     	;# 
   287  0117                     	;# 
   288  0118                     	;# 
   289  0119                     	;# 
   290  011A                     	;# 
   291  011B                     	;# 
   292  011D                     	;# 
   293  011E                     	;# 
   294  018C                     	;# 
   295  018D                     	;# 
   296  018E                     	;# 
   297  0191                     	;# 
   298  0191                     	;# 
   299  0192                     	;# 
   300  0193                     	;# 
   301  0193                     	;# 
   302  0193                     	;# 
   303  0194                     	;# 
   304  0195                     	;# 
   305  0196                     	;# 
   306  0199                     	;# 
   307  019A                     	;# 
   308  019B                     	;# 
   309  019B                     	;# 
   310  019C                     	;# 
   311  019D                     	;# 
   312  019E                     	;# 
   313  019F                     	;# 
   314  020C                     	;# 
   315  020D                     	;# 
   316  020E                     	;# 
   317  0211                     	;# 
   318  0211                     	;# 
   319  0212                     	;# 
   320  0212                     	;# 
   321  0213                     	;# 
   322  0213                     	;# 
   323  0214                     	;# 
   324  0214                     	;# 
   325  0215                     	;# 
   326  0215                     	;# 
   327  0215                     	;# 
   328  0216                     	;# 
   329  0216                     	;# 
   330  0217                     	;# 
   331  0217                     	;# 
   332  0219                     	;# 
   333  021A                     	;# 
   334  021B                     	;# 
   335  021C                     	;# 
   336  021D                     	;# 
   337  021E                     	;# 
   338  021F                     	;# 
   339  0291                     	;# 
   340  0291                     	;# 
   341  0292                     	;# 
   342  0293                     	;# 
   343  0294                     	;# 
   344  0295                     	;# 
   345  0295                     	;# 
   346  0296                     	;# 
   347  0298                     	;# 
   348  0298                     	;# 
   349  0299                     	;# 
   350  029A                     	;# 
   351  029B                     	;# 
   352  029C                     	;# 
   353  029D                     	;# 
   354  029E                     	;# 
   355  0311                     	;# 
   356  0311                     	;# 
   357  0312                     	;# 
   358  0313                     	;# 
   359  0318                     	;# 
   360  0318                     	;# 
   361  0319                     	;# 
   362  031A                     	;# 
   363  038C                     	;# 
   364  038D                     	;# 
   365  038E                     	;# 
   366  0391                     	;# 
   367  0392                     	;# 
   368  0393                     	;# 
   369  0394                     	;# 
   370  0395                     	;# 
   371  0396                     	;# 
   372  039A                     	;# 
   373  039C                     	;# 
   374  039D                     	;# 
   375  039E                     	;# 
   376  039F                     	;# 
   377  0415                     	;# 
   378  0416                     	;# 
   379  0417                     	;# 
   380  041C                     	;# 
   381  041D                     	;# 
   382  041E                     	;# 
   383  0FE4                     	;# 
   384  0FE5                     	;# 
   385  0FE6                     	;# 
   386  0FE7                     	;# 
   387  0FE8                     	;# 
   388  0FE9                     	;# 
   389  0FEA                     	;# 
   390  0FEB                     	;# 
   391  0FED                     	;# 
   392  0FEE                     	;# 
   393  0FEF                     	;# 
   394                           
   395                           	psect	stringtext
   396  03BC                     __pstringtext:	
   397  03BC                     _dpowers:	
   398  03BC  3401               	retlw	1
   399  03BD  3400               	retlw	0
   400  03BE  340A               	retlw	10
   401  03BF  3400               	retlw	0
   402  03C0  3464               	retlw	100
   403  03C1  3400               	retlw	0
   404  03C2  34E8               	retlw	232
   405  03C3  3403               	retlw	3
   406  03C4  3410               	retlw	16
   407  03C5  3427               	retlw	39
   408  03C6                     __end_of_dpowers:	
   409  000B                     _INTCON	set	11
   410  0011                     _PIR1bits	set	17
   411  0013                     _PIR3bits	set	19
   412  001C                     _T2CON	set	28
   413  000C                     _PORTA	set	12
   414  008E                     _ADIF	set	142
   415  009B                     _TMR6IF	set	155
   416  009B                     _ADRES	set	155
   417  009D                     _ADCON0	set	157
   418  009D                     _ADCON0bits	set	157
   419  009E                     _ADCON1	set	158
   420  0099                     _OSCCON	set	153
   421  0091                     _PIE1bits	set	145
   422  0093                     _PIE3bits	set	147
   423  008C                     _TRISAbits	set	140
   424  008E                     _TRISCbits	set	142
   425  011D                     _APFCON0bits	set	285
   426  010E                     _LATC	set	270
   427  019B                     _SPBRG	set	411
   428  018C                     _ANSELAbits	set	396
   429  019F                     _BAUDCONbits	set	415
   430  0199                     _RCREG	set	409
   431  019D                     _RCSTAbits	set	413
   432  019C                     _SPBRGH	set	412
   433  019A                     _TXREG	set	410
   434  019E                     _TXSTAbits	set	414
   435  0CFB                     _BRG16	set	3323
   436  0CF1                     _TRMT	set	3313
   437  0393                     _IOCAFbits	set	915
   438  0392                     _IOCANbits	set	914
   439  0391                     _IOCAPbits	set	913
   440  041D                     _PR6	set	1053
   441  041E                     _T6CON	set	1054
   442  041E                     _T6CONbits	set	1054
   443  03C6                     STR_3:	
   444  03C6  3420               	retlw	32	;' '
   445  03C7  3425               	retlw	37	;'%'
   446  03C8  3464               	retlw	100	;'d'
   447  03C9  3400               	retlw	0
   448  03CA                     STR_2:	
   449  03CA  3478               	retlw	120	;'x'
   450  03CB  3479               	retlw	121	;'y'
   451  03CC  3400               	retlw	0
   452  03CD                     STR_1:	
   453  03CD  3456               	retlw	86	;'V'
   454  03CE  3400               	retlw	0
   455                           
   456                           ; #config settings
   457  0000                     
   458                           	psect	cinit
   459  00B6                     start_initialization:	
   460  00B6                     __initialization:	
   461                           
   462                           ; Clear objects allocated to BANK0
   463  00B6  3045               	movlw	low __pbssBANK0
   464  00B7  0084               	movwf	4
   465  00B8  3000               	movlw	high __pbssBANK0
   466  00B9  0085               	movwf	5
   467  00BA  3024               	movlw	36
   468  00BB  3184  2418         	fcall	clear_ram0
   469  00BD                     end_of_initialization:	
   470                           ;End of C runtime variable initialization code
   471                           
   472  00BD                     __end_of__initialization:	
   473  00BD  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   474  00BE  0020               	movlb	0
   475  00BF  3183  2B42         	ljmp	_main	;jump to C main() function
   476                           
   477                           	psect	bssBANK0
   478  0045                     __pbssBANK0:	
   479  0045                     _shouldAutoBaud:	
   480  0045                     	ds	1
   481  0046                     _sensors:	
   482  0046                     	ds	35
   483                           
   484                           	psect	clrtext
   485  0418                     clear_ram0:	
   486                           ;	Called with FSR0 containing the base address, and
   487                           ;	WREG with the size to clear
   488                           
   489  0418  0064               	clrwdt	;clear the watchdog before getting into this loop
   490  0419                     clrloop0:	
   491  0419  0180               	clrf	0	;clear RAM location pointed to by FSR
   492  041A  3101               	addfsr 0,1
   493  041B  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   494  041C  2C19               	goto	clrloop0	;have we reached the end yet?
   495  041D  3400               	retlw	0	;all done for this memory range, return
   496                           
   497                           	psect	cstackBANK1
   498  00A0                     __pcstackBANK1:	
   499  00A0                     ??_initializePIC:	
   500  00A0                     ??_autoBaud:	
   501                           ; 1 bytes @ 0x0
   502                           
   503  00A0                     ??_UART_Write:	
   504                           ; 1 bytes @ 0x0
   505                           
   506  00A0                     ?___bmul:	
   507                           ; 1 bytes @ 0x0
   508                           
   509  00A0                     UART_Write@data:	
   510                           ; 1 bytes @ 0x0
   511                           
   512  00A0                     ___bmul@multiplicand:	
   513                           ; 1 bytes @ 0x0
   514                           
   515                           
   516                           ; 1 bytes @ 0x0
   517  00A0                     	ds	1
   518  00A1                     ?_UART_Write_Text:	
   519  00A1                     ??___bmul:	
   520                           ; 1 bytes @ 0x1
   521                           
   522  00A1                     autoBaud@discard:	
   523                           ; 1 bytes @ 0x1
   524                           
   525  00A1                     UART_Write_Text@text:	
   526                           ; 1 bytes @ 0x1
   527                           
   528                           
   529                           ; 2 bytes @ 0x1
   530  00A1                     	ds	1
   531  00A2                     ___bmul@product:	
   532  00A2                     autoBaud@sync_count:	
   533                           ; 1 bytes @ 0x2
   534                           
   535                           
   536                           ; 2 bytes @ 0x2
   537  00A2                     	ds	1
   538  00A3                     ??_UART_Write_Text:	
   539  00A3                     ___bmul@multiplier:	
   540                           ; 1 bytes @ 0x3
   541                           
   542                           
   543                           ; 1 bytes @ 0x3
   544  00A3                     	ds	1
   545  00A4                     ??_initializeSensors:	
   546  00A4                     UART_Write_Text@count:	
   547                           ; 1 bytes @ 0x4
   548                           
   549  00A4                     autoBaud@index:	
   550                           ; 2 bytes @ 0x4
   551                           
   552                           
   553                           ; 2 bytes @ 0x4
   554  00A4                     	ds	3
   555  00A7                     initializeSensors@i:	
   556                           
   557                           ; 2 bytes @ 0x7
   558  00A7                     	ds	2
   559  00A9                     ??_main:	
   560                           
   561                           	psect	cstackCOMMON
   562  0070                     __pcstackCOMMON:	
   563                           ; 1 bytes @ 0x9
   564                           
   565  0070                     ?_initializePIC:	
   566  0070                     ?_initializeSensors:	
   567                           ; 1 bytes @ 0x0
   568                           
   569  0070                     ?_autoBaud:	
   570                           ; 1 bytes @ 0x0
   571                           
   572  0070                     ?_process_debounce:	
   573                           ; 1 bytes @ 0x0
   574                           
   575  0070                     ?_enable_debounce:	
   576                           ; 1 bytes @ 0x0
   577                           
   578  0070                     ?_default_handler:	
   579                           ; 1 bytes @ 0x0
   580                           
   581  0070                     ?_switch_handler:	
   582                           ; 1 bytes @ 0x0
   583                           
   584  0070                     ??_switch_handler:	
   585                           ; 1 bytes @ 0x0
   586                           
   587  0070                     ?_UART_Write:	
   588                           ; 1 bytes @ 0x0
   589                           
   590  0070                     ?_ISR:	
   591                           ; 1 bytes @ 0x0
   592                           
   593  0070                     ?_get_port_pin:	
   594                           ; 1 bytes @ 0x0
   595                           
   596  0070                     ?i1_UART_Write:	
   597                           ; 1 bytes @ 0x0
   598                           
   599  0070                     ??i1_UART_Write:	
   600                           ; 1 bytes @ 0x0
   601                           
   602  0070                     ?i1___bmul:	
   603                           ; 1 bytes @ 0x0
   604                           
   605  0070                     ?_main:	
   606                           ; 1 bytes @ 0x0
   607                           
   608  0070                     ?___lwdiv:	
   609                           ; 2 bytes @ 0x0
   610                           
   611  0070                     i1UART_Write@data:	
   612                           ; 2 bytes @ 0x0
   613                           
   614  0070                     i1___bmul@multiplicand:	
   615                           ; 1 bytes @ 0x0
   616                           
   617  0070                     get_port_pin@port:	
   618                           ; 1 bytes @ 0x0
   619                           
   620  0070                     ___lwdiv@divisor:	
   621                           ; 2 bytes @ 0x0
   622                           
   623                           
   624                           ; 2 bytes @ 0x0
   625  0070                     	ds	1
   626  0071                     ?i1_UART_Write_Text:	
   627  0071                     ??i1___bmul:	
   628                           ; 1 bytes @ 0x1
   629                           
   630  0071                     i1UART_Write_Text@text:	
   631                           ; 1 bytes @ 0x1
   632                           
   633                           
   634                           ; 2 bytes @ 0x1
   635  0071                     	ds	1
   636  0072                     get_port_pin@pin:	
   637  0072                     i1___bmul@multiplier:	
   638                           ; 1 bytes @ 0x2
   639                           
   640  0072                     ___lwdiv@dividend:	
   641                           ; 1 bytes @ 0x2
   642                           
   643                           
   644                           ; 2 bytes @ 0x2
   645  0072                     	ds	1
   646  0073                     ??_get_port_pin:	
   647  0073                     ??i1_UART_Write_Text:	
   648                           ; 1 bytes @ 0x3
   649                           
   650  0073                     i1___bmul@product:	
   651                           ; 1 bytes @ 0x3
   652                           
   653                           
   654                           ; 1 bytes @ 0x3
   655  0073                     	ds	1
   656  0074                     ??_enable_debounce:	
   657  0074                     ??___lwdiv:	
   658                           ; 1 bytes @ 0x4
   659                           
   660  0074                     i1UART_Write_Text@count:	
   661                           ; 1 bytes @ 0x4
   662                           
   663                           
   664                           ; 2 bytes @ 0x4
   665  0074                     	ds	1
   666  0075                     enable_debounce@sensor:	
   667  0075                     ___lwdiv@quotient:	
   668                           ; 1 bytes @ 0x5
   669                           
   670                           
   671                           ; 2 bytes @ 0x5
   672  0075                     	ds	1
   673  0076                     ??_process_debounce:	
   674  0076                     ??_default_handler:	
   675                           ; 1 bytes @ 0x6
   676                           
   677                           
   678                           ; 1 bytes @ 0x6
   679  0076                     	ds	1
   680  0077                     process_debounce@sensor:	
   681  0077                     ___lwdiv@counter:	
   682                           ; 1 bytes @ 0x7
   683                           
   684                           
   685                           ; 1 bytes @ 0x7
   686  0077                     	ds	1
   687  0078                     ?___lwmod:	
   688  0078                     ___lwmod@divisor:	
   689                           ; 2 bytes @ 0x8
   690                           
   691                           
   692                           ; 2 bytes @ 0x8
   693  0078                     	ds	2
   694  007A                     ___lwmod@dividend:	
   695                           
   696                           ; 2 bytes @ 0xA
   697  007A                     	ds	2
   698  007C                     ??___lwmod:	
   699                           
   700                           ; 1 bytes @ 0xC
   701  007C                     	ds	1
   702  007D                     ___lwmod@counter:	
   703                           
   704                           ; 1 bytes @ 0xD
   705  007D                     	ds	1
   706                           
   707                           	psect	cstackBANK0
   708  0020                     __pcstackBANK0:	
   709  0020                     ?_sprintf:	
   710  0020                     sprintf@f:	
   711                           ; 2 bytes @ 0x0
   712                           
   713                           
   714                           ; 2 bytes @ 0x0
   715  0020                     	ds	4
   716  0024                     ??_sprintf:	
   717                           
   718                           ; 1 bytes @ 0x4
   719  0024                     	ds	4
   720  0028                     sprintf@ap:	
   721                           
   722                           ; 1 bytes @ 0x8
   723  0028                     	ds	1
   724  0029                     sprintf@flag:	
   725                           
   726                           ; 1 bytes @ 0x9
   727  0029                     	ds	1
   728  002A                     sprintf@prec:	
   729                           
   730                           ; 1 bytes @ 0xA
   731  002A                     	ds	1
   732  002B                     sprintf@val:	
   733                           
   734                           ; 2 bytes @ 0xB
   735  002B                     	ds	2
   736  002D                     sprintf@sp:	
   737                           
   738                           ; 1 bytes @ 0xD
   739  002D                     	ds	1
   740  002E                     sprintf@c:	
   741                           
   742                           ; 1 bytes @ 0xE
   743  002E                     	ds	1
   744  002F                     ??_ISR:	
   745                           
   746                           ; 1 bytes @ 0xF
   747  002F                     	ds	2
   748  0031                     ISR@str:	
   749                           
   750                           ; 15 bytes @ 0x11
   751  0031                     	ds	15
   752  0040                     ISR@x:	
   753                           
   754                           ; 1 bytes @ 0x20
   755  0040                     	ds	1
   756  0041                     ISR@shouldDebounce:	
   757                           
   758                           ; 2 bytes @ 0x21
   759  0041                     	ds	2
   760  0043                     ISR@i:	
   761                           
   762                           ; 2 bytes @ 0x23
   763  0043                     	ds	2
   764                           
   765                           	psect	maintext
   766  0342                     __pmaintext:	
   767 ;;
   768 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   769 ;;
   770 ;; *************** function _main *****************
   771 ;; Defined at:
   772 ;;		line 36 in file "main.c"
   773 ;; Parameters:    Size  Location     Type
   774 ;;		None
   775 ;; Auto vars:     Size  Location     Type
   776 ;;		None
   777 ;; Return value:  Size  Location     Type
   778 ;;                  2   88[None  ] int 
   779 ;; Registers used:
   780 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   781 ;; Tracked objects:
   782 ;;		On entry : B1F/0
   783 ;;		On exit  : 0/0
   784 ;;		Unchanged: 0/0
   785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   790 ;;Total ram usage:        0 bytes
   791 ;; Hardware stack levels required when called:    7
   792 ;; This function calls:
   793 ;;		_UART_Write_Text
   794 ;;		_autoBaud
   795 ;;		_initializePIC
   796 ;;		_initializeSensors
   797 ;; This function is called by:
   798 ;;		Startup code after reset
   799 ;; This function uses a non-reentrant model
   800 ;;
   801                           
   802                           
   803                           ;psect for function _main
   804  0342                     _main:	
   805                           
   806                           ;main.c: 37: initializePIC();
   807                           
   808                           ;incstack = 0
   809                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   810  0342  3182  2269  3183   	fcall	_initializePIC
   811                           
   812                           ;main.c: 38: initializeSensors();
   813  0345  3181  21FD  3183   	fcall	_initializeSensors
   814  0348                     l1693:	
   815                           ;main.c: 40: while(1){
   816                           
   817                           
   818                           ;main.c: 41: if(shouldAutoBaud){
   819  0348  0020               	movlb	0	; select bank0
   820  0349  0845               	movf	_shouldAutoBaud,w
   821  034A  1903               	btfsc	3,2
   822  034B  2B5C               	goto	l1703
   823                           
   824                           ;main.c: 42: autoBaud();
   825  034C  3181  218E  3183   	fcall	_autoBaud
   826                           
   827                           ;main.c: 43: UART_Write_Text("V");
   828  034F  30CD               	movlw	low (STR_1| (0+32768))
   829  0350  0021               	movlb	1	; select bank1
   830  0351  00A1               	movwf	UART_Write_Text@text^(0+128)
   831  0352  3083               	movlw	high (STR_1| (0+32768))
   832  0353  00A2               	movwf	(UART_Write_Text@text^(0+128)+1)
   833  0354  3183  2386  3183   	fcall	_UART_Write_Text
   834                           
   835                           ;main.c: 44: PIE1bits.RCIE = 1;
   836  0357  0021               	movlb	1	; select bank1
   837  0358  1691               	bsf	17,5	;volatile
   838                           
   839                           ;main.c: 45: PIE1bits.TXIE = 1;
   840  0359  1611               	bsf	17,4	;volatile
   841                           
   842                           ;main.c: 46: shouldAutoBaud = 0;
   843  035A  0020               	movlb	0	; select bank0
   844  035B  01C5               	clrf	_shouldAutoBaud
   845  035C                     l1703:	
   846                           
   847                           ;main.c: 47: }
   848                           ;main.c: 50: if(RCSTAbits.OERR)
   849  035C  0023               	movlb	3	; select bank3
   850  035D  1C9D               	btfss	29,1	;volatile
   851  035E  2B61               	goto	l91
   852                           
   853                           ;main.c: 51: {
   854                           ;main.c: 52: RCSTAbits.SPEN = 0;
   855  035F  139D               	bcf	29,7	;volatile
   856                           
   857                           ;main.c: 53: RCSTAbits.SPEN = 1;
   858  0360  179D               	bsf	29,7	;volatile
   859  0361                     l91:	
   860                           
   861                           ;main.c: 54: }
   862                           ;main.c: 56: if(RCSTAbits.FERR)
   863  0361  1D1D               	btfss	29,2	;volatile
   864  0362  2B48               	goto	l1693
   865                           
   866                           ;main.c: 57: {
   867                           ;main.c: 58: RCSTAbits.SPEN = 0;
   868  0363  139D               	bcf	29,7	;volatile
   869                           
   870                           ;main.c: 59: RCSTAbits.SPEN = 1;
   871  0364  179D               	bsf	29,7	;volatile
   872  0365  2B48               	goto	l1693
   873  0366                     __end_of_main:	
   874                           ;main.c: 60: }
   875                           ;main.c: 61: }
   876                           ;main.c: 63: return (0);
   877                           ;	Return value of _main is never used
   878                           
   879                           
   880                           	psect	text1
   881  01FD                     __ptext1:	
   882 ;; *************** function _initializeSensors *****************
   883 ;; Defined at:
   884 ;;		line 192 in file "main.c"
   885 ;; Parameters:    Size  Location     Type
   886 ;;		None
   887 ;; Auto vars:     Size  Location     Type
   888 ;;  i               2    7[BANK1 ] int 
   889 ;; Return value:  Size  Location     Type
   890 ;;                  1    wreg      void 
   891 ;; Registers used:
   892 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   893 ;; Tracked objects:
   894 ;;		On entry : 0/0
   895 ;;		On exit  : 0/0
   896 ;;		Unchanged: 0/0
   897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   899 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
   900 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
   901 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
   902 ;;Total ram usage:        5 bytes
   903 ;; Hardware stack levels used:    1
   904 ;; Hardware stack levels required when called:    6
   905 ;; This function calls:
   906 ;;		___bmul
   907 ;; This function is called by:
   908 ;;		_main
   909 ;; This function uses a non-reentrant model
   910 ;;
   911                           
   912                           
   913                           ;psect for function _initializeSensors
   914  01FD                     _initializeSensors:	
   915                           
   916                           ;main.c: 193: for(int i = 0; i < 5; ++i){
   917                           
   918                           ;incstack = 0
   919                           ; Regs used in _initializeSensors: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   920  01FD  0021               	movlb	1	; select bank1
   921  01FE  01A7               	clrf	initializeSensors@i^(0+128)
   922  01FF  01A8               	clrf	(initializeSensors@i+1)^(0+128)
   923  0200  0828               	movf	(initializeSensors@i+1)^(0+128),w
   924  0201  3A80               	xorlw	128
   925  0202  00A4               	movwf	??_initializeSensors^(0+128)
   926  0203  3080               	movlw	128
   927  0204  0224               	subwf	??_initializeSensors^(0+128),w
   928  0205  1D03               	skipz
   929  0206  2A09               	goto	u1265
   930  0207  3005               	movlw	5
   931  0208  0227               	subwf	initializeSensors@i^(0+128),w
   932  0209                     u1265:	
   933  0209  1803               	btfsc	3,0
   934  020A  2A63               	goto	l1641
   935  020B                     l1635:	
   936                           
   937                           ;main.c: 194: sensors[i].index = i;
   938  020B  0021               	movlb	1	; select bank1
   939  020C  0827               	movf	initializeSensors@i^(0+128),w
   940  020D  00A4               	movwf	??_initializeSensors^(0+128)
   941  020E  3007               	movlw	7
   942  020F  00A5               	movwf	(??_initializeSensors+1)^(0+128)
   943  0210  0825               	movf	(??_initializeSensors+1)^(0+128),w
   944  0211  00A0               	movwf	___bmul@multiplicand^(0+128)
   945  0212  0827               	movf	initializeSensors@i^(0+128),w
   946  0213  3183  23CF  3181   	fcall	___bmul
   947  0216  3E46               	addlw	(low (_sensors| 0))& (0+255)
   948  0217  0086               	movwf	6
   949  0218  0187               	clrf	7
   950  0219  0021               	movlb	1	; select bank1
   951  021A  0824               	movf	??_initializeSensors^(0+128),w
   952  021B  0081               	movwf	1
   953                           
   954                           ;main.c: 195: sensors[i].port = &PORTA;
   955  021C  300C               	movlw	12
   956  021D  00A4               	movwf	??_initializeSensors^(0+128)
   957  021E  3000               	movlw	0
   958  021F  00A5               	movwf	(??_initializeSensors^(0+128)+1)
   959  0220  3007               	movlw	7
   960  0221  00A6               	movwf	(??_initializeSensors+2)^(0+128)
   961  0222  0826               	movf	(??_initializeSensors+2)^(0+128),w
   962  0223  00A0               	movwf	___bmul@multiplicand^(0+128)
   963  0224  0827               	movf	initializeSensors@i^(0+128),w
   964  0225  3183  23CF  3181   	fcall	___bmul
   965  0228  3E01               	addlw	1
   966  0229  3E46               	addlw	(low (_sensors| 0))& (0+255)
   967  022A  0086               	movwf	6
   968  022B  0187               	clrf	7
   969  022C  0021               	movlb	1	; select bank1
   970  022D  0824               	movf	??_initializeSensors^(0+128),w
   971  022E  3FC0               	movwi [0]fsr1
   972  022F  0825               	movf	(??_initializeSensors^(0+128)+1),w
   973  0230  3FC1               	movwi [1]fsr1
   974                           
   975                           ;main.c: 196: sensors[i].pin = i + 1;
   976  0231  0827               	movf	initializeSensors@i^(0+128),w
   977  0232  3E01               	addlw	1
   978  0233  00A4               	movwf	??_initializeSensors^(0+128)
   979  0234  3007               	movlw	7
   980  0235  00A5               	movwf	(??_initializeSensors+1)^(0+128)
   981  0236  0825               	movf	(??_initializeSensors+1)^(0+128),w
   982  0237  00A0               	movwf	___bmul@multiplicand^(0+128)
   983  0238  0827               	movf	initializeSensors@i^(0+128),w
   984  0239  3183  23CF  3181   	fcall	___bmul
   985  023C  3E03               	addlw	3
   986  023D  3E46               	addlw	(low (_sensors| 0))& (0+255)
   987  023E  0086               	movwf	6
   988  023F  0187               	clrf	7
   989  0240  0021               	movlb	1	; select bank1
   990  0241  0824               	movf	??_initializeSensors^(0+128),w
   991  0242  0081               	movwf	1
   992                           
   993                           ;main.c: 197: sensors[i].debounce.handler = default_handler;
   994  0243  3007               	movlw	7
   995  0244  00A4               	movwf	??_initializeSensors^(0+128)
   996  0245  0824               	movf	??_initializeSensors^(0+128),w
   997  0246  00A0               	movwf	___bmul@multiplicand^(0+128)
   998  0247  0827               	movf	initializeSensors@i^(0+128),w
   999  0248  3183  23CF  3181   	fcall	___bmul
  1000  024B  3E05               	addlw	5
  1001  024C  3E46               	addlw	(low (_sensors| 0))& (0+255)
  1002  024D  0086               	movwf	6
  1003  024E  0187               	clrf	7
  1004  024F  300A               	movlw	low _default_handler
  1005  0250  3FC0               	movwi [0]fsr1
  1006  0251  3004               	movlw	high _default_handler
  1007  0252  3FC1               	movwi [1]fsr1
  1008  0253  3001               	movlw	1
  1009  0254  0021               	movlb	1	; select bank1
  1010  0255  07A7               	addwf	initializeSensors@i^(0+128),f
  1011  0256  3000               	movlw	0
  1012  0257  3DA8               	addwfc	(initializeSensors@i+1)^(0+128),f
  1013  0258  0828               	movf	(initializeSensors@i+1)^(0+128),w
  1014  0259  3A80               	xorlw	128
  1015  025A  00A4               	movwf	??_initializeSensors^(0+128)
  1016  025B  3080               	movlw	128
  1017  025C  0224               	subwf	??_initializeSensors^(0+128),w
  1018  025D  1D03               	skipz
  1019  025E  2A61               	goto	u1275
  1020  025F  3005               	movlw	5
  1021  0260  0227               	subwf	initializeSensors@i^(0+128),w
  1022  0261                     u1275:	
  1023  0261  1C03               	skipc
  1024  0262  2A0B               	goto	l1635
  1025  0263                     l1641:	
  1026                           
  1027                           ;main.c: 198: }
  1028                           ;main.c: 201: sensors[1].debounce.handler = switch_handler;
  1029  0263  301E               	movlw	low _switch_handler
  1030  0264  0020               	movlb	0	; select bank0
  1031  0265  00D2               	movwf	low ((_sensors| 0+12))
  1032  0266  3004               	movlw	high _switch_handler
  1033  0267  00D3               	movwf	(low ((_sensors| 0+12))+1)
  1034  0268  0008               	return
  1035  0269                     __end_of_initializeSensors:	
  1036                           
  1037                           	psect	text2
  1038  03CF                     __ptext2:	
  1039 ;; *************** function ___bmul *****************
  1040 ;; Defined at:
  1041 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul8.c"
  1042 ;; Parameters:    Size  Location     Type
  1043 ;;  multiplier      1    wreg     unsigned char 
  1044 ;;  multiplicand    1    0[BANK1 ] unsigned char 
  1045 ;; Auto vars:     Size  Location     Type
  1046 ;;  multiplier      1    3[BANK1 ] unsigned char 
  1047 ;;  product         1    2[BANK1 ] unsigned char 
  1048 ;; Return value:  Size  Location     Type
  1049 ;;                  1    wreg      unsigned char 
  1050 ;; Registers used:
  1051 ;;		wreg, status,2, status,0
  1052 ;; Tracked objects:
  1053 ;;		On entry : 0/0
  1054 ;;		On exit  : 0/0
  1055 ;;		Unchanged: 0/0
  1056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1057 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  1058 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1059 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  1060 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  1061 ;;Total ram usage:        4 bytes
  1062 ;; Hardware stack levels used:    1
  1063 ;; Hardware stack levels required when called:    5
  1064 ;; This function calls:
  1065 ;;		Nothing
  1066 ;; This function is called by:
  1067 ;;		_initializeSensors
  1068 ;;		_ISR
  1069 ;; This function uses a non-reentrant model
  1070 ;;
  1071                           
  1072                           
  1073                           ;psect for function ___bmul
  1074  03CF                     ___bmul:	
  1075                           
  1076                           ;incstack = 0
  1077                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1078                           ;___bmul@multiplier stored from wreg
  1079  03CF  0021               	movlb	1	; select bank1
  1080  03D0  00A3               	movwf	___bmul@multiplier^(0+128)
  1081  03D1  01A2               	clrf	___bmul@product^(0+128)
  1082  03D2                     l1537:	
  1083  03D2  1C23               	btfss	___bmul@multiplier^(0+128),0
  1084  03D3  2BD8               	goto	l1541
  1085  03D4  0820               	movf	___bmul@multiplicand^(0+128),w
  1086  03D5  00A1               	movwf	??___bmul^(0+128)
  1087  03D6  0821               	movf	??___bmul^(0+128),w
  1088  03D7  07A2               	addwf	___bmul@product^(0+128),f
  1089  03D8                     l1541:	
  1090  03D8  1003               	clrc
  1091  03D9  0DA0               	rlf	___bmul@multiplicand^(0+128),f
  1092  03DA  1003               	clrc
  1093  03DB  0CA3               	rrf	___bmul@multiplier^(0+128),f
  1094  03DC  0823               	movf	___bmul@multiplier^(0+128),w
  1095  03DD  1D03               	btfss	3,2
  1096  03DE  2BD2               	goto	l1537
  1097  03DF  0822               	movf	___bmul@product^(0+128),w
  1098  03E0  0008               	return
  1099  03E1                     __end_of___bmul:	
  1100                           
  1101                           	psect	text3
  1102  0269                     __ptext3:	
  1103 ;; *************** function _initializePIC *****************
  1104 ;; Defined at:
  1105 ;;		line 89 in file "main.c"
  1106 ;; Parameters:    Size  Location     Type
  1107 ;;		None
  1108 ;; Auto vars:     Size  Location     Type
  1109 ;;		None
  1110 ;; Return value:  Size  Location     Type
  1111 ;;                  1    wreg      void 
  1112 ;; Registers used:
  1113 ;;		wreg, status,2
  1114 ;; Tracked objects:
  1115 ;;		On entry : 0/0
  1116 ;;		On exit  : 0/0
  1117 ;;		Unchanged: 0/0
  1118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1123 ;;Total ram usage:        0 bytes
  1124 ;; Hardware stack levels used:    1
  1125 ;; Hardware stack levels required when called:    5
  1126 ;; This function calls:
  1127 ;;		Nothing
  1128 ;; This function is called by:
  1129 ;;		_main
  1130 ;; This function uses a non-reentrant model
  1131 ;;
  1132                           
  1133                           
  1134                           ;psect for function _initializePIC
  1135  0269                     _initializePIC:	
  1136                           
  1137                           ;main.c: 95: OSCCON = 0b00111000;
  1138                           
  1139                           ;incstack = 0
  1140                           ; Regs used in _initializePIC: [wreg+status,2]
  1141  0269  3038               	movlw	56
  1142  026A  0021               	movlb	1	; select bank1
  1143  026B  0099               	movwf	25	;volatile
  1144                           
  1145                           ;main.c: 106: INTCON = 0b11001000;
  1146  026C  30C8               	movlw	200
  1147  026D  008B               	movwf	11	;volatile
  1148                           
  1149                           ;main.c: 109: TRISCbits.TRISC0 = 0;
  1150  026E  100E               	bcf	14,0	;volatile
  1151                           
  1152                           ;main.c: 110: TRISCbits.TRISC1 = 0;
  1153  026F  108E               	bcf	14,1	;volatile
  1154                           
  1155                           ;main.c: 111: TRISCbits.TRISC2 = 0;
  1156  0270  110E               	bcf	14,2	;volatile
  1157                           
  1158                           ;main.c: 112: TRISCbits.TRISC3 = 0;
  1159  0271  118E               	bcf	14,3	;volatile
  1160                           
  1161                           ;main.c: 113: LATC = 0;
  1162  0272  0022               	movlb	2	; select bank2
  1163  0273  018E               	clrf	14	;volatile
  1164                           
  1165                           ;main.c: 116: TRISAbits.TRISA0 = 1;
  1166  0274  0021               	movlb	1	; select bank1
  1167  0275  140C               	bsf	12,0	;volatile
  1168                           
  1169                           ;main.c: 117: ANSELAbits.ANSA0 = 1;
  1170  0276  0023               	movlb	3	; select bank3
  1171  0277  140C               	bsf	12,0	;volatile
  1172                           
  1173                           ;main.c: 120: TRISAbits.TRISA1 = 1;
  1174  0278  0021               	movlb	1	; select bank1
  1175  0279  148C               	bsf	12,1	;volatile
  1176                           
  1177                           ;main.c: 121: ANSELAbits.ANSA1 = 0;
  1178  027A  0023               	movlb	3	; select bank3
  1179  027B  108C               	bcf	12,1	;volatile
  1180                           
  1181                           ;main.c: 124: TRISAbits.TRISA2 = 1;
  1182  027C  0021               	movlb	1	; select bank1
  1183  027D  150C               	bsf	12,2	;volatile
  1184                           
  1185                           ;main.c: 125: ANSELAbits.ANSA2 = 0;
  1186  027E  0023               	movlb	3	; select bank3
  1187  027F  110C               	bcf	12,2	;volatile
  1188                           
  1189                           ;main.c: 128: TRISAbits.TRISA3 = 1;
  1190  0280  0021               	movlb	1	; select bank1
  1191  0281  158C               	bsf	12,3	;volatile
  1192                           
  1193                           ;main.c: 131: TRISAbits.TRISA4 = 1;
  1194  0282  160C               	bsf	12,4	;volatile
  1195                           
  1196                           ;main.c: 132: ANSELAbits.ANSA4 = 0;
  1197  0283  0023               	movlb	3	; select bank3
  1198  0284  120C               	bcf	12,4	;volatile
  1199                           
  1200                           ;main.c: 135: TRISAbits.TRISA5 = 1;
  1201  0285  0021               	movlb	1	; select bank1
  1202  0286  168C               	bsf	12,5	;volatile
  1203                           
  1204                           ;main.c: 138: IOCANbits.IOCAN1 = 1;
  1205  0287  0027               	movlb	7	; select bank7
  1206  0288  1492               	bsf	18,1	;volatile
  1207                           
  1208                           ;main.c: 139: IOCANbits.IOCAN2 = 1;
  1209  0289  1512               	bsf	18,2	;volatile
  1210                           
  1211                           ;main.c: 140: IOCANbits.IOCAN4 = 1;
  1212  028A  1612               	bsf	18,4	;volatile
  1213                           
  1214                           ;main.c: 143: IOCAPbits.IOCAP3 = 1;
  1215  028B  1591               	bsf	17,3	;volatile
  1216                           
  1217                           ;main.c: 144: IOCAPbits.IOCAP5 = 1;
  1218  028C  1691               	bsf	17,5	;volatile
  1219                           
  1220                           ;main.c: 151: ADCON0 = 0b00000001;
  1221  028D  3001               	movlw	1
  1222  028E  0021               	movlb	1	; select bank1
  1223  028F  009D               	movwf	29	;volatile
  1224                           
  1225                           ;main.c: 158: ADCON1 = 0b10000000;
  1226  0290  3080               	movlw	128
  1227  0291  009E               	movwf	30	;volatile
  1228                           
  1229                           ;main.c: 160: PIR1bits.ADIF = 0;
  1230  0292  0020               	movlb	0	; select bank0
  1231  0293  1311               	bcf	17,6	;volatile
  1232                           
  1233                           ;main.c: 161: PIE1bits.ADIE = 1;
  1234  0294  0021               	movlb	1	; select bank1
  1235  0295  1711               	bsf	17,6	;volatile
  1236                           
  1237                           ;main.c: 164: T2CON = 0b01111111;
  1238  0296  307F               	movlw	127
  1239  0297  0020               	movlb	0	; select bank0
  1240  0298  009C               	movwf	28	;volatile
  1241                           
  1242                           ;main.c: 165: PIE1bits.TMR2IE = 1;
  1243  0299  0021               	movlb	1	; select bank1
  1244  029A  1491               	bsf	17,1	;volatile
  1245                           
  1246                           ;main.c: 172: T6CON = 0b00100000;
  1247  029B  3020               	movlw	32
  1248  029C  0028               	movlb	8	; select bank8
  1249  029D  009E               	movwf	30	;volatile
  1250                           
  1251                           ;main.c: 173: PR6 = 125;
  1252  029E  307D               	movlw	125
  1253  029F  009D               	movwf	29	;volatile
  1254                           
  1255                           ;main.c: 174: PIE3bits.TMR6IE = 1;
  1256  02A0  0021               	movlb	1	; select bank1
  1257  02A1  1593               	bsf	19,3	;volatile
  1258                           
  1259                           ;main.c: 177: APFCON0bits.RXDTSEL = 1;
  1260  02A2  0022               	movlb	2	; select bank2
  1261  02A3  179D               	bsf	29,7	;volatile
  1262                           
  1263                           ;main.c: 178: APFCON0bits.TXCKSEL = 1;
  1264  02A4  151D               	bsf	29,2	;volatile
  1265                           
  1266                           ;main.c: 180: BRG16 = 1;
  1267  02A5  0023               	movlb	3	; select bank3
  1268  02A6  159F               	bsf	31,3	;volatile
  1269                           
  1270                           ;main.c: 181: TXSTAbits.BRGH = 1;
  1271  02A7  151E               	bsf	30,2	;volatile
  1272                           
  1273                           ;main.c: 182: SPBRG = 12;
  1274  02A8  3000               	movlw	0
  1275  02A9  009C               	movwf	28	;volatile
  1276  02AA  300C               	movlw	12
  1277  02AB  009B               	movwf	27	;volatile
  1278                           
  1279                           ;main.c: 184: TXSTAbits.SYNC = 0;
  1280  02AC  121E               	bcf	30,4	;volatile
  1281                           
  1282                           ;main.c: 185: RCSTAbits.SPEN = 1;
  1283  02AD  179D               	bsf	29,7	;volatile
  1284                           
  1285                           ;main.c: 186: TXSTAbits.TXEN = 1;
  1286  02AE  169E               	bsf	30,5	;volatile
  1287                           
  1288                           ;main.c: 187: RCSTAbits.CREN = 1;
  1289  02AF  161D               	bsf	29,4	;volatile
  1290                           
  1291                           ;main.c: 189: PIE1bits.RCIE = 1;
  1292  02B0  0021               	movlb	1	; select bank1
  1293  02B1  1691               	bsf	17,5	;volatile
  1294  02B2  0008               	return
  1295  02B3                     __end_of_initializePIC:	
  1296                           
  1297                           	psect	text4
  1298  018E                     __ptext4:	
  1299 ;; *************** function _autoBaud *****************
  1300 ;; Defined at:
  1301 ;;		line 204 in file "main.c"
  1302 ;; Parameters:    Size  Location     Type
  1303 ;;		None
  1304 ;; Auto vars:     Size  Location     Type
  1305 ;;  index           2    4[BANK1 ] int 
  1306 ;;  sync_count      2    2[BANK1 ] int 
  1307 ;;  discard         1    1[BANK1 ] unsigned char 
  1308 ;; Return value:  Size  Location     Type
  1309 ;;                  1    wreg      void 
  1310 ;; Registers used:
  1311 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1312 ;; Tracked objects:
  1313 ;;		On entry : 0/0
  1314 ;;		On exit  : 0/0
  1315 ;;		Unchanged: 0/0
  1316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1318 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  1319 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  1320 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  1321 ;;Total ram usage:        6 bytes
  1322 ;; Hardware stack levels used:    1
  1323 ;; Hardware stack levels required when called:    5
  1324 ;; This function calls:
  1325 ;;		Nothing
  1326 ;; This function is called by:
  1327 ;;		_main
  1328 ;; This function uses a non-reentrant model
  1329 ;;
  1330                           
  1331                           
  1332                           ;psect for function _autoBaud
  1333  018E                     _autoBaud:	
  1334  018E  29F3               	goto	l1673
  1335  018F                     l126:	
  1336                           ;main.c: 213: {
  1337                           ;main.c: 214: case 0:
  1338                           
  1339                           ;main.c: 212: switch(index)
  1340                           
  1341                           ;main.c: 208: int sync_count;
  1342                           ;main.c: 210: try:
  1343                           
  1344                           ;main.c: 206: char discard;
  1345                           ;main.c: 207: int index = 0;
  1346                           
  1347                           ;incstack = 0
  1348                           ; Regs used in _autoBaud: [wreg-fsr0h+status,2+status,0]
  1349                           
  1350                           
  1351                           ;main.c: 215: BAUDCONbits.BRG16 = 0;
  1352  018F  0023               	movlb	3	; select bank3
  1353  0190  119F               	bcf	31,3	;volatile
  1354  0191  2997               	goto	L1
  1355  0192                     l128:	
  1356                           ;main.c: 218: case 1:
  1357                           
  1358                           ;main.c: 217: break;
  1359                           
  1360                           ;main.c: 216: TXSTAbits.BRGH = 0;
  1361                           
  1362                           
  1363                           ;main.c: 219: BAUDCONbits.BRG16 = 0;
  1364  0192  0023               	movlb	3	; select bank3
  1365  0193  119F               	bcf	31,3	;volatile
  1366  0194  299B               	goto	L2
  1367  0195                     l129:	
  1368                           ;main.c: 222: case 2:
  1369                           
  1370                           ;main.c: 221: break;
  1371                           
  1372                           ;main.c: 220: TXSTAbits.BRGH = 1;
  1373                           
  1374                           
  1375                           ;main.c: 223: BAUDCONbits.BRG16 = 1;
  1376  0195  0023               	movlb	3	; select bank3
  1377  0196  159F               	bsf	31,3	;volatile
  1378  0197                     L1:	
  1379                           
  1380                           ;main.c: 224: TXSTAbits.BRGH = 0;
  1381  0197  111E               	bcf	30,2	;volatile
  1382                           
  1383                           ;main.c: 225: break;
  1384  0198  299C               	goto	l127
  1385  0199                     l130:	
  1386                           ;main.c: 226: case 3:
  1387                           
  1388                           
  1389                           ;main.c: 227: BAUDCONbits.BRG16 = 1;
  1390  0199  0023               	movlb	3	; select bank3
  1391  019A  159F               	bsf	31,3	;volatile
  1392  019B                     L2:	
  1393                           
  1394                           ;main.c: 228: TXSTAbits.BRGH = 1;
  1395  019B  151E               	bsf	30,2	;volatile
  1396  019C                     l127:	
  1397                           ;main.c: 230: }
  1398                           
  1399                           ;main.c: 229: break;
  1400                           
  1401                           
  1402                           ;main.c: 232: BAUDCONbits.ABDEN = 1;
  1403  019C  0023               	movlb	3	; select bank3
  1404  019D  141F               	bsf	31,0	;volatile
  1405  019E                     l131:	
  1406                           ;main.c: 233: while(!PIR1bits.RCIF);
  1407                           
  1408  019E  0020               	movlb	0	; select bank0
  1409  019F  1E91               	btfss	17,5	;volatile
  1410  01A0  299E               	goto	l131
  1411                           
  1412                           ;main.c: 234: discard = RCREG;
  1413  01A1  0023               	movlb	3	; select bank3
  1414  01A2  0819               	movf	25,w	;volatile
  1415  01A3  0021               	movlb	1	; select bank1
  1416  01A4  00A0               	movwf	??_autoBaud^(0+128)
  1417  01A5  0820               	movf	??_autoBaud^(0+128),w
  1418  01A6  00A1               	movwf	autoBaud@discard^(0+128)
  1419                           
  1420                           ;main.c: 236: if(SPBRG != 0)
  1421  01A7  0023               	movlb	3	; select bank3
  1422  01A8  081B               	movf	27,w	;volatile
  1423  01A9  041C               	iorwf	28,w	;volatile
  1424  01AA  1903               	btfsc	3,2
  1425  01AB  29B0               	goto	l1655
  1426                           
  1427                           ;main.c: 237: {
  1428                           ;main.c: 238: --SPBRG;
  1429  01AC  3001               	movlw	1
  1430  01AD  029B               	subwf	27,f	;volatile
  1431  01AE  3000               	movlw	0
  1432  01AF  3B9C               	subwfb	28,f	;volatile
  1433  01B0                     l1655:	
  1434                           
  1435                           ;main.c: 239: }
  1436                           ;main.c: 242: if(BAUDCONbits.ABDOVF)
  1437  01B0  1F9F               	btfss	31,7	;volatile
  1438  01B1  29C8               	goto	l135
  1439                           
  1440                           ;main.c: 243: {
  1441                           ;main.c: 244: BAUDCONbits.ABDOVF = 0;
  1442  01B2  139F               	bcf	31,7	;volatile
  1443  01B3                     l1647:	
  1444                           
  1445                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1446                           ; Switch size 1, requested type "space"
  1447                           ; Number of cases is 1, Range of values is 0 to 0
  1448                           ; switch strategies available:
  1449                           ; Name         Instructions Cycles
  1450                           ; simple_byte            4     3 (average)
  1451                           ; direct_byte            8     6 (fixed)
  1452                           ; jumptable            260     6 (fixed)
  1453                           ;	Chosen strategy is simple_byte
  1454  01B3  0021               	movlb	1	; select bank1
  1455  01B4  0825               	movf	(autoBaud@index+1)^(0+128),w
  1456  01B5  3A00               	xorlw	0	; case 0
  1457  01B6  1903               	skipnz
  1458  01B7  29B9               	goto	l1807
  1459  01B8  299C               	goto	l127
  1460  01B9                     l1807:	
  1461                           
  1462                           ; Switch size 1, requested type "space"
  1463                           ; Number of cases is 4, Range of values is 0 to 3
  1464                           ; switch strategies available:
  1465                           ; Name         Instructions Cycles
  1466                           ; simple_byte           13     7 (average)
  1467                           ; direct_byte           14     6 (fixed)
  1468                           ; jumptable            260     6 (fixed)
  1469                           ;	Chosen strategy is simple_byte
  1470  01B9  0824               	movf	autoBaud@index^(0+128),w
  1471  01BA  3A00               	xorlw	0	; case 0
  1472  01BB  1903               	skipnz
  1473  01BC  298F               	goto	l126
  1474  01BD  3A01               	xorlw	1	; case 1
  1475  01BE  1903               	skipnz
  1476  01BF  2992               	goto	l128
  1477  01C0  3A03               	xorlw	3	; case 2
  1478  01C1  1903               	skipnz
  1479  01C2  2995               	goto	l129
  1480  01C3  3A01               	xorlw	1	; case 3
  1481  01C4  1903               	skipnz
  1482  01C5  2999               	goto	l130
  1483  01C6  299C               	goto	l127
  1484                           
  1485                           ;main.c: 245: goto try;
  1486  01C7  299C               	goto	l127
  1487  01C8                     l135:	
  1488                           
  1489                           ;main.c: 246: }
  1490                           ;main.c: 247: if(!BAUDCONbits.BRG16 && SPBRGH)
  1491  01C8  199F               	btfsc	31,3	;volatile
  1492  01C9  29CD               	goto	l1663
  1493  01CA  081C               	movf	28,w	;volatile
  1494  01CB  1D03               	btfss	3,2
  1495  01CC  29B3               	goto	l1647
  1496  01CD                     l1663:	
  1497                           ;main.c: 248: {
  1498                           ;main.c: 249: goto try;
  1499                           
  1500                           
  1501                           ;main.c: 250: }
  1502                           ;main.c: 253: for (sync_count=0; sync_count < 2; ++sync_count)
  1503  01CD  0021               	movlb	1	; select bank1
  1504  01CE  01A2               	clrf	autoBaud@sync_count^(0+128)
  1505  01CF  01A3               	clrf	(autoBaud@sync_count+1)^(0+128)
  1506  01D0                     L3:	
  1507  01D0  0823               	movf	(autoBaud@sync_count+1)^(0+128),w
  1508  01D1  3A80               	xorlw	128
  1509  01D2  00A0               	movwf	??_autoBaud^(0+128)
  1510  01D3  3080               	movlw	128
  1511  01D4  0220               	subwf	??_autoBaud^(0+128),w
  1512  01D5  1D03               	skipz
  1513  01D6  29D9               	goto	u1335
  1514  01D7  3002               	movlw	2
  1515  01D8  0222               	subwf	autoBaud@sync_count^(0+128),w
  1516  01D9                     u1335:	
  1517  01D9  1803               	btfsc	3,0
  1518  01DA  0008               	return
  1519  01DB                     l139:	
  1520                           ;main.c: 254: {
  1521                           ;main.c: 255: while(!PIR1bits.RCIF);
  1522                           
  1523  01DB  0020               	movlb	0	; select bank0
  1524  01DC  1E91               	btfss	17,5	;volatile
  1525  01DD  29DB               	goto	l139
  1526                           
  1527                           ;main.c: 256: if(RCREG != 'U')
  1528  01DE  3055               	movlw	85
  1529  01DF  0023               	movlb	3	; select bank3
  1530  01E0  0619               	xorwf	25,w	;volatile
  1531  01E1  1903               	btfsc	3,2
  1532  01E2  29F7               	goto	l1675
  1533                           
  1534                           ;main.c: 257: {
  1535                           ;main.c: 258: ++index;
  1536  01E3  3001               	movlw	1
  1537  01E4  0021               	movlb	1	; select bank1
  1538  01E5  07A4               	addwf	autoBaud@index^(0+128),f
  1539  01E6  3000               	movlw	0
  1540  01E7  3DA5               	addwfc	(autoBaud@index+1)^(0+128),f
  1541                           
  1542                           ;main.c: 259: if(index > 3)
  1543  01E8  0825               	movf	(autoBaud@index+1)^(0+128),w
  1544  01E9  3A80               	xorlw	128
  1545  01EA  00A0               	movwf	??_autoBaud^(0+128)
  1546  01EB  3080               	movlw	128
  1547  01EC  0220               	subwf	??_autoBaud^(0+128),w
  1548  01ED  1D03               	skipz
  1549  01EE  29F1               	goto	u1365
  1550  01EF  3004               	movlw	4
  1551  01F0  0224               	subwf	autoBaud@index^(0+128),w
  1552  01F1                     u1365:	
  1553  01F1  1C03               	skipc
  1554  01F2  29B3               	goto	l1647
  1555  01F3                     l1673:	
  1556                           
  1557                           ;main.c: 260: index = 0;
  1558  01F3  0021               	movlb	1	; select bank1
  1559  01F4  01A4               	clrf	autoBaud@index^(0+128)
  1560  01F5  01A5               	clrf	(autoBaud@index+1)^(0+128)
  1561                           
  1562                           ;main.c: 261: goto try;
  1563  01F6  29B3               	goto	l1647
  1564  01F7                     l1675:	
  1565  01F7  3001               	movlw	1
  1566  01F8  0021               	movlb	1	; select bank1
  1567  01F9  07A2               	addwf	autoBaud@sync_count^(0+128),f
  1568  01FA  3000               	movlw	0
  1569  01FB  3DA3               	addwfc	(autoBaud@sync_count+1)^(0+128),f
  1570  01FC  29D0               	goto	L3
  1571  01FD                     __end_of_autoBaud:	
  1572                           
  1573                           	psect	text5
  1574  0386                     __ptext5:	
  1575 ;; *************** function _UART_Write_Text *****************
  1576 ;; Defined at:
  1577 ;;		line 80 in file "main.c"
  1578 ;; Parameters:    Size  Location     Type
  1579 ;;  text            2    1[BANK1 ] PTR unsigned char 
  1580 ;;		 -> ISR@str(15), STR_2(3), STR_1(2), 
  1581 ;; Auto vars:     Size  Location     Type
  1582 ;;  count           2    4[BANK1 ] int 
  1583 ;; Return value:  Size  Location     Type
  1584 ;;                  1    wreg      void 
  1585 ;; Registers used:
  1586 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1587 ;; Tracked objects:
  1588 ;;		On entry : 0/0
  1589 ;;		On exit  : 0/0
  1590 ;;		Unchanged: 0/0
  1591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1592 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1593 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1594 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  1595 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  1596 ;;Total ram usage:        5 bytes
  1597 ;; Hardware stack levels used:    1
  1598 ;; Hardware stack levels required when called:    6
  1599 ;; This function calls:
  1600 ;;		_UART_Write
  1601 ;; This function is called by:
  1602 ;;		_main
  1603 ;; This function uses a non-reentrant model
  1604 ;;
  1605                           
  1606                           
  1607                           ;psect for function _UART_Write_Text
  1608  0386                     _UART_Write_Text:	
  1609                           
  1610                           ;main.c: 82: int count;
  1611                           ;main.c: 83: for(count = 0; text[count]!='\0'; count++)
  1612                           
  1613                           ;incstack = 0
  1614                           ; Regs used in _UART_Write_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1615  0386  0021               	movlb	1	; select bank1
  1616  0387  01A4               	clrf	UART_Write_Text@count^(0+128)
  1617  0388  01A5               	clrf	(UART_Write_Text@count+1)^(0+128)
  1618  0389                     l1687:	
  1619  0389  0821               	movf	UART_Write_Text@text^(0+128),w
  1620  038A  0724               	addwf	UART_Write_Text@count^(0+128),w
  1621  038B  0084               	movwf	4
  1622  038C  0822               	movf	(UART_Write_Text@text+1)^(0+128),w
  1623  038D  3D25               	addwfc	(UART_Write_Text@count+1)^(0+128),w
  1624  038E  0085               	movwf	5
  1625  038F  0012               	moviw fsr0++
  1626  0390  1903               	btfsc	3,2
  1627  0391  0008               	return
  1628                           
  1629                           ;main.c: 84: {
  1630                           ;main.c: 85: UART_Write(text[count]);
  1631  0392  0821               	movf	UART_Write_Text@text^(0+128),w
  1632  0393  0724               	addwf	UART_Write_Text@count^(0+128),w
  1633  0394  0084               	movwf	4
  1634  0395  0822               	movf	(UART_Write_Text@text+1)^(0+128),w
  1635  0396  3D25               	addwfc	(UART_Write_Text@count+1)^(0+128),w
  1636  0397  0085               	movwf	5
  1637  0398  0800               	movf	0,w	;code access
  1638  0399  3184  2400  3183   	fcall	_UART_Write
  1639  039C  3001               	movlw	1
  1640  039D  0021               	movlb	1	; select bank1
  1641  039E  07A4               	addwf	UART_Write_Text@count^(0+128),f
  1642  039F  3000               	movlw	0
  1643  03A0  3DA5               	addwfc	(UART_Write_Text@count+1)^(0+128),f
  1644  03A1  2B89               	goto	l1687
  1645  03A2                     __end_of_UART_Write_Text:	
  1646                           
  1647                           	psect	text6
  1648  0400                     __ptext6:	
  1649 ;; *************** function _UART_Write *****************
  1650 ;; Defined at:
  1651 ;;		line 74 in file "main.c"
  1652 ;; Parameters:    Size  Location     Type
  1653 ;;  data            1    wreg     unsigned char 
  1654 ;; Auto vars:     Size  Location     Type
  1655 ;;  data            1    0[BANK1 ] unsigned char 
  1656 ;; Return value:  Size  Location     Type
  1657 ;;                  1    wreg      void 
  1658 ;; Registers used:
  1659 ;;		wreg
  1660 ;; Tracked objects:
  1661 ;;		On entry : 0/0
  1662 ;;		On exit  : 0/0
  1663 ;;		Unchanged: 0/0
  1664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1666 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  1667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1668 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  1669 ;;Total ram usage:        1 bytes
  1670 ;; Hardware stack levels used:    1
  1671 ;; Hardware stack levels required when called:    5
  1672 ;; This function calls:
  1673 ;;		Nothing
  1674 ;; This function is called by:
  1675 ;;		_UART_Write_Text
  1676 ;; This function uses a non-reentrant model
  1677 ;;
  1678                           
  1679                           
  1680                           ;psect for function _UART_Write
  1681  0400                     _UART_Write:	
  1682                           
  1683                           ;incstack = 0
  1684                           ; Regs used in _UART_Write: [wreg]
  1685                           ;UART_Write@data stored from wreg
  1686  0400  0021               	movlb	1	; select bank1
  1687  0401  00A0               	movwf	UART_Write@data^(0+128)
  1688  0402                     l104:	
  1689                           ;main.c: 76: while(!TRMT);
  1690                           
  1691  0402  0023               	movlb	3	; select bank3
  1692  0403  1C9E               	btfss	30,1	;volatile
  1693  0404  2C02               	goto	l104
  1694                           
  1695                           ;main.c: 77: TXREG = data;
  1696  0405  0021               	movlb	1	; select bank1
  1697  0406  0820               	movf	UART_Write@data^(0+128),w
  1698  0407  0023               	movlb	3	; select bank3
  1699  0408  009A               	movwf	26	;volatile
  1700  0409  0008               	return
  1701  040A                     __end_of_UART_Write:	
  1702                           
  1703                           	psect	intentry
  1704  0004                     __pintentry:	
  1705 ;; *************** function _ISR *****************
  1706 ;; Defined at:
  1707 ;;		line 267 in file "main.c"
  1708 ;; Parameters:    Size  Location     Type
  1709 ;;		None
  1710 ;; Auto vars:     Size  Location     Type
  1711 ;;  i               2   35[BANK0 ] int 
  1712 ;;  x               1   32[BANK0 ] unsigned char 
  1713 ;;  str            15   17[BANK0 ] unsigned char [15]
  1714 ;;  shouldDeboun    2   33[BANK0 ] int 
  1715 ;; Return value:  Size  Location     Type
  1716 ;;                  1    wreg      void 
  1717 ;; Registers used:
  1718 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1719 ;; Tracked objects:
  1720 ;;		On entry : 0/0
  1721 ;;		On exit  : 0/0
  1722 ;;		Unchanged: 0/0
  1723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1725 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1726 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1727 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1728 ;;Total ram usage:       22 bytes
  1729 ;; Hardware stack levels used:    1
  1730 ;; Hardware stack levels required when called:    4
  1731 ;; This function calls:
  1732 ;;		_enable_debounce
  1733 ;;		_process_debounce
  1734 ;;		_sprintf
  1735 ;;		i1_UART_Write_Text
  1736 ;;		i1___bmul
  1737 ;; This function is called by:
  1738 ;;		Interrupt level 1
  1739 ;; This function uses a non-reentrant model
  1740 ;;
  1741                           
  1742  0004                     _ISR:	
  1743                           
  1744                           ;incstack = 0
  1745  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  1746                           
  1747                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1748  0005  3180               	pagesel	$
  1749  0006  0020               	movlb	0	; select bank0
  1750  0007  087F               	movf	127,w
  1751  0008  00B0               	movwf	??_ISR+1
  1752                           
  1753                           ;main.c: 268: int shouldDebounce = 0;
  1754  0009  01C1               	clrf	ISR@shouldDebounce
  1755  000A  01C2               	clrf	ISR@shouldDebounce+1
  1756                           
  1757                           ;main.c: 271: if(PIR3bits.TMR6IF){
  1758  000B  1D93               	btfss	19,3	;volatile
  1759  000C  283C               	goto	i1l147
  1760                           
  1761                           ;main.c: 272: T6CONbits.TMR6ON = 0;
  1762  000D  0028               	movlb	8	; select bank8
  1763  000E  111E               	bcf	30,2	;volatile
  1764                           
  1765                           ;main.c: 274: for(int i = 0; i < 5; ++i){
  1766  000F  0020               	movlb	0	; select bank0
  1767  0010  01C3               	clrf	ISR@i
  1768  0011  01C4               	clrf	ISR@i+1
  1769  0012  0844               	movf	ISR@i+1,w
  1770  0013  3A80               	xorlw	128
  1771  0014  00AF               	movwf	??_ISR
  1772  0015  3080               	movlw	128
  1773  0016  022F               	subwf	??_ISR,w
  1774  0017  1D03               	skipz
  1775  0018  281B               	goto	u143_25
  1776  0019  3005               	movlw	5
  1777  001A  0243               	subwf	ISR@i,w
  1778  001B                     u143_25:	
  1779  001B  1803               	btfsc	3,0
  1780  001C  283A               	goto	i1l149
  1781  001D                     i1l1721:	
  1782                           
  1783                           ;main.c: 275: process_debounce(&sensors[i]);
  1784  001D  3007               	movlw	7
  1785  001E  0020               	movlb	0	; select bank0
  1786  001F  00AF               	movwf	??_ISR
  1787  0020  082F               	movf	??_ISR,w
  1788  0021  00F0               	movwf	i1___bmul@multiplicand
  1789  0022  0843               	movf	ISR@i,w
  1790  0023  3183  23E1  3180   	fcall	i1___bmul
  1791  0026  3E46               	addlw	(low (_sensors| 0))& (0+255)
  1792  0027  3182  22E7  3180   	fcall	_process_debounce
  1793  002A  3001               	movlw	1
  1794  002B  0020               	movlb	0	; select bank0
  1795  002C  07C3               	addwf	ISR@i,f
  1796  002D  3000               	movlw	0
  1797  002E  3DC4               	addwfc	ISR@i+1,f
  1798  002F  0844               	movf	ISR@i+1,w
  1799  0030  3A80               	xorlw	128
  1800  0031  00AF               	movwf	??_ISR
  1801  0032  3080               	movlw	128
  1802  0033  022F               	subwf	??_ISR,w
  1803  0034  1D03               	skipz
  1804  0035  2838               	goto	u144_25
  1805  0036  3005               	movlw	5
  1806  0037  0243               	subwf	ISR@i,w
  1807  0038                     u144_25:	
  1808  0038  1C03               	skipc
  1809  0039  281D               	goto	i1l1721
  1810  003A                     i1l149:	
  1811                           
  1812                           ;main.c: 276: }
  1813                           ;main.c: 278: TMR6IF = 0;
  1814  003A  0020               	movlb	0	; select bank0
  1815  003B  1193               	bcf	19,3	;volatile
  1816  003C                     i1l147:	
  1817                           
  1818                           ;main.c: 279: }
  1819                           ;main.c: 283: if(ADIF){
  1820  003C  1F11               	btfss	17,6	;volatile
  1821  003D  2859               	goto	i1l1735
  1822                           
  1823                           ;main.c: 284: char str[15];
  1824                           ;main.c: 285: sprintf(str," %d", ADRES);
  1825  003E  30C6               	movlw	low (STR_3| (0+32768))
  1826  003F  00A0               	movwf	sprintf@f
  1827  0040  3083               	movlw	high (STR_3| (0+32768))
  1828  0041  00A1               	movwf	sprintf@f+1
  1829  0042  0021               	movlb	1	; select bank1
  1830  0043  081C               	movf	28,w	;volatile
  1831  0044  0020               	movlb	0	; select bank0
  1832  0045  00A3               	movwf	?_sprintf+3
  1833  0046  0021               	movlb	1	; select bank1
  1834  0047  081B               	movf	27,w	;volatile
  1835  0048  0020               	movlb	0	; select bank0
  1836  0049  00A2               	movwf	?_sprintf+2
  1837  004A  3031               	movlw	(low (ISR@str| 0))& (0+255)
  1838  004B  3180  20C1  3180   	fcall	_sprintf
  1839                           
  1840                           ;main.c: 286: UART_Write_Text(str);
  1841  004E  3031               	movlw	low ISR@str
  1842  004F  00F1               	movwf	i1UART_Write_Text@text
  1843  0050  3000               	movlw	high ISR@str
  1844  0051  00F2               	movwf	i1UART_Write_Text@text+1
  1845  0052  3183  23A2  3180   	fcall	i1_UART_Write_Text
  1846                           
  1847                           ;main.c: 287: ADCON0bits.GO = 0;
  1848  0055  0021               	movlb	1	; select bank1
  1849  0056  109D               	bcf	29,1	;volatile
  1850                           
  1851                           ;main.c: 288: ADIF = 0;
  1852  0057  0020               	movlb	0	; select bank0
  1853  0058  1311               	bcf	17,6	;volatile
  1854  0059                     i1l1735:	
  1855                           
  1856                           ;main.c: 289: }
  1857                           ;main.c: 293: if(PIR1bits.RCIF){
  1858  0059  1E91               	btfss	17,5	;volatile
  1859  005A  2862               	goto	i1l1741
  1860                           
  1861                           ;main.c: 294: char x = RCREG;
  1862  005B  0023               	movlb	3	; select bank3
  1863  005C  0819               	movf	25,w	;volatile
  1864  005D  0020               	movlb	0	; select bank0
  1865  005E  00AF               	movwf	??_ISR
  1866  005F  082F               	movf	??_ISR,w
  1867  0060  00C0               	movwf	ISR@x
  1868                           
  1869                           ;main.c: 295: PIR1bits.RCIF = 0;
  1870  0061  1291               	bcf	17,5	;volatile
  1871  0062                     i1l1741:	
  1872                           
  1873                           ;main.c: 296: }
  1874                           ;main.c: 299: if(PIR1bits.TMR2IF){
  1875  0062  1C91               	btfss	17,1	;volatile
  1876  0063  2868               	goto	i1l152
  1877                           
  1878                           ;main.c: 300: ADCON0bits.GO = 1;
  1879  0064  0021               	movlb	1	; select bank1
  1880  0065  149D               	bsf	29,1	;volatile
  1881                           
  1882                           ;main.c: 301: PIR1bits.TMR2IF = 0;
  1883  0066  0020               	movlb	0	; select bank0
  1884  0067  1091               	bcf	17,1	;volatile
  1885  0068                     i1l152:	
  1886                           
  1887                           ;main.c: 302: }
  1888                           ;main.c: 305: if(IOCAFbits.IOCAF1){
  1889  0068  0027               	movlb	7	; select bank7
  1890  0069  1C93               	btfss	19,1	;volatile
  1891  006A  2876               	goto	i1l1751
  1892                           
  1893                           ;main.c: 306: shouldDebounce = 1;
  1894  006B  3001               	movlw	1
  1895  006C  0020               	movlb	0	; select bank0
  1896  006D  00C1               	movwf	ISR@shouldDebounce
  1897  006E  3000               	movlw	0
  1898  006F  00C2               	movwf	ISR@shouldDebounce+1
  1899                           
  1900                           ;main.c: 307: enable_debounce(&sensors[0]);
  1901  0070  3046               	movlw	(low (_sensors| 0))& (0+255)
  1902  0071  3183  2366  3180   	fcall	_enable_debounce
  1903                           
  1904                           ;main.c: 308: IOCAFbits.IOCAF1 = 0;
  1905  0074  0027               	movlb	7	; select bank7
  1906  0075  1093               	bcf	19,1	;volatile
  1907  0076                     i1l1751:	
  1908                           
  1909                           ;main.c: 309: }
  1910                           ;main.c: 312: if(IOCAFbits.IOCAF2){
  1911  0076  1D13               	btfss	19,2	;volatile
  1912  0077  2883               	goto	i1l1759
  1913                           
  1914                           ;main.c: 313: shouldDebounce = 1;
  1915  0078  3001               	movlw	1
  1916  0079  0020               	movlb	0	; select bank0
  1917  007A  00C1               	movwf	ISR@shouldDebounce
  1918  007B  3000               	movlw	0
  1919  007C  00C2               	movwf	ISR@shouldDebounce+1
  1920                           
  1921                           ;main.c: 314: enable_debounce(&sensors[1]);
  1922  007D  304D               	movlw	(low ((_sensors| 0+7)))& (0+255)
  1923  007E  3183  2366  3180   	fcall	_enable_debounce
  1924                           
  1925                           ;main.c: 315: IOCAFbits.IOCAF2 = 0;
  1926  0081  0027               	movlb	7	; select bank7
  1927  0082  1113               	bcf	19,2	;volatile
  1928  0083                     i1l1759:	
  1929                           
  1930                           ;main.c: 316: }
  1931                           ;main.c: 319: if(IOCAFbits.IOCAF3){
  1932  0083  1D93               	btfss	19,3	;volatile
  1933  0084  2890               	goto	i1l1767
  1934                           
  1935                           ;main.c: 320: shouldDebounce = 1;
  1936  0085  3001               	movlw	1
  1937  0086  0020               	movlb	0	; select bank0
  1938  0087  00C1               	movwf	ISR@shouldDebounce
  1939  0088  3000               	movlw	0
  1940  0089  00C2               	movwf	ISR@shouldDebounce+1
  1941                           
  1942                           ;main.c: 321: enable_debounce(&sensors[2]);
  1943  008A  3054               	movlw	(low ((_sensors| 0+14)))& (0+255)
  1944  008B  3183  2366  3180   	fcall	_enable_debounce
  1945                           
  1946                           ;main.c: 322: IOCAFbits.IOCAF3 = 0;
  1947  008E  0027               	movlb	7	; select bank7
  1948  008F  1193               	bcf	19,3	;volatile
  1949  0090                     i1l1767:	
  1950                           
  1951                           ;main.c: 323: }
  1952                           ;main.c: 326: if(IOCAFbits.IOCAF4){
  1953  0090  1E13               	btfss	19,4	;volatile
  1954  0091  289D               	goto	i1l1775
  1955                           
  1956                           ;main.c: 327: shouldDebounce = 1;
  1957  0092  3001               	movlw	1
  1958  0093  0020               	movlb	0	; select bank0
  1959  0094  00C1               	movwf	ISR@shouldDebounce
  1960  0095  3000               	movlw	0
  1961  0096  00C2               	movwf	ISR@shouldDebounce+1
  1962                           
  1963                           ;main.c: 328: enable_debounce(&sensors[3]);
  1964  0097  305B               	movlw	(low ((_sensors| 0+21)))& (0+255)
  1965  0098  3183  2366  3180   	fcall	_enable_debounce
  1966                           
  1967                           ;main.c: 329: IOCAFbits.IOCAF4 = 0;
  1968  009B  0027               	movlb	7	; select bank7
  1969  009C  1213               	bcf	19,4	;volatile
  1970  009D                     i1l1775:	
  1971                           
  1972                           ;main.c: 330: }
  1973                           ;main.c: 333: if(IOCAFbits.IOCAF5){
  1974  009D  1E93               	btfss	19,5	;volatile
  1975  009E  28A9               	goto	i1l1783
  1976                           
  1977                           ;main.c: 334: shouldDebounce = 1;
  1978  009F  3001               	movlw	1
  1979  00A0  0020               	movlb	0	; select bank0
  1980  00A1  00C1               	movwf	ISR@shouldDebounce
  1981  00A2  3000               	movlw	0
  1982  00A3  00C2               	movwf	ISR@shouldDebounce+1
  1983                           
  1984                           ;main.c: 335: enable_debounce(&sensors[4]);
  1985  00A4  3062               	movlw	(low ((_sensors| 0+28)))& (0+255)
  1986  00A5  3183  2366         	fcall	_enable_debounce
  1987                           
  1988                           ;main.c: 336: IOCAFbits.IOCAF5 = 0;
  1989  00A7  0027               	movlb	7	; select bank7
  1990  00A8  1293               	bcf	19,5	;volatile
  1991  00A9                     i1l1783:	
  1992                           
  1993                           ;main.c: 337: }
  1994                           ;main.c: 339: if(shouldDebounce){
  1995  00A9  0020               	movlb	0	; select bank0
  1996  00AA  0841               	movf	ISR@shouldDebounce,w
  1997  00AB  0442               	iorwf	ISR@shouldDebounce+1,w
  1998                           
  1999                           ;main.c: 340: T6CONbits.TMR6ON = 1;
  2000  00AC  0028               	movlb	8	; select bank8
  2001  00AD  1D03               	btfss	3,2
  2002  00AE  151E               	bsf	30,2	;volatile
  2003  00AF  0020               	movlb	0	; select bank0
  2004  00B0  0830               	movf	??_ISR+1,w
  2005  00B1  00FF               	movwf	127
  2006  00B2  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2007  00B3  0009               	retfie
  2008  00B4                     __end_of_ISR:	
  2009                           
  2010                           	psect	text8
  2011  03E1                     __ptext8:	
  2012 ;; *************** function i1___bmul *****************
  2013 ;; Defined at:
  2014 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul8.c"
  2015 ;; Parameters:    Size  Location     Type
  2016 ;;  multiplier      1    wreg     unsigned char 
  2017 ;;  multiplicand    1    0[COMMON] unsigned char 
  2018 ;; Auto vars:     Size  Location     Type
  2019 ;;  multiplier      1    2[COMMON] unsigned char 
  2020 ;;  __bmul          1    3[COMMON] unsigned char 
  2021 ;; Return value:  Size  Location     Type
  2022 ;;                  1    wreg      unsigned char 
  2023 ;; Registers used:
  2024 ;;		wreg, status,2, status,0
  2025 ;; Tracked objects:
  2026 ;;		On entry : 0/0
  2027 ;;		On exit  : 0/0
  2028 ;;		Unchanged: 0/0
  2029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2030 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2031 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2032 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2033 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2034 ;;Total ram usage:        4 bytes
  2035 ;; Hardware stack levels used:    1
  2036 ;; This function calls:
  2037 ;;		Nothing
  2038 ;; This function is called by:
  2039 ;;		_ISR
  2040 ;; This function uses a non-reentrant model
  2041 ;;
  2042                           
  2043                           
  2044                           ;psect for function i1___bmul
  2045  03E1                     i1___bmul:	
  2046                           
  2047                           ;incstack = 0
  2048                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
  2049                           ;i1___bmul@multiplier stored from wreg
  2050  03E1  00F2               	movwf	i1___bmul@multiplier
  2051  03E2  01F3               	clrf	i1___bmul@product
  2052  03E3                     i1l1401:	
  2053  03E3  1C72               	btfss	i1___bmul@multiplier,0
  2054  03E4  2BE9               	goto	i1l1405
  2055  03E5  0870               	movf	i1___bmul@multiplicand,w
  2056  03E6  00F1               	movwf	??i1___bmul
  2057  03E7  0871               	movf	??i1___bmul,w
  2058  03E8  07F3               	addwf	i1___bmul@product,f
  2059  03E9                     i1l1405:	
  2060  03E9  1003               	clrc
  2061  03EA  0DF0               	rlf	i1___bmul@multiplicand,f
  2062  03EB  1003               	clrc
  2063  03EC  0CF2               	rrf	i1___bmul@multiplier,f
  2064  03ED  0872               	movf	i1___bmul@multiplier,w
  2065  03EE  1D03               	btfss	3,2
  2066  03EF  2BE3               	goto	i1l1401
  2067  03F0  0873               	movf	i1___bmul@product,w
  2068  03F1  0008               	return
  2069  03F2                     __end_ofi1___bmul:	
  2070                           
  2071                           	psect	text9
  2072  00C1                     __ptext9:	
  2073 ;; *************** function _sprintf *****************
  2074 ;; Defined at:
  2075 ;;		line 492 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2076 ;; Parameters:    Size  Location     Type
  2077 ;;  sp              1    wreg     PTR unsigned char 
  2078 ;;		 -> ISR@str(15), 
  2079 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  2080 ;;		 -> STR_3(4), 
  2081 ;; Auto vars:     Size  Location     Type
  2082 ;;  sp              1   13[BANK0 ] PTR unsigned char 
  2083 ;;		 -> ISR@str(15), 
  2084 ;;  tmpval          4    0        struct .
  2085 ;;  val             2   11[BANK0 ] unsigned int 
  2086 ;;  cp              2    0        PTR const unsigned char 
  2087 ;;  len             2    0        unsigned int 
  2088 ;;  c               1   14[BANK0 ] char 
  2089 ;;  prec            1   10[BANK0 ] char 
  2090 ;;  flag            1    9[BANK0 ] unsigned char 
  2091 ;;  ap              1    8[BANK0 ] PTR void [1]
  2092 ;;		 -> ?_sprintf(2), 
  2093 ;; Return value:  Size  Location     Type
  2094 ;;                  2    0[BANK0 ] int 
  2095 ;; Registers used:
  2096 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2097 ;; Tracked objects:
  2098 ;;		On entry : 0/0
  2099 ;;		On exit  : 0/0
  2100 ;;		Unchanged: 0/0
  2101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2102 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2103 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2104 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2105 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2106 ;;Total ram usage:       15 bytes
  2107 ;; Hardware stack levels used:    1
  2108 ;; Hardware stack levels required when called:    1
  2109 ;; This function calls:
  2110 ;;		___lwdiv
  2111 ;;		___lwmod
  2112 ;; This function is called by:
  2113 ;;		_ISR
  2114 ;; This function uses a non-reentrant model
  2115 ;;
  2116                           
  2117                           
  2118                           ;psect for function _sprintf
  2119  00C1                     _sprintf:	
  2120                           
  2121                           ;incstack = 0
  2122                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2123                           ;sprintf@sp stored from wreg
  2124  00C1  0020               	movlb	0	; select bank0
  2125  00C2  00AD               	movwf	sprintf@sp
  2126                           
  2127                           ;doprnt.c: 494: va_list ap;
  2128                           ;doprnt.c: 499: signed char c;
  2129                           ;doprnt.c: 506: signed char prec;
  2130                           ;doprnt.c: 508: unsigned char flag;
  2131                           ;doprnt.c: 523: union {
  2132                           ;doprnt.c: 524: unsigned long vd;
  2133                           ;doprnt.c: 525: double integ;
  2134                           ;doprnt.c: 526: } tmpval;
  2135                           ;doprnt.c: 528: unsigned int val;
  2136                           ;doprnt.c: 529: unsigned len;
  2137                           ;doprnt.c: 530: const char * cp;
  2138                           ;doprnt.c: 533: *ap = __va_start();
  2139  00C3  3022               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  2140  00C4  00A4               	movwf	??_sprintf
  2141  00C5  0824               	movf	??_sprintf,w
  2142  00C6  00A8               	movwf	sprintf@ap
  2143  00C7                     i1l1389:	
  2144                           ;doprnt.c: 536: while(c = *f++) {
  2145                           
  2146  00C7  0821               	movf	sprintf@f+1,w
  2147  00C8  00A5               	movwf	??_sprintf+1
  2148  00C9  0820               	movf	sprintf@f,w
  2149  00CA  00A4               	movwf	??_sprintf
  2150  00CB  0AA0               	incf	sprintf@f,f
  2151  00CC  1903               	skipnz
  2152  00CD  0AA1               	incf	sprintf@f+1,f
  2153  00CE  0824               	movf	??_sprintf,w
  2154  00CF  0084               	movwf	4
  2155  00D0  0825               	movf	??_sprintf+1,w
  2156  00D1  0085               	movwf	5
  2157  00D2  0800               	movf	0,w	;code access
  2158  00D3  00A6               	movwf	??_sprintf+2
  2159  00D4  0826               	movf	??_sprintf+2,w
  2160  00D5  00AE               	movwf	sprintf@c
  2161  00D6  082E               	movf	sprintf@c,w
  2162  00D7  1903               	btfsc	3,2
  2163  00D8  2989               	goto	i1l1391
  2164                           
  2165                           ;doprnt.c: 538: if(c != '%')
  2166  00D9  3025               	movlw	37
  2167  00DA  062E               	xorwf	sprintf@c,w
  2168  00DB  1903               	btfsc	3,2
  2169  00DC  28E9               	goto	i1l1345
  2170                           
  2171                           ;doprnt.c: 540: {
  2172                           ;doprnt.c: 541: ((*sp++ = (c)));
  2173  00DD  082E               	movf	sprintf@c,w
  2174  00DE  00A4               	movwf	??_sprintf
  2175  00DF  082D               	movf	sprintf@sp,w
  2176  00E0  0086               	movwf	6
  2177  00E1  0187               	clrf	7
  2178  00E2  0824               	movf	??_sprintf,w
  2179  00E3  0081               	movwf	1
  2180  00E4  3001               	movlw	1
  2181  00E5  00A4               	movwf	??_sprintf
  2182  00E6  0824               	movf	??_sprintf,w
  2183  00E7  07AD               	addwf	sprintf@sp,f
  2184                           
  2185                           ;doprnt.c: 542: continue;
  2186  00E8  28C7               	goto	i1l1389
  2187  00E9                     i1l1345:	
  2188                           
  2189                           ;doprnt.c: 543: }
  2190                           ;doprnt.c: 548: flag = 0;
  2191  00E9  01A9               	clrf	sprintf@flag
  2192                           
  2193                           ;doprnt.c: 822: }
  2194                           
  2195                           ;doprnt.c: 813: continue;
  2196                           
  2197                           ;doprnt.c: 802: default:
  2198                           
  2199                           ;doprnt.c: 698: case 'i':
  2200                           ;doprnt.c: 699: break;
  2201                           
  2202                           ;doprnt.c: 697: case 'd':
  2203                           
  2204                           ;doprnt.c: 638: goto alldone;
  2205                           
  2206                           ;doprnt.c: 637: case 0:
  2207                           
  2208                           ;doprnt.c: 635: switch(c = *f++) {
  2209  00EA  0821               	movf	sprintf@f+1,w
  2210  00EB  00A5               	movwf	??_sprintf+1
  2211  00EC  0820               	movf	sprintf@f,w
  2212  00ED  00A4               	movwf	??_sprintf
  2213  00EE  0AA0               	incf	sprintf@f,f
  2214  00EF  1903               	skipnz
  2215  00F0  0AA1               	incf	sprintf@f+1,f
  2216  00F1  0824               	movf	??_sprintf,w
  2217  00F2  0084               	movwf	4
  2218  00F3  0825               	movf	??_sprintf+1,w
  2219  00F4  0085               	movwf	5
  2220  00F5  0800               	movf	0,w	;code access
  2221  00F6  00AE               	movwf	sprintf@c
  2222                           
  2223                           ; Switch size 1, requested type "space"
  2224                           ; Number of cases is 3, Range of values is 0 to 105
  2225                           ; switch strategies available:
  2226                           ; Name         Instructions Cycles
  2227                           ; simple_byte           10     6 (average)
  2228                           ; direct_byte          218     6 (fixed)
  2229                           ; jumptable            260     6 (fixed)
  2230                           ;	Chosen strategy is simple_byte
  2231  00F7  3A00               	xorlw	0	; case 0
  2232  00F8  1903               	skipnz
  2233  00F9  2989               	goto	i1l1391
  2234  00FA  3A64               	xorlw	100	; case 100
  2235  00FB  1903               	skipnz
  2236  00FC  2901               	goto	i1l1351
  2237  00FD  3A0D               	xorlw	13	; case 105
  2238  00FE  1903               	skipnz
  2239  00FF  2901               	goto	i1l1351
  2240  0100  28C7               	goto	i1l1389
  2241  0101                     i1l1351:	
  2242                           
  2243                           ;doprnt.c: 1253: {
  2244                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2245  0101  0828               	movf	sprintf@ap,w
  2246  0102  0086               	movwf	6
  2247  0103  0187               	clrf	7
  2248  0104  3F40               	moviw [0]fsr1
  2249  0105  00AB               	movwf	sprintf@val
  2250  0106  3F41               	moviw [1]fsr1
  2251  0107  00AC               	movwf	sprintf@val+1
  2252  0108  3002               	movlw	2
  2253  0109  00A4               	movwf	??_sprintf
  2254  010A  0824               	movf	??_sprintf,w
  2255  010B  07A8               	addwf	sprintf@ap,f
  2256                           
  2257                           ;doprnt.c: 1261: if((int)val < 0) {
  2258  010C  1FAC               	btfss	sprintf@val+1,7
  2259  010D  2917               	goto	i1l1361
  2260                           
  2261                           ;doprnt.c: 1262: flag |= 0x03;
  2262  010E  3003               	movlw	3
  2263  010F  00A4               	movwf	??_sprintf
  2264  0110  0824               	movf	??_sprintf,w
  2265  0111  04A9               	iorwf	sprintf@flag,f
  2266                           
  2267                           ;doprnt.c: 1263: val = -val;
  2268  0112  09AB               	comf	sprintf@val,f
  2269  0113  09AC               	comf	sprintf@val+1,f
  2270  0114  0AAB               	incf	sprintf@val,f
  2271  0115  1903               	skipnz
  2272  0116  0AAC               	incf	sprintf@val+1,f
  2273  0117                     i1l1361:	
  2274                           
  2275                           ;doprnt.c: 1264: }
  2276                           ;doprnt.c: 1266: }
  2277                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2278  0117  01AE               	clrf	sprintf@c
  2279  0118  0AAE               	incf	sprintf@c,f
  2280  0119  3005               	movlw	5
  2281  011A  062E               	xorwf	sprintf@c,w
  2282  011B  1903               	btfsc	3,2
  2283  011C  293C               	goto	i1l1373
  2284  011D                     i1l1367:	
  2285                           
  2286                           ;doprnt.c: 1306: if(val < dpowers[c])
  2287  011D  082E               	movf	sprintf@c,w
  2288  011E  00A4               	movwf	??_sprintf
  2289  011F  01A5               	clrf	??_sprintf+1
  2290  0120  35A4               	lslf	??_sprintf,f
  2291  0121  0DA5               	rlf	??_sprintf+1,f
  2292  0122  30BC               	movlw	low (_dpowers| (0+32768))
  2293  0123  0724               	addwf	??_sprintf,w
  2294  0124  0084               	movwf	4
  2295  0125  3083               	movlw	high (_dpowers| (0+32768))
  2296  0126  3D25               	addwfc	??_sprintf+1,w
  2297  0127  0085               	movwf	5
  2298  0128  3F00               	moviw [0]fsr0
  2299  0129  00A6               	movwf	??_sprintf+2
  2300  012A  3F01               	moviw [1]fsr0
  2301  012B  00A7               	movwf	??_sprintf+3
  2302  012C  0827               	movf	??_sprintf+3,w
  2303  012D  022C               	subwf	sprintf@val+1,w
  2304  012E  1D03               	skipz
  2305  012F  2932               	goto	u101_25
  2306  0130  0826               	movf	??_sprintf+2,w
  2307  0131  022B               	subwf	sprintf@val,w
  2308  0132                     u101_25:	
  2309  0132  1C03               	btfss	3,0
  2310  0133  293C               	goto	i1l1373
  2311                           
  2312                           ;doprnt.c: 1307: break;
  2313  0134  3001               	movlw	1
  2314  0135  00A4               	movwf	??_sprintf
  2315  0136  0824               	movf	??_sprintf,w
  2316  0137  07AE               	addwf	sprintf@c,f
  2317  0138  3005               	movlw	5
  2318  0139  062E               	xorwf	sprintf@c,w
  2319  013A  1D03               	btfss	3,2
  2320  013B  291D               	goto	i1l1367
  2321  013C                     i1l1373:	
  2322                           
  2323                           ;doprnt.c: 1422: {
  2324                           ;doprnt.c: 1438: if(flag & 0x03)
  2325  013C  0829               	movf	sprintf@flag,w
  2326  013D  3903               	andlw	3
  2327  013E  1903               	btfsc	3,2
  2328  013F  294B               	goto	i1l1379
  2329                           
  2330                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2331  0140  302D               	movlw	45
  2332  0141  00A4               	movwf	??_sprintf
  2333  0142  082D               	movf	sprintf@sp,w
  2334  0143  0086               	movwf	6
  2335  0144  0187               	clrf	7
  2336  0145  0824               	movf	??_sprintf,w
  2337  0146  0081               	movwf	1
  2338  0147  3001               	movlw	1
  2339  0148  00A4               	movwf	??_sprintf
  2340  0149  0824               	movf	??_sprintf,w
  2341  014A  07AD               	addwf	sprintf@sp,f
  2342  014B                     i1l1379:	
  2343                           
  2344                           ;doprnt.c: 1469: }
  2345                           ;doprnt.c: 1472: prec = c;
  2346  014B  082E               	movf	sprintf@c,w
  2347  014C  00A4               	movwf	??_sprintf
  2348  014D  0824               	movf	??_sprintf,w
  2349  014E  00AA               	movwf	sprintf@prec
  2350  014F                     i1l1387:	
  2351                           ;doprnt.c: 1474: while(prec--) {
  2352                           
  2353  014F  30FF               	movlw	255
  2354  0150  00A4               	movwf	??_sprintf
  2355  0151  0824               	movf	??_sprintf,w
  2356  0152  07AA               	addwf	sprintf@prec,f
  2357  0153  0A2A               	incf	sprintf@prec,w
  2358  0154  1903               	btfsc	3,2
  2359  0155  28C7               	goto	i1l1389
  2360                           
  2361                           ;doprnt.c: 1478: {
  2362                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2363  0156  300A               	movlw	10
  2364  0157  00F8               	movwf	___lwmod@divisor
  2365  0158  3000               	movlw	0
  2366  0159  00F9               	movwf	___lwmod@divisor+1
  2367  015A  082A               	movf	sprintf@prec,w
  2368  015B  00A4               	movwf	??_sprintf
  2369  015C  01A5               	clrf	??_sprintf+1
  2370  015D  35A4               	lslf	??_sprintf,f
  2371  015E  0DA5               	rlf	??_sprintf+1,f
  2372  015F  30BC               	movlw	low (_dpowers| (0+32768))
  2373  0160  0724               	addwf	??_sprintf,w
  2374  0161  0084               	movwf	4
  2375  0162  3083               	movlw	high (_dpowers| (0+32768))
  2376  0163  3D25               	addwfc	??_sprintf+1,w
  2377  0164  0085               	movwf	5
  2378  0165  3F00               	moviw [0]fsr0
  2379  0166  00F0               	movwf	___lwdiv@divisor
  2380  0167  3F01               	moviw [1]fsr0
  2381  0168  00F1               	movwf	___lwdiv@divisor+1
  2382  0169  082C               	movf	sprintf@val+1,w
  2383  016A  00F3               	movwf	___lwdiv@dividend+1
  2384  016B  082B               	movf	sprintf@val,w
  2385  016C  00F2               	movwf	___lwdiv@dividend
  2386  016D  3182  22B3  3180   	fcall	___lwdiv
  2387  0170  0871               	movf	?___lwdiv+1,w
  2388  0171  00FB               	movwf	___lwmod@dividend+1
  2389  0172  0870               	movf	?___lwdiv,w
  2390  0173  00FA               	movwf	___lwmod@dividend
  2391  0174  3183  2316  3180   	fcall	___lwmod
  2392  0177  0878               	movf	?___lwmod,w
  2393  0178  3E30               	addlw	48
  2394  0179  0020               	movlb	0	; select bank0
  2395  017A  00A6               	movwf	??_sprintf+2
  2396  017B  0826               	movf	??_sprintf+2,w
  2397  017C  00AE               	movwf	sprintf@c
  2398                           
  2399                           ;doprnt.c: 1523: }
  2400                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2401  017D  082E               	movf	sprintf@c,w
  2402  017E  00A4               	movwf	??_sprintf
  2403  017F  082D               	movf	sprintf@sp,w
  2404  0180  0086               	movwf	6
  2405  0181  0187               	clrf	7
  2406  0182  0824               	movf	??_sprintf,w
  2407  0183  0081               	movwf	1
  2408  0184  3001               	movlw	1
  2409  0185  00A4               	movwf	??_sprintf
  2410  0186  0824               	movf	??_sprintf,w
  2411  0187  07AD               	addwf	sprintf@sp,f
  2412  0188  294F               	goto	i1l1387
  2413  0189                     i1l1391:	
  2414                           ;doprnt.c: 1525: }
  2415                           ;doprnt.c: 1533: }
  2416                           ;doprnt.c: 1535: alldone:
  2417                           
  2418                           
  2419                           ;doprnt.c: 1538: *sp = 0;
  2420  0189  082D               	movf	sprintf@sp,w
  2421  018A  0086               	movwf	6
  2422  018B  0187               	clrf	7
  2423  018C  0181               	clrf	1
  2424  018D  0008               	return
  2425  018E                     __end_of_sprintf:	
  2426                           ;doprnt.c: 1540: return 0;
  2427                           ;	Return value of _sprintf is never used
  2428                           
  2429                           
  2430                           	psect	text10
  2431  0316                     __ptext10:	
  2432 ;; *************** function ___lwmod *****************
  2433 ;; Defined at:
  2434 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  2435 ;; Parameters:    Size  Location     Type
  2436 ;;  divisor         2    8[COMMON] unsigned int 
  2437 ;;  dividend        2   10[COMMON] unsigned int 
  2438 ;; Auto vars:     Size  Location     Type
  2439 ;;  counter         1   13[COMMON] unsigned char 
  2440 ;; Return value:  Size  Location     Type
  2441 ;;                  2    8[COMMON] unsigned int 
  2442 ;; Registers used:
  2443 ;;		wreg, status,2, status,0
  2444 ;; Tracked objects:
  2445 ;;		On entry : 0/0
  2446 ;;		On exit  : 0/0
  2447 ;;		Unchanged: 0/0
  2448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2449 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2450 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2451 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2452 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2453 ;;Total ram usage:        6 bytes
  2454 ;; Hardware stack levels used:    1
  2455 ;; This function calls:
  2456 ;;		Nothing
  2457 ;; This function is called by:
  2458 ;;		_sprintf
  2459 ;; This function uses a non-reentrant model
  2460 ;;
  2461                           
  2462                           
  2463                           ;psect for function ___lwmod
  2464  0316                     ___lwmod:	
  2465                           
  2466                           ;incstack = 0
  2467                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2468  0316  0878               	movf	___lwmod@divisor,w
  2469  0317  0479               	iorwf	___lwmod@divisor+1,w
  2470  0318  1903               	btfsc	3,2
  2471  0319  2B3D               	goto	i1l1185
  2472  031A  01FD               	clrf	___lwmod@counter
  2473  031B  0AFD               	incf	___lwmod@counter,f
  2474  031C                     i1l1175:	
  2475  031C  1BF9               	btfsc	___lwmod@divisor+1,7
  2476  031D  2B28               	goto	i1l1177
  2477  031E  3001               	movlw	1
  2478  031F                     u78_25:	
  2479  031F  35F8               	lslf	___lwmod@divisor,f
  2480  0320  0DF9               	rlf	___lwmod@divisor+1,f
  2481  0321  0B89               	decfsz	9,f
  2482  0322  2B1F               	goto	u78_25
  2483  0323  3001               	movlw	1
  2484  0324  00FC               	movwf	??___lwmod
  2485  0325  087C               	movf	??___lwmod,w
  2486  0326  07FD               	addwf	___lwmod@counter,f
  2487  0327  2B1C               	goto	i1l1175
  2488  0328                     i1l1177:	
  2489  0328  0879               	movf	___lwmod@divisor+1,w
  2490  0329  027B               	subwf	___lwmod@dividend+1,w
  2491  032A  1D03               	skipz
  2492  032B  2B2E               	goto	u80_25
  2493  032C  0878               	movf	___lwmod@divisor,w
  2494  032D  027A               	subwf	___lwmod@dividend,w
  2495  032E                     u80_25:	
  2496  032E  1C03               	skipc
  2497  032F  2B34               	goto	i1l1181
  2498  0330  0878               	movf	___lwmod@divisor,w
  2499  0331  02FA               	subwf	___lwmod@dividend,f
  2500  0332  0879               	movf	___lwmod@divisor+1,w
  2501  0333  3BFB               	subwfb	___lwmod@dividend+1,f
  2502  0334                     i1l1181:	
  2503  0334  3001               	movlw	1
  2504  0335                     u81_25:	
  2505  0335  36F9               	lsrf	___lwmod@divisor+1,f
  2506  0336  0CF8               	rrf	___lwmod@divisor,f
  2507  0337  0B89               	decfsz	9,f
  2508  0338  2B35               	goto	u81_25
  2509  0339  3001               	movlw	1
  2510  033A  02FD               	subwf	___lwmod@counter,f
  2511  033B  1D03               	btfss	3,2
  2512  033C  2B28               	goto	i1l1177
  2513  033D                     i1l1185:	
  2514  033D  087B               	movf	___lwmod@dividend+1,w
  2515  033E  00F9               	movwf	?___lwmod+1
  2516  033F  087A               	movf	___lwmod@dividend,w
  2517  0340  00F8               	movwf	?___lwmod
  2518  0341  0008               	return
  2519  0342                     __end_of___lwmod:	
  2520                           
  2521                           	psect	text11
  2522  02B3                     __ptext11:	
  2523 ;; *************** function ___lwdiv *****************
  2524 ;; Defined at:
  2525 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  2526 ;; Parameters:    Size  Location     Type
  2527 ;;  divisor         2    0[COMMON] unsigned int 
  2528 ;;  dividend        2    2[COMMON] unsigned int 
  2529 ;; Auto vars:     Size  Location     Type
  2530 ;;  quotient        2    5[COMMON] unsigned int 
  2531 ;;  counter         1    7[COMMON] unsigned char 
  2532 ;; Return value:  Size  Location     Type
  2533 ;;                  2    0[COMMON] unsigned int 
  2534 ;; Registers used:
  2535 ;;		wreg, status,2, status,0
  2536 ;; Tracked objects:
  2537 ;;		On entry : 0/0
  2538 ;;		On exit  : 0/0
  2539 ;;		Unchanged: 0/0
  2540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2541 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2542 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2543 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2544 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2545 ;;Total ram usage:        8 bytes
  2546 ;; Hardware stack levels used:    1
  2547 ;; This function calls:
  2548 ;;		Nothing
  2549 ;; This function is called by:
  2550 ;;		_sprintf
  2551 ;; This function uses a non-reentrant model
  2552 ;;
  2553                           
  2554                           
  2555                           ;psect for function ___lwdiv
  2556  02B3                     ___lwdiv:	
  2557                           
  2558                           ;incstack = 0
  2559                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2560  02B3  01F5               	clrf	___lwdiv@quotient
  2561  02B4  01F6               	clrf	___lwdiv@quotient+1
  2562  02B5  0870               	movf	___lwdiv@divisor,w
  2563  02B6  0471               	iorwf	___lwdiv@divisor+1,w
  2564  02B7  1903               	btfsc	3,2
  2565  02B8  2AE2               	goto	i1l1163
  2566  02B9  01F7               	clrf	___lwdiv@counter
  2567  02BA  0AF7               	incf	___lwdiv@counter,f
  2568  02BB                     i1l1151:	
  2569  02BB  1BF1               	btfsc	___lwdiv@divisor+1,7
  2570  02BC  2AC7               	goto	i1l1153
  2571  02BD  3001               	movlw	1
  2572  02BE                     u71_25:	
  2573  02BE  35F0               	lslf	___lwdiv@divisor,f
  2574  02BF  0DF1               	rlf	___lwdiv@divisor+1,f
  2575  02C0  0B89               	decfsz	9,f
  2576  02C1  2ABE               	goto	u71_25
  2577  02C2  3001               	movlw	1
  2578  02C3  00F4               	movwf	??___lwdiv
  2579  02C4  0874               	movf	??___lwdiv,w
  2580  02C5  07F7               	addwf	___lwdiv@counter,f
  2581  02C6  2ABB               	goto	i1l1151
  2582  02C7                     i1l1153:	
  2583  02C7  3001               	movlw	1
  2584  02C8                     u73_25:	
  2585  02C8  35F5               	lslf	___lwdiv@quotient,f
  2586  02C9  0DF6               	rlf	___lwdiv@quotient+1,f
  2587  02CA  0B89               	decfsz	9,f
  2588  02CB  2AC8               	goto	u73_25
  2589  02CC  0871               	movf	___lwdiv@divisor+1,w
  2590  02CD  0273               	subwf	___lwdiv@dividend+1,w
  2591  02CE  1D03               	skipz
  2592  02CF  2AD2               	goto	u74_25
  2593  02D0  0870               	movf	___lwdiv@divisor,w
  2594  02D1  0272               	subwf	___lwdiv@dividend,w
  2595  02D2                     u74_25:	
  2596  02D2  1C03               	skipc
  2597  02D3  2AD9               	goto	i1l1159
  2598  02D4  0870               	movf	___lwdiv@divisor,w
  2599  02D5  02F2               	subwf	___lwdiv@dividend,f
  2600  02D6  0871               	movf	___lwdiv@divisor+1,w
  2601  02D7  3BF3               	subwfb	___lwdiv@dividend+1,f
  2602  02D8  1475               	bsf	___lwdiv@quotient,0
  2603  02D9                     i1l1159:	
  2604  02D9  3001               	movlw	1
  2605  02DA                     u75_25:	
  2606  02DA  36F1               	lsrf	___lwdiv@divisor+1,f
  2607  02DB  0CF0               	rrf	___lwdiv@divisor,f
  2608  02DC  0B89               	decfsz	9,f
  2609  02DD  2ADA               	goto	u75_25
  2610  02DE  3001               	movlw	1
  2611  02DF  02F7               	subwf	___lwdiv@counter,f
  2612  02E0  1D03               	btfss	3,2
  2613  02E1  2AC7               	goto	i1l1153
  2614  02E2                     i1l1163:	
  2615  02E2  0876               	movf	___lwdiv@quotient+1,w
  2616  02E3  00F1               	movwf	?___lwdiv+1
  2617  02E4  0875               	movf	___lwdiv@quotient,w
  2618  02E5  00F0               	movwf	?___lwdiv
  2619  02E6  0008               	return
  2620  02E7                     __end_of___lwdiv:	
  2621                           
  2622                           	psect	text12
  2623  02E7                     __ptext12:	
  2624 ;; *************** function _process_debounce *****************
  2625 ;; Defined at:
  2626 ;;		line 14 in file "sensor.c"
  2627 ;; Parameters:    Size  Location     Type
  2628 ;;  sensor          1    wreg     PTR struct sensor_t
  2629 ;;		 -> sensors(35), 
  2630 ;; Auto vars:     Size  Location     Type
  2631 ;;  sensor          1    7[COMMON] PTR struct sensor_t
  2632 ;;		 -> sensors(35), 
  2633 ;; Return value:  Size  Location     Type
  2634 ;;                  1    wreg      void 
  2635 ;; Registers used:
  2636 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2637 ;; Tracked objects:
  2638 ;;		On entry : 0/0
  2639 ;;		On exit  : 0/0
  2640 ;;		Unchanged: 0/0
  2641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2643 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2644 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2645 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2646 ;;Total ram usage:        2 bytes
  2647 ;; Hardware stack levels used:    1
  2648 ;; Hardware stack levels required when called:    3
  2649 ;; This function calls:
  2650 ;;		_default_handler
  2651 ;;		_get_port_pin
  2652 ;;		_switch_handler
  2653 ;; This function is called by:
  2654 ;;		_ISR
  2655 ;; This function uses a non-reentrant model
  2656 ;;
  2657                           
  2658                           
  2659                           ;psect for function _process_debounce
  2660  02E7                     _process_debounce:	
  2661                           
  2662                           ;incstack = 0
  2663                           ; Regs used in _process_debounce: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2664                           ;process_debounce@sensor stored from wreg
  2665  02E7  00F7               	movwf	process_debounce@sensor
  2666                           
  2667                           ;sensor.c: 15: if(sensor->debounce.shouldDebounce &&
  2668                           ;sensor.c: 16: sensor->debounce.previousState == get_port_pin(sensor->port, sensor->pin)
      +                          )
  2669  02E8  0877               	movf	process_debounce@sensor,w
  2670  02E9  3E04               	addlw	4
  2671  02EA  0086               	movwf	6
  2672  02EB  0187               	clrf	7
  2673  02EC  1C01               	btfss	1,0
  2674  02ED  0008               	return
  2675  02EE  0877               	movf	process_debounce@sensor,w
  2676  02EF  3E04               	addlw	4
  2677  02F0  0086               	movwf	6
  2678  02F1  0187               	clrf	7
  2679  02F2  0C01               	rrf	1,w
  2680  02F3  3901               	andlw	1
  2681  02F4  00F6               	movwf	??_process_debounce
  2682  02F5  0A77               	incf	process_debounce@sensor,w
  2683  02F6  0086               	movwf	6
  2684  02F7  0187               	clrf	7
  2685  02F8  3F40               	moviw [0]fsr1
  2686  02F9  00F0               	movwf	get_port_pin@port
  2687  02FA  3F41               	moviw [1]fsr1
  2688  02FB  00F1               	movwf	get_port_pin@port+1
  2689  02FC  0877               	movf	process_debounce@sensor,w
  2690  02FD  0086               	movwf	6
  2691  02FE  0187               	clrf	7
  2692  02FF  3F43               	moviw [3]fsr1
  2693  0300  00F2               	movwf	get_port_pin@pin
  2694  0301  3183  23F2  3182   	fcall	_get_port_pin
  2695  0304  0676               	xorwf	??_process_debounce,w
  2696  0305  1D03               	skipz
  2697  0306  0008               	return
  2698                           
  2699                           ;sensor.c: 17: {
  2700                           ;sensor.c: 18: sensor->debounce.handler();
  2701  0307  0877               	movf	process_debounce@sensor,w
  2702  0308  3E05               	addlw	5
  2703  0309  0086               	movwf	6
  2704  030A  0187               	clrf	7
  2705  030B  3F41               	moviw [1]fsr1
  2706  030C  008A               	movwf	10
  2707  030D  3F40               	moviw [0]fsr1
  2708  030E  000A               	callw
  2709  030F  3182               	pagesel	$
  2710                           
  2711                           ;sensor.c: 19: sensor->debounce.shouldDebounce = 0;
  2712  0310  0877               	movf	process_debounce@sensor,w
  2713  0311  3E04               	addlw	4
  2714  0312  0086               	movwf	6
  2715  0313  0187               	clrf	7
  2716  0314  1001               	bcf	1,0
  2717  0315  0008               	return
  2718  0316                     __end_of_process_debounce:	
  2719                           
  2720                           	psect	text13
  2721  040A                     __ptext13:	
  2722 ;; *************** function _default_handler *****************
  2723 ;; Defined at:
  2724 ;;		line 66 in file "main.c"
  2725 ;; Parameters:    Size  Location     Type
  2726 ;;		None
  2727 ;; Auto vars:     Size  Location     Type
  2728 ;;		None
  2729 ;; Return value:  Size  Location     Type
  2730 ;;                  1    wreg      void 
  2731 ;; Registers used:
  2732 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2733 ;; Tracked objects:
  2734 ;;		On entry : 0/0
  2735 ;;		On exit  : 0/0
  2736 ;;		Unchanged: 0/0
  2737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2741 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2742 ;;Total ram usage:        0 bytes
  2743 ;; Hardware stack levels used:    1
  2744 ;; Hardware stack levels required when called:    2
  2745 ;; This function calls:
  2746 ;;		i1_UART_Write_Text
  2747 ;; This function is called by:
  2748 ;;		_initializeSensors
  2749 ;;		_process_debounce
  2750 ;; This function uses a non-reentrant model
  2751 ;;
  2752                           
  2753                           
  2754                           ;psect for function _default_handler
  2755  040A                     _default_handler:	
  2756                           
  2757                           ;main.c: 67: UART_Write_Text("xy");
  2758                           
  2759                           ;incstack = 0
  2760                           ; Regs used in _default_handler: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2761  040A  30CA               	movlw	low (STR_2| (0+32768))
  2762  040B  00F1               	movwf	i1UART_Write_Text@text
  2763  040C  3083               	movlw	high (STR_2| (0+32768))
  2764  040D  00F2               	movwf	i1UART_Write_Text@text+1
  2765  040E  3183  23A2         	fcall	i1_UART_Write_Text
  2766  0410  0008               	return
  2767  0411                     __end_of_default_handler:	
  2768                           
  2769                           	psect	text14
  2770  041E                     __ptext14:	
  2771 ;; *************** function _switch_handler *****************
  2772 ;; Defined at:
  2773 ;;		line 70 in file "main.c"
  2774 ;; Parameters:    Size  Location     Type
  2775 ;;		None
  2776 ;; Auto vars:     Size  Location     Type
  2777 ;;		None
  2778 ;; Return value:  Size  Location     Type
  2779 ;;                  1    wreg      void 
  2780 ;; Registers used:
  2781 ;;		None
  2782 ;; Tracked objects:
  2783 ;;		On entry : 0/0
  2784 ;;		On exit  : 0/0
  2785 ;;		Unchanged: 0/0
  2786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2791 ;;Total ram usage:        0 bytes
  2792 ;; Hardware stack levels used:    1
  2793 ;; This function calls:
  2794 ;;		Nothing
  2795 ;; This function is called by:
  2796 ;;		_initializeSensors
  2797 ;;		_process_debounce
  2798 ;; This function uses a non-reentrant model
  2799 ;;
  2800                           
  2801                           
  2802                           ;psect for function _switch_handler
  2803  041E                     _switch_handler:	
  2804                           
  2805                           ;main.c: 71: shouldAutoBaud = 1;
  2806                           
  2807                           ;incstack = 0
  2808                           ; Regs used in _switch_handler: []
  2809  041E  0020               	movlb	0	; select bank0
  2810  041F  01C5               	clrf	_shouldAutoBaud
  2811  0420  0AC5               	incf	_shouldAutoBaud,f
  2812  0421  0008               	return
  2813  0422                     __end_of_switch_handler:	
  2814                           
  2815                           	psect	text15
  2816  03A2                     __ptext15:	
  2817 ;; *************** function i1_UART_Write_Text *****************
  2818 ;; Defined at:
  2819 ;;		line 80 in file "main.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;  text            2    1[COMMON] PTR unsigned char 
  2822 ;;		 -> ISR@str(15), STR_2(3), STR_1(2), 
  2823 ;; Auto vars:     Size  Location     Type
  2824 ;;  UART_Write_T    2    4[COMMON] int 
  2825 ;; Return value:  Size  Location     Type
  2826 ;;                  1    wreg      void 
  2827 ;; Registers used:
  2828 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2829 ;; Tracked objects:
  2830 ;;		On entry : 0/0
  2831 ;;		On exit  : 0/0
  2832 ;;		Unchanged: 0/0
  2833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2834 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2835 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2836 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2837 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2838 ;;Total ram usage:        5 bytes
  2839 ;; Hardware stack levels used:    1
  2840 ;; Hardware stack levels required when called:    1
  2841 ;; This function calls:
  2842 ;;		i1_UART_Write
  2843 ;; This function is called by:
  2844 ;;		_default_handler
  2845 ;;		_ISR
  2846 ;; This function uses a non-reentrant model
  2847 ;;
  2848                           
  2849                           
  2850                           ;psect for function i1_UART_Write_Text
  2851  03A2                     i1_UART_Write_Text:	
  2852                           
  2853                           ;main.c: 82: int count;
  2854                           ;main.c: 83: for(count = 0; text[count]!='\0'; count++)
  2855                           
  2856                           ;incstack = 0
  2857                           ; Regs used in i1_UART_Write_Text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2858  03A2  01F4               	clrf	i1UART_Write_Text@count
  2859  03A3  01F5               	clrf	i1UART_Write_Text@count+1
  2860  03A4                     i1l1113:	
  2861  03A4  0871               	movf	i1UART_Write_Text@text,w
  2862  03A5  0774               	addwf	i1UART_Write_Text@count,w
  2863  03A6  0084               	movwf	4
  2864  03A7  0872               	movf	i1UART_Write_Text@text+1,w
  2865  03A8  3D75               	addwfc	i1UART_Write_Text@count+1,w
  2866  03A9  0085               	movwf	5
  2867  03AA  0012               	moviw fsr0++
  2868  03AB  1903               	btfsc	3,2
  2869  03AC  0008               	return
  2870                           
  2871                           ;main.c: 84: {
  2872                           ;main.c: 85: UART_Write(text[count]);
  2873  03AD  0871               	movf	i1UART_Write_Text@text,w
  2874  03AE  0774               	addwf	i1UART_Write_Text@count,w
  2875  03AF  0084               	movwf	4
  2876  03B0  0872               	movf	i1UART_Write_Text@text+1,w
  2877  03B1  3D75               	addwfc	i1UART_Write_Text@count+1,w
  2878  03B2  0085               	movwf	5
  2879  03B3  0800               	movf	0,w	;code access
  2880  03B4  3184  2411  3183   	fcall	i1_UART_Write
  2881  03B7  3001               	movlw	1
  2882  03B8  07F4               	addwf	i1UART_Write_Text@count,f
  2883  03B9  3000               	movlw	0
  2884  03BA  3DF5               	addwfc	i1UART_Write_Text@count+1,f
  2885  03BB  2BA4               	goto	i1l1113
  2886  03BC                     __end_ofi1_UART_Write_Text:	
  2887                           
  2888                           	psect	text16
  2889  0411                     __ptext16:	
  2890 ;; *************** function i1_UART_Write *****************
  2891 ;; Defined at:
  2892 ;;		line 74 in file "main.c"
  2893 ;; Parameters:    Size  Location     Type
  2894 ;;  data            1    wreg     unsigned char 
  2895 ;; Auto vars:     Size  Location     Type
  2896 ;;  data            1    0[COMMON] unsigned char 
  2897 ;; Return value:  Size  Location     Type
  2898 ;;                  1    wreg      void 
  2899 ;; Registers used:
  2900 ;;		wreg
  2901 ;; Tracked objects:
  2902 ;;		On entry : 0/0
  2903 ;;		On exit  : 0/0
  2904 ;;		Unchanged: 0/0
  2905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2906 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2907 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2909 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2910 ;;Total ram usage:        1 bytes
  2911 ;; Hardware stack levels used:    1
  2912 ;; This function calls:
  2913 ;;		Nothing
  2914 ;; This function is called by:
  2915 ;;		i1_UART_Write_Text
  2916 ;; This function uses a non-reentrant model
  2917 ;;
  2918                           
  2919                           
  2920                           ;psect for function i1_UART_Write
  2921  0411                     i1_UART_Write:	
  2922                           
  2923                           ;incstack = 0
  2924                           ; Regs used in i1_UART_Write: [wreg]
  2925                           ;i1UART_Write@data stored from wreg
  2926  0411  00F0               	movwf	i1UART_Write@data
  2927  0412                     i1l104:	
  2928                           ;main.c: 76: while(!TRMT);
  2929                           
  2930  0412  0023               	movlb	3	; select bank3
  2931  0413  1C9E               	btfss	30,1	;volatile
  2932  0414  2C12               	goto	i1l104
  2933                           
  2934                           ;main.c: 77: TXREG = data;
  2935  0415  0870               	movf	i1UART_Write@data,w
  2936  0416  009A               	movwf	26	;volatile
  2937  0417  0008               	return
  2938  0418                     __end_ofi1_UART_Write:	
  2939                           
  2940                           	psect	text17
  2941  0366                     __ptext17:	
  2942 ;; *************** function _enable_debounce *****************
  2943 ;; Defined at:
  2944 ;;		line 9 in file "sensor.c"
  2945 ;; Parameters:    Size  Location     Type
  2946 ;;  sensor          1    wreg     PTR struct sensor_t
  2947 ;;		 -> sensors(35), 
  2948 ;; Auto vars:     Size  Location     Type
  2949 ;;  sensor          1    5[COMMON] PTR struct sensor_t
  2950 ;;		 -> sensors(35), 
  2951 ;; Return value:  Size  Location     Type
  2952 ;;                  1    wreg      void 
  2953 ;; Registers used:
  2954 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2955 ;; Tracked objects:
  2956 ;;		On entry : 0/0
  2957 ;;		On exit  : 0/0
  2958 ;;		Unchanged: 0/0
  2959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2961 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2962 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2963 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2964 ;;Total ram usage:        2 bytes
  2965 ;; Hardware stack levels used:    1
  2966 ;; Hardware stack levels required when called:    1
  2967 ;; This function calls:
  2968 ;;		_get_port_pin
  2969 ;; This function is called by:
  2970 ;;		_ISR
  2971 ;; This function uses a non-reentrant model
  2972 ;;
  2973                           
  2974                           
  2975                           ;psect for function _enable_debounce
  2976  0366                     _enable_debounce:	
  2977                           
  2978                           ;incstack = 0
  2979                           ; Regs used in _enable_debounce: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2980                           ;enable_debounce@sensor stored from wreg
  2981  0366  00F5               	movwf	enable_debounce@sensor
  2982                           
  2983                           ;sensor.c: 10: sensor->debounce.shouldDebounce = 1;
  2984  0367  0875               	movf	enable_debounce@sensor,w
  2985  0368  3E04               	addlw	4
  2986  0369  0086               	movwf	6
  2987  036A  0187               	clrf	7
  2988  036B  1401               	bsf	1,0
  2989                           
  2990                           ;sensor.c: 11: sensor->debounce.previousState = get_port_pin(sensor->port, sensor->pin);
  2991  036C  0A75               	incf	enable_debounce@sensor,w
  2992  036D  0086               	movwf	6
  2993  036E  0187               	clrf	7
  2994  036F  3F40               	moviw [0]fsr1
  2995  0370  00F0               	movwf	get_port_pin@port
  2996  0371  3F41               	moviw [1]fsr1
  2997  0372  00F1               	movwf	get_port_pin@port+1
  2998  0373  0875               	movf	enable_debounce@sensor,w
  2999  0374  0086               	movwf	6
  3000  0375  0187               	clrf	7
  3001  0376  3F43               	moviw [3]fsr1
  3002  0377  00F2               	movwf	get_port_pin@pin
  3003  0378  3183  23F2         	fcall	_get_port_pin
  3004  037A  00F4               	movwf	??_enable_debounce
  3005  037B  0875               	movf	enable_debounce@sensor,w
  3006  037C  3E04               	addlw	4
  3007  037D  0086               	movwf	6
  3008  037E  0187               	clrf	7
  3009  037F  0DF4               	rlf	??_enable_debounce,f
  3010  0380  0801               	movf	1,w
  3011  0381  0674               	xorwf	??_enable_debounce,w
  3012  0382  39FD               	andlw	-3
  3013  0383  0674               	xorwf	??_enable_debounce,w
  3014  0384  0081               	movwf	1
  3015  0385  0008               	return
  3016  0386                     __end_of_enable_debounce:	
  3017                           
  3018                           	psect	text18
  3019  03F2                     __ptext18:	
  3020 ;; *************** function _get_port_pin *****************
  3021 ;; Defined at:
  3022 ;;		line 5 in file "sensor.c"
  3023 ;; Parameters:    Size  Location     Type
  3024 ;;  port            2    0[COMMON] PTR unsigned char 
  3025 ;;		 -> PORTA(1), 
  3026 ;;  pin             1    2[COMMON] unsigned char 
  3027 ;; Auto vars:     Size  Location     Type
  3028 ;;		None
  3029 ;; Return value:  Size  Location     Type
  3030 ;;                  1    wreg      unsigned char 
  3031 ;; Registers used:
  3032 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3033 ;; Tracked objects:
  3034 ;;		On entry : 0/0
  3035 ;;		On exit  : 0/0
  3036 ;;		Unchanged: 0/0
  3037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3038 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3040 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3041 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3042 ;;Total ram usage:        4 bytes
  3043 ;; Hardware stack levels used:    1
  3044 ;; This function calls:
  3045 ;;		Nothing
  3046 ;; This function is called by:
  3047 ;;		_enable_debounce
  3048 ;;		_process_debounce
  3049 ;; This function uses a non-reentrant model
  3050 ;;
  3051                           
  3052                           
  3053                           ;psect for function _get_port_pin
  3054  03F2                     _get_port_pin:	
  3055                           
  3056                           ;sensor.c: 6: return (*port & (1U << pin));
  3057                           
  3058                           ;incstack = 0
  3059                           ; Regs used in _get_port_pin: [wreg+fsr1l+fsr1h+status,2+status,0]
  3060  03F2  0870               	movf	get_port_pin@port,w
  3061  03F3  0086               	movwf	6
  3062  03F4  0871               	movf	get_port_pin@port+1,w
  3063  03F5  0087               	movwf	7
  3064  03F6  3001               	movlw	1
  3065  03F7  00F3               	movwf	??_get_port_pin
  3066  03F8  0A72               	incf	get_port_pin@pin,w
  3067  03F9  2BFB               	goto	u67_24
  3068  03FA                     u67_25:	
  3069  03FA  35F3               	lslf	??_get_port_pin,f
  3070  03FB                     u67_24:	
  3071  03FB  0B89               	decfsz	9,f
  3072  03FC  2BFA               	goto	u67_25
  3073  03FD  0873               	movf	??_get_port_pin,w
  3074  03FE  0501               	andwf	1,w
  3075  03FF  0008               	return
  3076  0400                     __end_of_get_port_pin:	
  3077  007E                     btemp	set	126	;btemp
  3078  007E                     int$flags	set	126
  3079  007E                     wtemp0	set	126


Data Sizes:
    Strings     9
    Constant    10
    Data        0
    BSS         36
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     37      73
    BANK1            80      9       9
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 15
		 -> ISR@str(BANK0[15]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    process_debounce@sensor.debounce.handler	PTR FTN()void  size(2) Largest target is 1
		 -> switch_handler(), default_handler(), 

    process_debounce@sensor.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    process_debounce@sensor	PTR struct sensor_t size(1) Largest target is 35
		 -> sensors(BANK0[35]), 

    enable_debounce@sensor.debounce.handler	PTR FTN()void  size(2) Largest target is 1
		 -> switch_handler(), default_handler(), 

    enable_debounce@sensor.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    enable_debounce@sensor	PTR struct sensor_t size(1) Largest target is 35
		 -> sensors(BANK0[35]), 

    get_port_pin@port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    S20debounce_t$handler	PTR FTN()void  size(2) Largest target is 1
		 -> switch_handler(), default_handler(), 

    sensors.debounce.handler	PTR FTN()void  size(2) Largest target is 1
		 -> switch_handler(), default_handler(), 

    S24sensor_t$port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    sensors.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    UART_Write_Text@text	PTR unsigned char  size(2) Largest target is 15
		 -> ISR@str(BANK0[15]), STR_2(CODE[3]), STR_1(CODE[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _default_handler->i1_UART_Write_Text
    i1_UART_Write_Text->i1_UART_Write
    _enable_debounce->_get_port_pin

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_sprintf

Critical Paths under _main in BANK1

    _main->_initializeSensors
    _initializeSensors->___bmul
    _UART_Write_Text->_UART_Write

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1002
                    _UART_Write_Text
                           _autoBaud
                      _initializePIC
                  _initializeSensors
 ---------------------------------------------------------------------------------
 (1) _initializeSensors                                    5     5      0     538
                                              4 BANK1      5     5      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     284
                                              0 BANK1      4     3      1
 ---------------------------------------------------------------------------------
 (1) _initializePIC                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _autoBaud                                             6     6      0     142
                                              0 BANK1      6     6      0
 ---------------------------------------------------------------------------------
 (1) _UART_Write_Text                                      5     3      2     322
                                              1 BANK1      5     3      2
                         _UART_Write
 ---------------------------------------------------------------------------------
 (2) _UART_Write                                           1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                 22    22      0    2812
                                             15 BANK0     22    22      0
                    _enable_debounce
                   _process_debounce
                            _sprintf
                  i1_UART_Write_Text
                           i1___bmul
 ---------------------------------------------------------------------------------
 (4) i1___bmul                                             4     3      1      87
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             23    19      4    1148
                                              0 BANK0     15    11      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     287
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     290
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (4) _process_debounce                                     2     2      0     626
                                              6 COMMON     2     2      0
                    _default_handler *
                       _get_port_pin
                     _switch_handler *
 ---------------------------------------------------------------------------------
 (5) _switch_handler                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _default_handler                                      0     0      0     164
                  i1_UART_Write_Text
 ---------------------------------------------------------------------------------
 (4) i1_UART_Write_Text                                    5     3      2     164
                                              1 COMMON     5     3      2
                       i1_UART_Write
 ---------------------------------------------------------------------------------
 (5) i1_UART_Write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _enable_debounce                                      2     2      0     538
                                              4 COMMON     2     2      0
                       _get_port_pin
 ---------------------------------------------------------------------------------
 (5) _get_port_pin                                         4     1      3     300
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_Write_Text
     _UART_Write
   _autoBaud
   _initializePIC
   _initializeSensors
     ___bmul

 _ISR (ROOT)
   _enable_debounce
     _get_port_pin
   _process_debounce
     _default_handler *
       i1_UART_Write_Text
         i1_UART_Write
     _get_port_pin *
     _switch_handler *
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   i1_UART_Write_Text
     i1_UART_Write
   i1___bmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      49       5       91.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      9       9       7       11.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      60      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      60      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Dec 28 21:59:53 2016

            ___bmul@product 00A2                 __CFG_CP$OFF 0000                          l91 0361  
             ?_get_port_pin 0070                 __CFG_LVP$ON 0000                         l104 0402  
                       l130 0199                         l131 019E                         l126 018F  
                       l135 01C8                         l127 019C                         l128 0192  
                       l129 0195                         l139 01DB                __CFG_CPD$OFF 0000  
                       _PR6 041D                         _ISR 0004                __CFG_BORV$LO 0000  
                       wreg 0009                __CFG_IESO$ON 0000                        ?_ISR 0070  
                      ISR@i 0043                        ISR@x 0040                        l1541 03D8  
                      l1703 035C                        l1537 03D2                        l1641 0263  
                      l1635 020B                        l1663 01CD                        l1655 01B0  
                      l1807 01B9                        l1647 01B3                        l1673 01F3  
                      l1675 01F7                        l1693 0348                        l1687 0389  
                      _ADIF 008E                        STR_1 03CD                        STR_2 03CA  
                      STR_3 03C6                        u1335 01D9                        _LATC 010E  
                      u1265 0209                        u1275 0261                        u1365 01F1  
                      _TRMT 0CF1                __CFG_WRT$OFF 0000               __CFG_FCMEN$ON 0000  
                      _main 0342                        fsr0h 0005                        fsr1h 0007  
                      indf0 0000                        fsr0l 0004                        indf1 0001  
                      fsr1l 0006                        btemp 007E               __CFG_BOREN$ON 0000  
                      start 00B4           ___bmul@multiplier 00A3               __CFG_MCLRE$ON 0000  
   __end_of_UART_Write_Text 03A2                       ??_ISR 002F              ??_get_port_pin 0073  
                     ?_main 0070                       _ADRES 009B                       _BRG16 0CFB  
             __CFG_WDTE$OFF 0000                       _T2CON 001C                       _T6CON 041E  
           __end_of___lwdiv 02E7                       i1l104 0412                       i1l152 0068  
                     i1l147 003C                       i1l149 003A             __end_of___lwmod 0342  
                     _RCREG 0199                       _SPBRG 019B                       _PORTA 000C  
                     u71_25 02BE                       u80_25 032E                       u73_25 02C8  
                     u81_25 0335                       u74_25 02D2                       u67_24 03FB  
                     u67_25 03FA                       u75_25 02DA                       u78_25 031F  
                     _TXREG 019A             autoBaud@discard 00A1                 ?_UART_Write 0070  
        initializeSensors@i 00A7             __end_of_dpowers 03C6             _enable_debounce 0366  
          __end_ofi1___bmul 03F2                       pclath 000A                       status 0003  
                     wtemp0 007E             __end_of_sprintf 018E             __initialization 00B6  
              __end_of_main 0366                      ??_main 00A9              __CFG_PLLEN$OFF 0000  
                    ISR@str 0031   __size_of_process_debounce 002F                      _ADCON0 009D  
                    _ADCON1 009E                      u101_25 0132                      i1l1113 03A4  
                    i1l1151 02BB                      i1l1153 02C7                      i1l1401 03E3  
                    i1l1163 02E2                      i1l1181 0334                      i1l1405 03E9  
                    i1l1159 02D9                      i1l1175 031C                      i1l1351 0101  
                    i1l1177 0328                      i1l1185 033D                      i1l1361 0117  
                    i1l1345 00E9                      i1l1373 013C                      i1l1367 011D  
                    i1l1391 0189                      i1l1721 001D                      i1l1387 014F  
                    i1l1379 014B                      i1l1389 00C7                      i1l1741 0062  
                    i1l1751 0076                      i1l1735 0059                      i1l1783 00A9  
                    i1l1775 009D                      i1l1767 0090                      i1l1759 0083  
                    u143_25 001B                      u144_25 0038                      _INTCON 000B  
                    _OSCCON 0099                      _SPBRGH 019C                      _TMR6IF 009B  
            __CFG_PWRTE$OFF 0000                      ___bmul 03CF            __end_of_autoBaud 01FD  
       __size_of_UART_Write 000A              __CFG_STVREN$ON 0000            ?_UART_Write_Text 00A1  
                 ??___lwdiv 0074                   ??___lwmod 007C             _default_handler 040A  
   __end_of_enable_debounce 0386      __size_of_initializePIC 004A                   ??_sprintf 0024  
      __end_of_get_port_pin 0400     __end_of__initialization 00BD         ___bmul@multiplicand 00A0  
             ?i1_UART_Write 0070              __pcstackCOMMON 0070               autoBaud@index 00A4  
                 ?i1___bmul 0070       enable_debounce@sensor 0075            i1___bmul@product 0073  
                __pbssBANK0 0045       i1UART_Write_Text@text 0071              ??i1_UART_Write 0070  
   __end_of_default_handler 0411               _initializePIC 0269                  __pmaintext 0342  
                   ?___bmul 00A0                  __pintentry 0004                  ??i1___bmul 0071  
          ?_enable_debounce 0070           _initializeSensors 01FD                ??_UART_Write 00A0  
          _process_debounce 02E7          ?_initializeSensors 0070                   ?_autoBaud 0070  
   __size_of_switch_handler 0004         ??_initializeSensors 00A4              ?_initializePIC 0070  
           __size_of___bmul 0012          __end_of_UART_Write 040A                     ___lwdiv 02B3  
                   ___lwmod 0316                     __ptext1 01FD                     __ptext2 03CF  
                   __ptext3 0269                     __ptext4 018E                     __ptext5 0386  
                   __ptext6 0400                     __ptext8 03E1                     __ptext9 00C1  
              __size_of_ISR 00B0   __end_of_initializeSensors 0269                     _dpowers 03BC  
                 _IOCAFbits 0393         i1___bmul@multiplier 0072                   _IOCANbits 0392  
                 _IOCAPbits 0391                   _T6CONbits 041E                     _sensors 0046  
     __size_of_get_port_pin 000E                     _sprintf 00C1                     clrloop0 0419  
      end_of_initialization 00BD                  ??_autoBaud 00A0            ?_default_handler 0070  
                 _RCSTAbits 019D                __pstringtext 03BC                _get_port_pin 03F2  
            UART_Write@data 00A0            __CFG_FOSC$INTOSC 0000                   _TRISAbits 008C  
                 _TRISCbits 008E        __end_ofi1_UART_Write 0418             ??_initializePIC 00A0  
                 _TXSTAbits 019E      process_debounce@sensor 0077              __end_of___bmul 03E1  
         i1_UART_Write_Text 03A2                 _BAUDCONbits 019F          ?i1_UART_Write_Text 0071  
__size_of_initializeSensors 006C    __size_of_UART_Write_Text 001C           __size_ofi1___bmul 0011  
       start_initialization 00B6                 __end_of_ISR 00B4         ??i1_UART_Write_Text 0073  
            _switch_handler 041E                 _APFCON0bits 011D                    ??___bmul 00A1  
  __end_of_process_debounce 0316   __end_ofi1_UART_Write_Text 03BC                   ___latbits 0002  
             __pcstackBANK0 0020               __pcstackBANK1 00A0      i1UART_Write_Text@count 0074  
    __end_of_switch_handler 0422                 sprintf@flag 0029           __size_of_autoBaud 006F  
               sprintf@prec 002A            ___lwdiv@dividend 0072                    ?___lwdiv 0070  
                  ?___lwmod 0078       __size_ofi1_UART_Write 0007            get_port_pin@port 0070  
           ?_switch_handler 0070        UART_Write_Text@count 00A4            ___lwdiv@quotient 0075  
                  ?_sprintf 0020           ??_UART_Write_Text 00A3    __size_of_enable_debounce 0020  
                 clear_ram0 0418                    _PIE1bits 0091                    _PIE3bits 0093  
     i1___bmul@multiplicand 0070                    _PIR1bits 0011                    _PIR3bits 0013  
              i1_UART_Write 0411  __size_ofi1_UART_Write_Text 001A                    i1___bmul 03E1  
                _ADCON0bits 009D            i1UART_Write@data 0070              _shouldAutoBaud 0045  
          __size_of___lwdiv 0034            __size_of___lwmod 002C    __size_of_default_handler 0007  
                _ANSELAbits 018C                  sprintf@val 002B             ___lwdiv@divisor 0070  
           ___lwdiv@counter 0077                    __ptext10 0316                    __ptext11 02B3  
                  __ptext12 02E7                    __ptext13 040A                    __ptext14 041E  
                  __ptext15 03A2                    __ptext16 0411                    __ptext17 0366  
                  __ptext18 03F2             get_port_pin@pin 0072                    _autoBaud 018E  
          __size_of_sprintf 00CD         UART_Write_Text@text 00A1               __size_of_main 0024  
     __end_of_initializePIC 02B3           ??_enable_debounce 0074           ?_process_debounce 0070  
                  int$flags 007E          ??_process_debounce 0076           ISR@shouldDebounce 0041  
                  intlevel1 0000                   sprintf@ap 0028                   sprintf@sp 002D  
          ___lwmod@dividend 007A           __CFG_CLKOUTEN$OFF 0000            ??_switch_handler 0070  
           _UART_Write_Text 0386                    sprintf@c 002E                    sprintf@f 0020  
           ___lwmod@divisor 0078             ___lwmod@counter 007D                  _UART_Write 0400  
         ??_default_handler 0076          autoBaud@sync_count 00A2  
