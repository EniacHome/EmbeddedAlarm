

Microchip Technology PIC LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Jan 01 20:49:33 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	16F1829
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	stringtext,global,class=STRCODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	clrtext,global,class=CODE,delta=2
     8                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	intentry,global,class=CODE,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	dabs	1,0x7E,2
    32  0000                     
    33                           ; Version 1.40
    34                           ; Generated 01/12/2016 GMT
    35                           ; 
    36                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    37                           ; All rights reserved.
    38                           ; 
    39                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    40                           ; 
    41                           ; Redistribution and use in source and binary forms, with or without modification, are
    42                           ; permitted provided that the following conditions are met:
    43                           ; 
    44                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    45                           ;        conditions and the following disclaimer.
    46                           ; 
    47                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    48                           ;        of conditions and the following disclaimer in the documentation and/or other
    49                           ;        materials provided with the distribution.
    50                           ; 
    51                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    52                           ;        software without specific prior written permission.
    53                           ; 
    54                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    55                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    56                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    57                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    58                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    59                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    60                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    61                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    62                           ; 
    63                           ; 
    64                           ; Code-generator required, PIC16F1829 Definitions
    65                           ; 
    66                           ; SFR Addresses
    67  0000                     	;# 
    68  0001                     	;# 
    69  0002                     	;# 
    70  0003                     	;# 
    71  0004                     	;# 
    72  0005                     	;# 
    73  0006                     	;# 
    74  0007                     	;# 
    75  0008                     	;# 
    76  0009                     	;# 
    77  000A                     	;# 
    78  000B                     	;# 
    79  000C                     	;# 
    80  000D                     	;# 
    81  000E                     	;# 
    82  0011                     	;# 
    83  0012                     	;# 
    84  0013                     	;# 
    85  0014                     	;# 
    86  0015                     	;# 
    87  0016                     	;# 
    88  0016                     	;# 
    89  0017                     	;# 
    90  0018                     	;# 
    91  0019                     	;# 
    92  001A                     	;# 
    93  001B                     	;# 
    94  001C                     	;# 
    95  001E                     	;# 
    96  001F                     	;# 
    97  008C                     	;# 
    98  008D                     	;# 
    99  008E                     	;# 
   100  0091                     	;# 
   101  0092                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0097                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009B                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  010C                     	;# 
   116  010D                     	;# 
   117  010E                     	;# 
   118  0111                     	;# 
   119  0112                     	;# 
   120  0113                     	;# 
   121  0114                     	;# 
   122  0115                     	;# 
   123  0116                     	;# 
   124  0117                     	;# 
   125  0118                     	;# 
   126  0119                     	;# 
   127  011A                     	;# 
   128  011B                     	;# 
   129  011D                     	;# 
   130  011E                     	;# 
   131  018C                     	;# 
   132  018D                     	;# 
   133  018E                     	;# 
   134  0191                     	;# 
   135  0191                     	;# 
   136  0192                     	;# 
   137  0193                     	;# 
   138  0193                     	;# 
   139  0193                     	;# 
   140  0194                     	;# 
   141  0195                     	;# 
   142  0196                     	;# 
   143  0199                     	;# 
   144  019A                     	;# 
   145  019B                     	;# 
   146  019B                     	;# 
   147  019C                     	;# 
   148  019D                     	;# 
   149  019E                     	;# 
   150  019F                     	;# 
   151  020C                     	;# 
   152  020D                     	;# 
   153  020E                     	;# 
   154  0211                     	;# 
   155  0211                     	;# 
   156  0212                     	;# 
   157  0212                     	;# 
   158  0213                     	;# 
   159  0213                     	;# 
   160  0214                     	;# 
   161  0214                     	;# 
   162  0215                     	;# 
   163  0215                     	;# 
   164  0215                     	;# 
   165  0216                     	;# 
   166  0216                     	;# 
   167  0217                     	;# 
   168  0217                     	;# 
   169  0219                     	;# 
   170  021A                     	;# 
   171  021B                     	;# 
   172  021C                     	;# 
   173  021D                     	;# 
   174  021E                     	;# 
   175  021F                     	;# 
   176  0291                     	;# 
   177  0291                     	;# 
   178  0292                     	;# 
   179  0293                     	;# 
   180  0294                     	;# 
   181  0295                     	;# 
   182  0295                     	;# 
   183  0296                     	;# 
   184  0298                     	;# 
   185  0298                     	;# 
   186  0299                     	;# 
   187  029A                     	;# 
   188  029B                     	;# 
   189  029C                     	;# 
   190  029D                     	;# 
   191  029E                     	;# 
   192  0311                     	;# 
   193  0311                     	;# 
   194  0312                     	;# 
   195  0313                     	;# 
   196  0318                     	;# 
   197  0318                     	;# 
   198  0319                     	;# 
   199  031A                     	;# 
   200  038C                     	;# 
   201  038D                     	;# 
   202  038E                     	;# 
   203  0391                     	;# 
   204  0392                     	;# 
   205  0393                     	;# 
   206  0394                     	;# 
   207  0395                     	;# 
   208  0396                     	;# 
   209  039A                     	;# 
   210  039C                     	;# 
   211  039D                     	;# 
   212  039E                     	;# 
   213  039F                     	;# 
   214  0415                     	;# 
   215  0416                     	;# 
   216  0417                     	;# 
   217  041C                     	;# 
   218  041D                     	;# 
   219  041E                     	;# 
   220  0FE4                     	;# 
   221  0FE5                     	;# 
   222  0FE6                     	;# 
   223  0FE7                     	;# 
   224  0FE8                     	;# 
   225  0FE9                     	;# 
   226  0FEA                     	;# 
   227  0FEB                     	;# 
   228  0FED                     	;# 
   229  0FEE                     	;# 
   230  0FEF                     	;# 
   231  0000                     	;# 
   232  0001                     	;# 
   233  0002                     	;# 
   234  0003                     	;# 
   235  0004                     	;# 
   236  0005                     	;# 
   237  0006                     	;# 
   238  0007                     	;# 
   239  0008                     	;# 
   240  0009                     	;# 
   241  000A                     	;# 
   242  000B                     	;# 
   243  000C                     	;# 
   244  000D                     	;# 
   245  000E                     	;# 
   246  0011                     	;# 
   247  0012                     	;# 
   248  0013                     	;# 
   249  0014                     	;# 
   250  0015                     	;# 
   251  0016                     	;# 
   252  0016                     	;# 
   253  0017                     	;# 
   254  0018                     	;# 
   255  0019                     	;# 
   256  001A                     	;# 
   257  001B                     	;# 
   258  001C                     	;# 
   259  001E                     	;# 
   260  001F                     	;# 
   261  008C                     	;# 
   262  008D                     	;# 
   263  008E                     	;# 
   264  0091                     	;# 
   265  0092                     	;# 
   266  0093                     	;# 
   267  0094                     	;# 
   268  0095                     	;# 
   269  0096                     	;# 
   270  0097                     	;# 
   271  0098                     	;# 
   272  0099                     	;# 
   273  009A                     	;# 
   274  009B                     	;# 
   275  009B                     	;# 
   276  009C                     	;# 
   277  009D                     	;# 
   278  009E                     	;# 
   279  010C                     	;# 
   280  010D                     	;# 
   281  010E                     	;# 
   282  0111                     	;# 
   283  0112                     	;# 
   284  0113                     	;# 
   285  0114                     	;# 
   286  0115                     	;# 
   287  0116                     	;# 
   288  0117                     	;# 
   289  0118                     	;# 
   290  0119                     	;# 
   291  011A                     	;# 
   292  011B                     	;# 
   293  011D                     	;# 
   294  011E                     	;# 
   295  018C                     	;# 
   296  018D                     	;# 
   297  018E                     	;# 
   298  0191                     	;# 
   299  0191                     	;# 
   300  0192                     	;# 
   301  0193                     	;# 
   302  0193                     	;# 
   303  0193                     	;# 
   304  0194                     	;# 
   305  0195                     	;# 
   306  0196                     	;# 
   307  0199                     	;# 
   308  019A                     	;# 
   309  019B                     	;# 
   310  019B                     	;# 
   311  019C                     	;# 
   312  019D                     	;# 
   313  019E                     	;# 
   314  019F                     	;# 
   315  020C                     	;# 
   316  020D                     	;# 
   317  020E                     	;# 
   318  0211                     	;# 
   319  0211                     	;# 
   320  0212                     	;# 
   321  0212                     	;# 
   322  0213                     	;# 
   323  0213                     	;# 
   324  0214                     	;# 
   325  0214                     	;# 
   326  0215                     	;# 
   327  0215                     	;# 
   328  0215                     	;# 
   329  0216                     	;# 
   330  0216                     	;# 
   331  0217                     	;# 
   332  0217                     	;# 
   333  0219                     	;# 
   334  021A                     	;# 
   335  021B                     	;# 
   336  021C                     	;# 
   337  021D                     	;# 
   338  021E                     	;# 
   339  021F                     	;# 
   340  0291                     	;# 
   341  0291                     	;# 
   342  0292                     	;# 
   343  0293                     	;# 
   344  0294                     	;# 
   345  0295                     	;# 
   346  0295                     	;# 
   347  0296                     	;# 
   348  0298                     	;# 
   349  0298                     	;# 
   350  0299                     	;# 
   351  029A                     	;# 
   352  029B                     	;# 
   353  029C                     	;# 
   354  029D                     	;# 
   355  029E                     	;# 
   356  0311                     	;# 
   357  0311                     	;# 
   358  0312                     	;# 
   359  0313                     	;# 
   360  0318                     	;# 
   361  0318                     	;# 
   362  0319                     	;# 
   363  031A                     	;# 
   364  038C                     	;# 
   365  038D                     	;# 
   366  038E                     	;# 
   367  0391                     	;# 
   368  0392                     	;# 
   369  0393                     	;# 
   370  0394                     	;# 
   371  0395                     	;# 
   372  0396                     	;# 
   373  039A                     	;# 
   374  039C                     	;# 
   375  039D                     	;# 
   376  039E                     	;# 
   377  039F                     	;# 
   378  0415                     	;# 
   379  0416                     	;# 
   380  0417                     	;# 
   381  041C                     	;# 
   382  041D                     	;# 
   383  041E                     	;# 
   384  0FE4                     	;# 
   385  0FE5                     	;# 
   386  0FE6                     	;# 
   387  0FE7                     	;# 
   388  0FE8                     	;# 
   389  0FE9                     	;# 
   390  0FEA                     	;# 
   391  0FEB                     	;# 
   392  0FED                     	;# 
   393  0FEE                     	;# 
   394  0FEF                     	;# 
   395                           
   396                           	psect	stringtext
   397  03B9                     __pstringtext:	
   398  03B9                     _dpowers:	
   399  03B9  3401               	retlw	1
   400  03BA  3400               	retlw	0
   401  03BB  340A               	retlw	10
   402  03BC  3400               	retlw	0
   403  03BD  3464               	retlw	100
   404  03BE  3400               	retlw	0
   405  03BF  34E8               	retlw	232
   406  03C0  3403               	retlw	3
   407  03C1  3410               	retlw	16
   408  03C2  3427               	retlw	39
   409  03C3                     __end_of_dpowers:	
   410  000B                     _INTCON	set	11
   411  0011                     _PIR1bits	set	17
   412  0013                     _PIR3bits	set	19
   413  001C                     _T2CON	set	28
   414  000C                     _PORTA	set	12
   415  008E                     _ADIF	set	142
   416  009B                     _TMR6IF	set	155
   417  009B                     _ADRES	set	155
   418  009D                     _ADCON0	set	157
   419  009D                     _ADCON0bits	set	157
   420  009E                     _ADCON1	set	158
   421  0099                     _OSCCON	set	153
   422  0091                     _PIE1bits	set	145
   423  0093                     _PIE3bits	set	147
   424  008C                     _TRISAbits	set	140
   425  008E                     _TRISCbits	set	142
   426  011D                     _APFCON0bits	set	285
   427  010E                     _LATC	set	270
   428  019B                     _SPBRG	set	411
   429  018C                     _ANSELAbits	set	396
   430  019F                     _BAUDCONbits	set	415
   431  0199                     _RCREG	set	409
   432  019D                     _RCSTAbits	set	413
   433  019C                     _SPBRGH	set	412
   434  019A                     _TXREG	set	410
   435  019E                     _TXSTAbits	set	414
   436  0CFB                     _BRG16	set	3323
   437  0CF1                     _TRMT	set	3313
   438  0393                     _IOCAFbits	set	915
   439  0392                     _IOCANbits	set	914
   440  0391                     _IOCAPbits	set	913
   441  041D                     _PR6	set	1053
   442  041E                     _T6CON	set	1054
   443  041E                     _T6CONbits	set	1054
   444  03C3                     STR_3:	
   445  03C3  3420               	retlw	32	;' '
   446  03C4  3425               	retlw	37	;'%'
   447  03C5  3464               	retlw	100	;'d'
   448  03C6  3400               	retlw	0
   449  03C7                     STR_2:	
   450  03C7  3478               	retlw	120	;'x'
   451  03C8  3479               	retlw	121	;'y'
   452  03C9  3400               	retlw	0
   453  03CA                     STR_1:	
   454  03CA  3456               	retlw	86	;'V'
   455  03CB  3400               	retlw	0
   456                           
   457                           ; #config settings
   458  0000                     
   459                           	psect	cinit
   460  00C0                     start_initialization:	
   461  00C0                     __initialization:	
   462                           
   463                           ; Clear objects allocated to BANK0
   464  00C0  3020               	movlw	low __pbssBANK0
   465  00C1  0084               	movwf	4
   466  00C2  3000               	movlw	high __pbssBANK0
   467  00C3  0085               	movwf	5
   468  00C4  3025               	movlw	37
   469  00C5  3184  2415         	fcall	clear_ram0
   470  00C7                     end_of_initialization:	
   471                           ;End of C runtime variable initialization code
   472                           
   473  00C7                     __end_of__initialization:	
   474  00C7  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
   475  00C8  0020               	movlb	0
   476  00C9  3183  2B3F         	ljmp	_main	;jump to C main() function
   477                           
   478                           	psect	bssBANK0
   479  0020                     __pbssBANK0:	
   480  0020                     _should_autobaud:	
   481  0020                     	ds	1
   482  0021                     _sensors:	
   483  0021                     	ds	36
   484                           
   485                           	psect	clrtext
   486  0415                     clear_ram0:	
   487                           ;	Called with FSR0 containing the base address, and
   488                           ;	WREG with the size to clear
   489                           
   490  0415  0064               	clrwdt	;clear the watchdog before getting into this loop
   491  0416                     clrloop0:	
   492  0416  0180               	clrf	0	;clear RAM location pointed to by FSR
   493  0417  3101               	addfsr 0,1
   494  0418  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
   495  0419  2C16               	goto	clrloop0	;have we reached the end yet?
   496  041A  3400               	retlw	0	;all done for this memory range, return
   497                           
   498                           	psect	cstackBANK1
   499  00A0                     __pcstackBANK1:	
   500  00A0                     ??_initialize_PIC:	
   501  00A0                     ??_autoBaud:	
   502                           ; 1 bytes @ 0x0
   503                           
   504  00A0                     ??_UART_write:	
   505                           ; 1 bytes @ 0x0
   506                           
   507  00A0                     ?___bmul:	
   508                           ; 1 bytes @ 0x0
   509                           
   510  00A0                     UART_write@data:	
   511                           ; 1 bytes @ 0x0
   512                           
   513  00A0                     ___bmul@multiplicand:	
   514                           ; 1 bytes @ 0x0
   515                           
   516                           
   517                           ; 1 bytes @ 0x0
   518  00A0                     	ds	1
   519  00A1                     ?_UART_write_text:	
   520  00A1                     ??___bmul:	
   521                           ; 1 bytes @ 0x1
   522                           
   523  00A1                     autoBaud@discard:	
   524                           ; 1 bytes @ 0x1
   525                           
   526  00A1                     UART_write_text@text:	
   527                           ; 1 bytes @ 0x1
   528                           
   529                           
   530                           ; 2 bytes @ 0x1
   531  00A1                     	ds	1
   532  00A2                     ___bmul@product:	
   533  00A2                     autoBaud@sync_count:	
   534                           ; 1 bytes @ 0x2
   535                           
   536                           
   537                           ; 2 bytes @ 0x2
   538  00A2                     	ds	1
   539  00A3                     ??_UART_write_text:	
   540  00A3                     ___bmul@multiplier:	
   541                           ; 1 bytes @ 0x3
   542                           
   543                           
   544                           ; 1 bytes @ 0x3
   545  00A3                     	ds	1
   546  00A4                     ??_initialize_sensors:	
   547  00A4                     UART_write_text@count:	
   548                           ; 1 bytes @ 0x4
   549                           
   550  00A4                     autoBaud@index:	
   551                           ; 2 bytes @ 0x4
   552                           
   553                           
   554                           ; 2 bytes @ 0x4
   555  00A4                     	ds	3
   556  00A7                     initialize_sensors@i:	
   557                           
   558                           ; 2 bytes @ 0x7
   559  00A7                     	ds	2
   560  00A9                     ??_main:	
   561                           
   562                           	psect	cstackCOMMON
   563  0070                     __pcstackCOMMON:	
   564                           ; 1 bytes @ 0x9
   565                           
   566  0070                     ?_initialize_PIC:	
   567  0070                     ?_initialize_sensors:	
   568                           ; 1 bytes @ 0x0
   569                           
   570  0070                     ?_autoBaud:	
   571                           ; 1 bytes @ 0x0
   572                           
   573  0070                     ?_process_debounce:	
   574                           ; 1 bytes @ 0x0
   575                           
   576  0070                     ?_enable_debounce:	
   577                           ; 1 bytes @ 0x0
   578                           
   579  0070                     ?_default_handler:	
   580                           ; 1 bytes @ 0x0
   581                           
   582  0070                     ?_temperature_handler:	
   583                           ; 1 bytes @ 0x0
   584                           
   585  0070                     ??_temperature_handler:	
   586                           ; 1 bytes @ 0x0
   587                           
   588  0070                     ?_switch_handler:	
   589                           ; 1 bytes @ 0x0
   590                           
   591  0070                     ??_switch_handler:	
   592                           ; 1 bytes @ 0x0
   593                           
   594  0070                     ?_UART_write:	
   595                           ; 1 bytes @ 0x0
   596                           
   597  0070                     ?_ISR:	
   598                           ; 1 bytes @ 0x0
   599                           
   600  0070                     ?_get_port_pin:	
   601                           ; 1 bytes @ 0x0
   602                           
   603  0070                     ?i1_UART_write:	
   604                           ; 1 bytes @ 0x0
   605                           
   606  0070                     ??i1_UART_write:	
   607                           ; 1 bytes @ 0x0
   608                           
   609  0070                     ?i1___bmul:	
   610                           ; 1 bytes @ 0x0
   611                           
   612  0070                     ?_main:	
   613                           ; 1 bytes @ 0x0
   614                           
   615  0070                     ?___lwdiv:	
   616                           ; 2 bytes @ 0x0
   617                           
   618  0070                     i1UART_write@data:	
   619                           ; 2 bytes @ 0x0
   620                           
   621  0070                     i1___bmul@multiplicand:	
   622                           ; 1 bytes @ 0x0
   623                           
   624  0070                     get_port_pin@port:	
   625                           ; 1 bytes @ 0x0
   626                           
   627  0070                     ___lwdiv@divisor:	
   628                           ; 2 bytes @ 0x0
   629                           
   630                           
   631                           ; 2 bytes @ 0x0
   632  0070                     	ds	1
   633  0071                     ?i1_UART_write_text:	
   634  0071                     ??i1___bmul:	
   635                           ; 1 bytes @ 0x1
   636                           
   637  0071                     i1UART_write_text@text:	
   638                           ; 1 bytes @ 0x1
   639                           
   640                           
   641                           ; 2 bytes @ 0x1
   642  0071                     	ds	1
   643  0072                     get_port_pin@pin:	
   644  0072                     i1___bmul@multiplier:	
   645                           ; 1 bytes @ 0x2
   646                           
   647  0072                     ___lwdiv@dividend:	
   648                           ; 1 bytes @ 0x2
   649                           
   650                           
   651                           ; 2 bytes @ 0x2
   652  0072                     	ds	1
   653  0073                     ??_get_port_pin:	
   654  0073                     ??i1_UART_write_text:	
   655                           ; 1 bytes @ 0x3
   656                           
   657  0073                     i1___bmul@product:	
   658                           ; 1 bytes @ 0x3
   659                           
   660                           
   661                           ; 1 bytes @ 0x3
   662  0073                     	ds	1
   663  0074                     ??_enable_debounce:	
   664  0074                     ??___lwdiv:	
   665                           ; 1 bytes @ 0x4
   666                           
   667  0074                     i1UART_write_text@count:	
   668                           ; 1 bytes @ 0x4
   669                           
   670                           
   671                           ; 2 bytes @ 0x4
   672  0074                     	ds	1
   673  0075                     enable_debounce@sensor:	
   674  0075                     ___lwdiv@quotient:	
   675                           ; 1 bytes @ 0x5
   676                           
   677                           
   678                           ; 2 bytes @ 0x5
   679  0075                     	ds	1
   680  0076                     ??_process_debounce:	
   681  0076                     ??_default_handler:	
   682                           ; 1 bytes @ 0x6
   683                           
   684                           
   685                           ; 1 bytes @ 0x6
   686  0076                     	ds	1
   687  0077                     process_debounce@sensor:	
   688  0077                     ___lwdiv@counter:	
   689                           ; 1 bytes @ 0x7
   690                           
   691                           
   692                           ; 1 bytes @ 0x7
   693  0077                     	ds	1
   694  0078                     ?___lwmod:	
   695  0078                     ___lwmod@divisor:	
   696                           ; 2 bytes @ 0x8
   697                           
   698                           
   699                           ; 2 bytes @ 0x8
   700  0078                     	ds	2
   701  007A                     ___lwmod@dividend:	
   702                           
   703                           ; 2 bytes @ 0xA
   704  007A                     	ds	2
   705  007C                     ??___lwmod:	
   706                           
   707                           ; 1 bytes @ 0xC
   708  007C                     	ds	1
   709  007D                     ___lwmod@counter:	
   710                           
   711                           ; 1 bytes @ 0xD
   712  007D                     	ds	1
   713                           
   714                           	psect	cstackBANK0
   715  0045                     __pcstackBANK0:	
   716  0045                     ?_sprintf:	
   717  0045                     sprintf@f:	
   718                           ; 2 bytes @ 0x0
   719                           
   720                           
   721                           ; 2 bytes @ 0x0
   722  0045                     	ds	4
   723  0049                     ??_sprintf:	
   724                           
   725                           ; 1 bytes @ 0x4
   726  0049                     	ds	4
   727  004D                     sprintf@ap:	
   728                           
   729                           ; 1 bytes @ 0x8
   730  004D                     	ds	1
   731  004E                     sprintf@flag:	
   732                           
   733                           ; 1 bytes @ 0x9
   734  004E                     	ds	1
   735  004F                     sprintf@prec:	
   736                           
   737                           ; 1 bytes @ 0xA
   738  004F                     	ds	1
   739  0050                     sprintf@val:	
   740                           
   741                           ; 2 bytes @ 0xB
   742  0050                     	ds	2
   743  0052                     sprintf@sp:	
   744                           
   745                           ; 1 bytes @ 0xD
   746  0052                     	ds	1
   747  0053                     sprintf@c:	
   748                           
   749                           ; 1 bytes @ 0xE
   750  0053                     	ds	1
   751  0054                     ??_ISR:	
   752                           
   753                           ; 1 bytes @ 0xF
   754  0054                     	ds	2
   755  0056                     ISR@str:	
   756                           
   757                           ; 15 bytes @ 0x11
   758  0056                     	ds	15
   759  0065                     ISR@x:	
   760                           
   761                           ; 1 bytes @ 0x20
   762  0065                     	ds	1
   763  0066                     ISR@shouldDebounce:	
   764                           
   765                           ; 2 bytes @ 0x21
   766  0066                     	ds	2
   767  0068                     ISR@i:	
   768                           
   769                           ; 2 bytes @ 0x23
   770  0068                     	ds	2
   771                           
   772                           	psect	maintext
   773  033F                     __pmaintext:	
   774 ;;
   775 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   776 ;;
   777 ;; *************** function _main *****************
   778 ;; Defined at:
   779 ;;		line 41 in file "main.c"
   780 ;; Parameters:    Size  Location     Type
   781 ;;		None
   782 ;; Auto vars:     Size  Location     Type
   783 ;;		None
   784 ;; Return value:  Size  Location     Type
   785 ;;                  2   88[None  ] int 
   786 ;; Registers used:
   787 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   788 ;; Tracked objects:
   789 ;;		On entry : B1F/0
   790 ;;		On exit  : 0/0
   791 ;;		Unchanged: 0/0
   792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   797 ;;Total ram usage:        0 bytes
   798 ;; Hardware stack levels required when called:    7
   799 ;; This function calls:
   800 ;;		_UART_write_text
   801 ;;		_autoBaud
   802 ;;		_initialize_PIC
   803 ;;		_initialize_sensors
   804 ;; This function is called by:
   805 ;;		Startup code after reset
   806 ;; This function uses a non-reentrant model
   807 ;;
   808                           
   809                           
   810                           ;psect for function _main
   811  033F                     _main:	
   812                           
   813                           ;main.c: 42: initialize_PIC();
   814                           
   815                           ;incstack = 0
   816                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
   817  033F  3182  2266  3183   	fcall	_initialize_PIC
   818                           
   819                           ;main.c: 43: initialize_sensors();
   820  0342  3182  2207  3183   	fcall	_initialize_sensors
   821  0345                     l1696:	
   822                           ;main.c: 45: while(1){
   823                           
   824                           
   825                           ;main.c: 46: if(should_autobaud){
   826  0345  0020               	movlb	0	; select bank0
   827  0346  0820               	movf	_should_autobaud,w
   828  0347  1903               	btfsc	3,2
   829  0348  2B59               	goto	l1706
   830                           
   831                           ;main.c: 47: autoBaud();
   832  0349  3181  2198  3183   	fcall	_autoBaud
   833                           
   834                           ;main.c: 48: UART_write_text("V");
   835  034C  30CA               	movlw	low (STR_1| (0+32768))
   836  034D  0021               	movlb	1	; select bank1
   837  034E  00A1               	movwf	UART_write_text@text^(0+128)
   838  034F  3083               	movlw	high (STR_1| (0+32768))
   839  0350  00A2               	movwf	(UART_write_text@text^(0+128)+1)
   840  0351  3183  2383  3183   	fcall	_UART_write_text
   841                           
   842                           ;main.c: 49: PIE1bits.RCIE = 1;
   843  0354  0021               	movlb	1	; select bank1
   844  0355  1691               	bsf	17,5	;volatile
   845                           
   846                           ;main.c: 50: PIE1bits.TXIE = 1;
   847  0356  1611               	bsf	17,4	;volatile
   848                           
   849                           ;main.c: 51: should_autobaud = 0;
   850  0357  0020               	movlb	0	; select bank0
   851  0358  01A0               	clrf	_should_autobaud
   852  0359                     l1706:	
   853                           
   854                           ;main.c: 52: }
   855                           ;main.c: 55: if(RCSTAbits.OERR)
   856  0359  0023               	movlb	3	; select bank3
   857  035A  1C9D               	btfss	29,1	;volatile
   858  035B  2B5E               	goto	l91
   859                           
   860                           ;main.c: 56: {
   861                           ;main.c: 57: RCSTAbits.SPEN = 0;
   862  035C  139D               	bcf	29,7	;volatile
   863                           
   864                           ;main.c: 58: RCSTAbits.SPEN = 1;
   865  035D  179D               	bsf	29,7	;volatile
   866  035E                     l91:	
   867                           
   868                           ;main.c: 59: }
   869                           ;main.c: 61: if(RCSTAbits.FERR)
   870  035E  1D1D               	btfss	29,2	;volatile
   871  035F  2B45               	goto	l1696
   872                           
   873                           ;main.c: 62: {
   874                           ;main.c: 63: RCSTAbits.SPEN = 0;
   875  0360  139D               	bcf	29,7	;volatile
   876                           
   877                           ;main.c: 64: RCSTAbits.SPEN = 1;
   878  0361  179D               	bsf	29,7	;volatile
   879  0362  2B45               	goto	l1696
   880  0363                     __end_of_main:	
   881                           ;main.c: 65: }
   882                           ;main.c: 66: }
   883                           ;main.c: 68: return (0);
   884                           ;	Return value of _main is never used
   885                           
   886                           
   887                           	psect	text1
   888  0207                     __ptext1:	
   889 ;; *************** function _initialize_sensors *****************
   890 ;; Defined at:
   891 ;;		line 201 in file "main.c"
   892 ;; Parameters:    Size  Location     Type
   893 ;;		None
   894 ;; Auto vars:     Size  Location     Type
   895 ;;  i               2    7[BANK1 ] int 
   896 ;; Return value:  Size  Location     Type
   897 ;;                  1    wreg      void 
   898 ;; Registers used:
   899 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   900 ;; Tracked objects:
   901 ;;		On entry : 0/0
   902 ;;		On exit  : 0/0
   903 ;;		Unchanged: 0/0
   904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
   905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
   906 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
   907 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
   908 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
   909 ;;Total ram usage:        5 bytes
   910 ;; Hardware stack levels used:    1
   911 ;; Hardware stack levels required when called:    6
   912 ;; This function calls:
   913 ;;		___bmul
   914 ;; This function is called by:
   915 ;;		_main
   916 ;; This function uses a non-reentrant model
   917 ;;
   918                           
   919                           
   920                           ;psect for function _initialize_sensors
   921  0207                     _initialize_sensors:	
   922                           
   923                           ;main.c: 202: for(int i = 0; i < 6; ++i){
   924                           
   925                           ;incstack = 0
   926                           ; Regs used in _initialize_sensors: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   927  0207  0021               	movlb	1	; select bank1
   928  0208  01A7               	clrf	initialize_sensors@i^(0+128)
   929  0209  01A8               	clrf	(initialize_sensors@i+1)^(0+128)
   930  020A  0828               	movf	(initialize_sensors@i+1)^(0+128),w
   931  020B  3A80               	xorlw	128
   932  020C  00A4               	movwf	??_initialize_sensors^(0+128)
   933  020D  3080               	movlw	128
   934  020E  0224               	subwf	??_initialize_sensors^(0+128),w
   935  020F  1D03               	skipz
   936  0210  2A13               	goto	u1265
   937  0211  3006               	movlw	6
   938  0212  0227               	subwf	initialize_sensors@i^(0+128),w
   939  0213                     u1265:	
   940  0213  1803               	btfsc	3,0
   941  0214  2A5C               	goto	l1644
   942  0215                     l1638:	
   943                           
   944                           ;main.c: 203: sensors[i].port = &PORTA;
   945  0215  300C               	movlw	12
   946  0216  0021               	movlb	1	; select bank1
   947  0217  00A4               	movwf	??_initialize_sensors^(0+128)
   948  0218  3000               	movlw	0
   949  0219  00A5               	movwf	(??_initialize_sensors^(0+128)+1)
   950  021A  3006               	movlw	6
   951  021B  00A6               	movwf	(??_initialize_sensors+2)^(0+128)
   952  021C  0826               	movf	(??_initialize_sensors+2)^(0+128),w
   953  021D  00A0               	movwf	___bmul@multiplicand^(0+128)
   954  021E  0827               	movf	initialize_sensors@i^(0+128),w
   955  021F  3183  23CC  3182   	fcall	___bmul
   956  0222  3E21               	addlw	(low (_sensors| 0))& (0+255)
   957  0223  0086               	movwf	6
   958  0224  0187               	clrf	7
   959  0225  0021               	movlb	1	; select bank1
   960  0226  0824               	movf	??_initialize_sensors^(0+128),w
   961  0227  3FC0               	movwi [0]fsr1
   962  0228  0825               	movf	(??_initialize_sensors^(0+128)+1),w
   963  0229  3FC1               	movwi [1]fsr1
   964                           
   965                           ;main.c: 204: sensors[i].pin = i + 1;
   966  022A  0827               	movf	initialize_sensors@i^(0+128),w
   967  022B  3E01               	addlw	1
   968  022C  00A4               	movwf	??_initialize_sensors^(0+128)
   969  022D  3006               	movlw	6
   970  022E  00A5               	movwf	(??_initialize_sensors+1)^(0+128)
   971  022F  0825               	movf	(??_initialize_sensors+1)^(0+128),w
   972  0230  00A0               	movwf	___bmul@multiplicand^(0+128)
   973  0231  0827               	movf	initialize_sensors@i^(0+128),w
   974  0232  3183  23CC  3182   	fcall	___bmul
   975  0235  3E02               	addlw	2
   976  0236  3E21               	addlw	(low (_sensors| 0))& (0+255)
   977  0237  0086               	movwf	6
   978  0238  0187               	clrf	7
   979  0239  0021               	movlb	1	; select bank1
   980  023A  0824               	movf	??_initialize_sensors^(0+128),w
   981  023B  0081               	movwf	1
   982                           
   983                           ;main.c: 205: sensors[i].handler = default_handler;
   984  023C  3006               	movlw	6
   985  023D  00A4               	movwf	??_initialize_sensors^(0+128)
   986  023E  0824               	movf	??_initialize_sensors^(0+128),w
   987  023F  00A0               	movwf	___bmul@multiplicand^(0+128)
   988  0240  0827               	movf	initialize_sensors@i^(0+128),w
   989  0241  3183  23CC  3182   	fcall	___bmul
   990  0244  3E03               	addlw	3
   991  0245  3E21               	addlw	(low (_sensors| 0))& (0+255)
   992  0246  0086               	movwf	6
   993  0247  0187               	clrf	7
   994  0248  3007               	movlw	low _default_handler
   995  0249  3FC0               	movwi [0]fsr1
   996  024A  3004               	movlw	high _default_handler
   997  024B  3FC1               	movwi [1]fsr1
   998  024C  3001               	movlw	1
   999  024D  0021               	movlb	1	; select bank1
  1000  024E  07A7               	addwf	initialize_sensors@i^(0+128),f
  1001  024F  3000               	movlw	0
  1002  0250  3DA8               	addwfc	(initialize_sensors@i+1)^(0+128),f
  1003  0251  0828               	movf	(initialize_sensors@i+1)^(0+128),w
  1004  0252  3A80               	xorlw	128
  1005  0253  00A4               	movwf	??_initialize_sensors^(0+128)
  1006  0254  3080               	movlw	128
  1007  0255  0224               	subwf	??_initialize_sensors^(0+128),w
  1008  0256  1D03               	skipz
  1009  0257  2A5A               	goto	u1275
  1010  0258  3006               	movlw	6
  1011  0259  0227               	subwf	initialize_sensors@i^(0+128),w
  1012  025A                     u1275:	
  1013  025A  1C03               	skipc
  1014  025B  2A15               	goto	l1638
  1015  025C                     l1644:	
  1016                           
  1017                           ;main.c: 206: }
  1018                           ;main.c: 209: sensors[0].handler = temperature_handler;
  1019  025C  301F               	movlw	low _temperature_handler
  1020  025D  0020               	movlb	0	; select bank0
  1021  025E  00A4               	movwf	low ((_sensors| 0+3))
  1022  025F  3004               	movlw	high _temperature_handler
  1023  0260  00A5               	movwf	(low ((_sensors| 0+3))+1)
  1024                           
  1025                           ;main.c: 212: sensors[2].handler = switch_handler;
  1026  0261  301B               	movlw	low _switch_handler
  1027  0262  00B0               	movwf	low ((_sensors| 0+15))
  1028  0263  3004               	movlw	high _switch_handler
  1029  0264  00B1               	movwf	(low ((_sensors| 0+15))+1)
  1030  0265  0008               	return
  1031  0266                     __end_of_initialize_sensors:	
  1032                           
  1033                           	psect	text2
  1034  03CC                     __ptext2:	
  1035 ;; *************** function ___bmul *****************
  1036 ;; Defined at:
  1037 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul8.c"
  1038 ;; Parameters:    Size  Location     Type
  1039 ;;  multiplier      1    wreg     unsigned char 
  1040 ;;  multiplicand    1    0[BANK1 ] unsigned char 
  1041 ;; Auto vars:     Size  Location     Type
  1042 ;;  multiplier      1    3[BANK1 ] unsigned char 
  1043 ;;  product         1    2[BANK1 ] unsigned char 
  1044 ;; Return value:  Size  Location     Type
  1045 ;;                  1    wreg      unsigned char 
  1046 ;; Registers used:
  1047 ;;		wreg, status,2, status,0
  1048 ;; Tracked objects:
  1049 ;;		On entry : 0/0
  1050 ;;		On exit  : 0/0
  1051 ;;		Unchanged: 0/0
  1052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1053 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  1054 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1055 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  1056 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  1057 ;;Total ram usage:        4 bytes
  1058 ;; Hardware stack levels used:    1
  1059 ;; Hardware stack levels required when called:    5
  1060 ;; This function calls:
  1061 ;;		Nothing
  1062 ;; This function is called by:
  1063 ;;		_initialize_sensors
  1064 ;;		_ISR
  1065 ;; This function uses a non-reentrant model
  1066 ;;
  1067                           
  1068                           
  1069                           ;psect for function ___bmul
  1070  03CC                     ___bmul:	
  1071                           
  1072                           ;incstack = 0
  1073                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1074                           ;___bmul@multiplier stored from wreg
  1075  03CC  0021               	movlb	1	; select bank1
  1076  03CD  00A3               	movwf	___bmul@multiplier^(0+128)
  1077  03CE  01A2               	clrf	___bmul@product^(0+128)
  1078  03CF                     l1540:	
  1079  03CF  1C23               	btfss	___bmul@multiplier^(0+128),0
  1080  03D0  2BD5               	goto	l1544
  1081  03D1  0820               	movf	___bmul@multiplicand^(0+128),w
  1082  03D2  00A1               	movwf	??___bmul^(0+128)
  1083  03D3  0821               	movf	??___bmul^(0+128),w
  1084  03D4  07A2               	addwf	___bmul@product^(0+128),f
  1085  03D5                     l1544:	
  1086  03D5  1003               	clrc
  1087  03D6  0DA0               	rlf	___bmul@multiplicand^(0+128),f
  1088  03D7  1003               	clrc
  1089  03D8  0CA3               	rrf	___bmul@multiplier^(0+128),f
  1090  03D9  0823               	movf	___bmul@multiplier^(0+128),w
  1091  03DA  1D03               	btfss	3,2
  1092  03DB  2BCF               	goto	l1540
  1093  03DC  0822               	movf	___bmul@product^(0+128),w
  1094  03DD  0008               	return
  1095  03DE                     __end_of___bmul:	
  1096                           
  1097                           	psect	text3
  1098  0266                     __ptext3:	
  1099 ;; *************** function _initialize_PIC *****************
  1100 ;; Defined at:
  1101 ;;		line 98 in file "main.c"
  1102 ;; Parameters:    Size  Location     Type
  1103 ;;		None
  1104 ;; Auto vars:     Size  Location     Type
  1105 ;;		None
  1106 ;; Return value:  Size  Location     Type
  1107 ;;                  1    wreg      void 
  1108 ;; Registers used:
  1109 ;;		wreg, status,2
  1110 ;; Tracked objects:
  1111 ;;		On entry : 0/0
  1112 ;;		On exit  : 0/0
  1113 ;;		Unchanged: 0/0
  1114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1118 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1119 ;;Total ram usage:        0 bytes
  1120 ;; Hardware stack levels used:    1
  1121 ;; Hardware stack levels required when called:    5
  1122 ;; This function calls:
  1123 ;;		Nothing
  1124 ;; This function is called by:
  1125 ;;		_main
  1126 ;; This function uses a non-reentrant model
  1127 ;;
  1128                           
  1129                           
  1130                           ;psect for function _initialize_PIC
  1131  0266                     _initialize_PIC:	
  1132                           
  1133                           ;main.c: 104: OSCCON = 0b00111000;
  1134                           
  1135                           ;incstack = 0
  1136                           ; Regs used in _initialize_PIC: [wreg+status,2]
  1137  0266  3038               	movlw	56
  1138  0267  0021               	movlb	1	; select bank1
  1139  0268  0099               	movwf	25	;volatile
  1140                           
  1141                           ;main.c: 115: INTCON = 0b11001000;
  1142  0269  30C8               	movlw	200
  1143  026A  008B               	movwf	11	;volatile
  1144                           
  1145                           ;main.c: 118: TRISCbits.TRISC0 = 0;
  1146  026B  100E               	bcf	14,0	;volatile
  1147                           
  1148                           ;main.c: 119: TRISCbits.TRISC1 = 0;
  1149  026C  108E               	bcf	14,1	;volatile
  1150                           
  1151                           ;main.c: 120: TRISCbits.TRISC2 = 0;
  1152  026D  110E               	bcf	14,2	;volatile
  1153                           
  1154                           ;main.c: 121: TRISCbits.TRISC3 = 0;
  1155  026E  118E               	bcf	14,3	;volatile
  1156                           
  1157                           ;main.c: 122: LATC = 0;
  1158  026F  0022               	movlb	2	; select bank2
  1159  0270  018E               	clrf	14	;volatile
  1160                           
  1161                           ;main.c: 125: TRISAbits.TRISA0 = 1;
  1162  0271  0021               	movlb	1	; select bank1
  1163  0272  140C               	bsf	12,0	;volatile
  1164                           
  1165                           ;main.c: 126: ANSELAbits.ANSA0 = 1;
  1166  0273  0023               	movlb	3	; select bank3
  1167  0274  140C               	bsf	12,0	;volatile
  1168                           
  1169                           ;main.c: 129: TRISAbits.TRISA1 = 1;
  1170  0275  0021               	movlb	1	; select bank1
  1171  0276  148C               	bsf	12,1	;volatile
  1172                           
  1173                           ;main.c: 130: ANSELAbits.ANSA1 = 0;
  1174  0277  0023               	movlb	3	; select bank3
  1175  0278  108C               	bcf	12,1	;volatile
  1176                           
  1177                           ;main.c: 133: TRISAbits.TRISA2 = 1;
  1178  0279  0021               	movlb	1	; select bank1
  1179  027A  150C               	bsf	12,2	;volatile
  1180                           
  1181                           ;main.c: 134: ANSELAbits.ANSA2 = 0;
  1182  027B  0023               	movlb	3	; select bank3
  1183  027C  110C               	bcf	12,2	;volatile
  1184                           
  1185                           ;main.c: 137: TRISAbits.TRISA3 = 1;
  1186  027D  0021               	movlb	1	; select bank1
  1187  027E  158C               	bsf	12,3	;volatile
  1188                           
  1189                           ;main.c: 140: TRISAbits.TRISA4 = 1;
  1190  027F  160C               	bsf	12,4	;volatile
  1191                           
  1192                           ;main.c: 141: ANSELAbits.ANSA4 = 0;
  1193  0280  0023               	movlb	3	; select bank3
  1194  0281  120C               	bcf	12,4	;volatile
  1195                           
  1196                           ;main.c: 144: TRISAbits.TRISA5 = 1;
  1197  0282  0021               	movlb	1	; select bank1
  1198  0283  168C               	bsf	12,5	;volatile
  1199                           
  1200                           ;main.c: 147: IOCANbits.IOCAN1 = 1;
  1201  0284  0027               	movlb	7	; select bank7
  1202  0285  1492               	bsf	18,1	;volatile
  1203                           
  1204                           ;main.c: 148: IOCANbits.IOCAN2 = 1;
  1205  0286  1512               	bsf	18,2	;volatile
  1206                           
  1207                           ;main.c: 149: IOCANbits.IOCAN4 = 1;
  1208  0287  1612               	bsf	18,4	;volatile
  1209                           
  1210                           ;main.c: 152: IOCAPbits.IOCAP3 = 1;
  1211  0288  1591               	bsf	17,3	;volatile
  1212                           
  1213                           ;main.c: 153: IOCAPbits.IOCAP5 = 1;
  1214  0289  1691               	bsf	17,5	;volatile
  1215                           
  1216                           ;main.c: 160: ADCON0 = 0b00000001;
  1217  028A  3001               	movlw	1
  1218  028B  0021               	movlb	1	; select bank1
  1219  028C  009D               	movwf	29	;volatile
  1220                           
  1221                           ;main.c: 167: ADCON1 = 0b10000000;
  1222  028D  3080               	movlw	128
  1223  028E  009E               	movwf	30	;volatile
  1224                           
  1225                           ;main.c: 169: PIR1bits.ADIF = 0;
  1226  028F  0020               	movlb	0	; select bank0
  1227  0290  1311               	bcf	17,6	;volatile
  1228                           
  1229                           ;main.c: 170: PIE1bits.ADIE = 1;
  1230  0291  0021               	movlb	1	; select bank1
  1231  0292  1711               	bsf	17,6	;volatile
  1232                           
  1233                           ;main.c: 173: T2CON = 0b01111111;
  1234  0293  307F               	movlw	127
  1235  0294  0020               	movlb	0	; select bank0
  1236  0295  009C               	movwf	28	;volatile
  1237                           
  1238                           ;main.c: 174: PIE1bits.TMR2IE = 1;
  1239  0296  0021               	movlb	1	; select bank1
  1240  0297  1491               	bsf	17,1	;volatile
  1241                           
  1242                           ;main.c: 181: T6CON = 0b00100000;
  1243  0298  3020               	movlw	32
  1244  0299  0028               	movlb	8	; select bank8
  1245  029A  009E               	movwf	30	;volatile
  1246                           
  1247                           ;main.c: 182: PR6 = 125;
  1248  029B  307D               	movlw	125
  1249  029C  009D               	movwf	29	;volatile
  1250                           
  1251                           ;main.c: 183: PIE3bits.TMR6IE = 1;
  1252  029D  0021               	movlb	1	; select bank1
  1253  029E  1593               	bsf	19,3	;volatile
  1254                           
  1255                           ;main.c: 186: APFCON0bits.RXDTSEL = 1;
  1256  029F  0022               	movlb	2	; select bank2
  1257  02A0  179D               	bsf	29,7	;volatile
  1258                           
  1259                           ;main.c: 187: APFCON0bits.TXCKSEL = 1;
  1260  02A1  151D               	bsf	29,2	;volatile
  1261                           
  1262                           ;main.c: 189: BRG16 = 1;
  1263  02A2  0023               	movlb	3	; select bank3
  1264  02A3  159F               	bsf	31,3	;volatile
  1265                           
  1266                           ;main.c: 190: TXSTAbits.BRGH = 1;
  1267  02A4  151E               	bsf	30,2	;volatile
  1268                           
  1269                           ;main.c: 191: SPBRG = 12;
  1270  02A5  3000               	movlw	0
  1271  02A6  009C               	movwf	28	;volatile
  1272  02A7  300C               	movlw	12
  1273  02A8  009B               	movwf	27	;volatile
  1274                           
  1275                           ;main.c: 193: TXSTAbits.SYNC = 0;
  1276  02A9  121E               	bcf	30,4	;volatile
  1277                           
  1278                           ;main.c: 194: RCSTAbits.SPEN = 1;
  1279  02AA  179D               	bsf	29,7	;volatile
  1280                           
  1281                           ;main.c: 195: TXSTAbits.TXEN = 1;
  1282  02AB  169E               	bsf	30,5	;volatile
  1283                           
  1284                           ;main.c: 196: RCSTAbits.CREN = 1;
  1285  02AC  161D               	bsf	29,4	;volatile
  1286                           
  1287                           ;main.c: 198: PIE1bits.RCIE = 1;
  1288  02AD  0021               	movlb	1	; select bank1
  1289  02AE  1691               	bsf	17,5	;volatile
  1290  02AF  0008               	return
  1291  02B0                     __end_of_initialize_PIC:	
  1292                           
  1293                           	psect	text4
  1294  0198                     __ptext4:	
  1295 ;; *************** function _autoBaud *****************
  1296 ;; Defined at:
  1297 ;;		line 215 in file "main.c"
  1298 ;; Parameters:    Size  Location     Type
  1299 ;;		None
  1300 ;; Auto vars:     Size  Location     Type
  1301 ;;  index           2    4[BANK1 ] int 
  1302 ;;  sync_count      2    2[BANK1 ] int 
  1303 ;;  discard         1    1[BANK1 ] unsigned char 
  1304 ;; Return value:  Size  Location     Type
  1305 ;;                  1    wreg      void 
  1306 ;; Registers used:
  1307 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1308 ;; Tracked objects:
  1309 ;;		On entry : 0/0
  1310 ;;		On exit  : 0/0
  1311 ;;		Unchanged: 0/0
  1312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1314 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  1315 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  1316 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0
  1317 ;;Total ram usage:        6 bytes
  1318 ;; Hardware stack levels used:    1
  1319 ;; Hardware stack levels required when called:    5
  1320 ;; This function calls:
  1321 ;;		Nothing
  1322 ;; This function is called by:
  1323 ;;		_main
  1324 ;; This function uses a non-reentrant model
  1325 ;;
  1326                           
  1327                           
  1328                           ;psect for function _autoBaud
  1329  0198                     _autoBaud:	
  1330  0198  29FD               	goto	l1676
  1331  0199                     l129:	
  1332                           ;main.c: 224: {
  1333                           ;main.c: 225: case 0:
  1334                           
  1335                           ;main.c: 223: switch(index)
  1336                           
  1337                           ;main.c: 219: int sync_count;
  1338                           ;main.c: 221: try:
  1339                           
  1340                           ;main.c: 217: char discard;
  1341                           ;main.c: 218: int index = 0;
  1342                           
  1343                           ;incstack = 0
  1344                           ; Regs used in _autoBaud: [wreg-fsr0h+status,2+status,0]
  1345                           
  1346                           
  1347                           ;main.c: 226: BAUDCONbits.BRG16 = 0;
  1348  0199  0023               	movlb	3	; select bank3
  1349  019A  119F               	bcf	31,3	;volatile
  1350  019B  29A1               	goto	L1
  1351  019C                     l131:	
  1352                           ;main.c: 229: case 1:
  1353                           
  1354                           ;main.c: 228: break;
  1355                           
  1356                           ;main.c: 227: TXSTAbits.BRGH = 0;
  1357                           
  1358                           
  1359                           ;main.c: 230: BAUDCONbits.BRG16 = 0;
  1360  019C  0023               	movlb	3	; select bank3
  1361  019D  119F               	bcf	31,3	;volatile
  1362  019E  29A5               	goto	L2
  1363  019F                     l132:	
  1364                           ;main.c: 233: case 2:
  1365                           
  1366                           ;main.c: 232: break;
  1367                           
  1368                           ;main.c: 231: TXSTAbits.BRGH = 1;
  1369                           
  1370                           
  1371                           ;main.c: 234: BAUDCONbits.BRG16 = 1;
  1372  019F  0023               	movlb	3	; select bank3
  1373  01A0  159F               	bsf	31,3	;volatile
  1374  01A1                     L1:	
  1375                           
  1376                           ;main.c: 235: TXSTAbits.BRGH = 0;
  1377  01A1  111E               	bcf	30,2	;volatile
  1378                           
  1379                           ;main.c: 236: break;
  1380  01A2  29A6               	goto	l130
  1381  01A3                     l133:	
  1382                           ;main.c: 237: case 3:
  1383                           
  1384                           
  1385                           ;main.c: 238: BAUDCONbits.BRG16 = 1;
  1386  01A3  0023               	movlb	3	; select bank3
  1387  01A4  159F               	bsf	31,3	;volatile
  1388  01A5                     L2:	
  1389                           
  1390                           ;main.c: 239: TXSTAbits.BRGH = 1;
  1391  01A5  151E               	bsf	30,2	;volatile
  1392  01A6                     l130:	
  1393                           ;main.c: 241: }
  1394                           
  1395                           ;main.c: 240: break;
  1396                           
  1397                           
  1398                           ;main.c: 243: BAUDCONbits.ABDEN = 1;
  1399  01A6  0023               	movlb	3	; select bank3
  1400  01A7  141F               	bsf	31,0	;volatile
  1401  01A8                     l134:	
  1402                           ;main.c: 244: while(!PIR1bits.RCIF);
  1403                           
  1404  01A8  0020               	movlb	0	; select bank0
  1405  01A9  1E91               	btfss	17,5	;volatile
  1406  01AA  29A8               	goto	l134
  1407                           
  1408                           ;main.c: 245: discard = RCREG;
  1409  01AB  0023               	movlb	3	; select bank3
  1410  01AC  0819               	movf	25,w	;volatile
  1411  01AD  0021               	movlb	1	; select bank1
  1412  01AE  00A0               	movwf	??_autoBaud^(0+128)
  1413  01AF  0820               	movf	??_autoBaud^(0+128),w
  1414  01B0  00A1               	movwf	autoBaud@discard^(0+128)
  1415                           
  1416                           ;main.c: 247: if(SPBRG != 0)
  1417  01B1  0023               	movlb	3	; select bank3
  1418  01B2  081B               	movf	27,w	;volatile
  1419  01B3  041C               	iorwf	28,w	;volatile
  1420  01B4  1903               	btfsc	3,2
  1421  01B5  29BA               	goto	l1658
  1422                           
  1423                           ;main.c: 248: {
  1424                           ;main.c: 249: --SPBRG;
  1425  01B6  3001               	movlw	1
  1426  01B7  029B               	subwf	27,f	;volatile
  1427  01B8  3000               	movlw	0
  1428  01B9  3B9C               	subwfb	28,f	;volatile
  1429  01BA                     l1658:	
  1430                           
  1431                           ;main.c: 250: }
  1432                           ;main.c: 253: if(BAUDCONbits.ABDOVF)
  1433  01BA  1F9F               	btfss	31,7	;volatile
  1434  01BB  29D2               	goto	l138
  1435                           
  1436                           ;main.c: 254: {
  1437                           ;main.c: 255: BAUDCONbits.ABDOVF = 0;
  1438  01BC  139F               	bcf	31,7	;volatile
  1439  01BD                     l1650:	
  1440                           
  1441                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1442                           ; Switch size 1, requested type "space"
  1443                           ; Number of cases is 1, Range of values is 0 to 0
  1444                           ; switch strategies available:
  1445                           ; Name         Instructions Cycles
  1446                           ; simple_byte            4     3 (average)
  1447                           ; direct_byte            8     6 (fixed)
  1448                           ; jumptable            260     6 (fixed)
  1449                           ;	Chosen strategy is simple_byte
  1450  01BD  0021               	movlb	1	; select bank1
  1451  01BE  0825               	movf	(autoBaud@index+1)^(0+128),w
  1452  01BF  3A00               	xorlw	0	; case 0
  1453  01C0  1903               	skipnz
  1454  01C1  29C3               	goto	l1810
  1455  01C2  29A6               	goto	l130
  1456  01C3                     l1810:	
  1457                           
  1458                           ; Switch size 1, requested type "space"
  1459                           ; Number of cases is 4, Range of values is 0 to 3
  1460                           ; switch strategies available:
  1461                           ; Name         Instructions Cycles
  1462                           ; simple_byte           13     7 (average)
  1463                           ; direct_byte           14     6 (fixed)
  1464                           ; jumptable            260     6 (fixed)
  1465                           ;	Chosen strategy is simple_byte
  1466  01C3  0824               	movf	autoBaud@index^(0+128),w
  1467  01C4  3A00               	xorlw	0	; case 0
  1468  01C5  1903               	skipnz
  1469  01C6  2999               	goto	l129
  1470  01C7  3A01               	xorlw	1	; case 1
  1471  01C8  1903               	skipnz
  1472  01C9  299C               	goto	l131
  1473  01CA  3A03               	xorlw	3	; case 2
  1474  01CB  1903               	skipnz
  1475  01CC  299F               	goto	l132
  1476  01CD  3A01               	xorlw	1	; case 3
  1477  01CE  1903               	skipnz
  1478  01CF  29A3               	goto	l133
  1479  01D0  29A6               	goto	l130
  1480                           
  1481                           ;main.c: 256: goto try;
  1482  01D1  29A6               	goto	l130
  1483  01D2                     l138:	
  1484                           
  1485                           ;main.c: 257: }
  1486                           ;main.c: 258: if(!BAUDCONbits.BRG16 && SPBRGH)
  1487  01D2  199F               	btfsc	31,3	;volatile
  1488  01D3  29D7               	goto	l1666
  1489  01D4  081C               	movf	28,w	;volatile
  1490  01D5  1D03               	btfss	3,2
  1491  01D6  29BD               	goto	l1650
  1492  01D7                     l1666:	
  1493                           ;main.c: 259: {
  1494                           ;main.c: 260: goto try;
  1495                           
  1496                           
  1497                           ;main.c: 261: }
  1498                           ;main.c: 264: for (sync_count=0; sync_count < 2; ++sync_count)
  1499  01D7  0021               	movlb	1	; select bank1
  1500  01D8  01A2               	clrf	autoBaud@sync_count^(0+128)
  1501  01D9  01A3               	clrf	(autoBaud@sync_count+1)^(0+128)
  1502  01DA                     L3:	
  1503  01DA  0823               	movf	(autoBaud@sync_count+1)^(0+128),w
  1504  01DB  3A80               	xorlw	128
  1505  01DC  00A0               	movwf	??_autoBaud^(0+128)
  1506  01DD  3080               	movlw	128
  1507  01DE  0220               	subwf	??_autoBaud^(0+128),w
  1508  01DF  1D03               	skipz
  1509  01E0  29E3               	goto	u1335
  1510  01E1  3002               	movlw	2
  1511  01E2  0222               	subwf	autoBaud@sync_count^(0+128),w
  1512  01E3                     u1335:	
  1513  01E3  1803               	btfsc	3,0
  1514  01E4  0008               	return
  1515  01E5                     l142:	
  1516                           ;main.c: 265: {
  1517                           ;main.c: 266: while(!PIR1bits.RCIF);
  1518                           
  1519  01E5  0020               	movlb	0	; select bank0
  1520  01E6  1E91               	btfss	17,5	;volatile
  1521  01E7  29E5               	goto	l142
  1522                           
  1523                           ;main.c: 267: if(RCREG != 'U')
  1524  01E8  3055               	movlw	85
  1525  01E9  0023               	movlb	3	; select bank3
  1526  01EA  0619               	xorwf	25,w	;volatile
  1527  01EB  1903               	btfsc	3,2
  1528  01EC  2A01               	goto	l1678
  1529                           
  1530                           ;main.c: 268: {
  1531                           ;main.c: 269: ++index;
  1532  01ED  3001               	movlw	1
  1533  01EE  0021               	movlb	1	; select bank1
  1534  01EF  07A4               	addwf	autoBaud@index^(0+128),f
  1535  01F0  3000               	movlw	0
  1536  01F1  3DA5               	addwfc	(autoBaud@index+1)^(0+128),f
  1537                           
  1538                           ;main.c: 270: if(index > 3)
  1539  01F2  0825               	movf	(autoBaud@index+1)^(0+128),w
  1540  01F3  3A80               	xorlw	128
  1541  01F4  00A0               	movwf	??_autoBaud^(0+128)
  1542  01F5  3080               	movlw	128
  1543  01F6  0220               	subwf	??_autoBaud^(0+128),w
  1544  01F7  1D03               	skipz
  1545  01F8  29FB               	goto	u1365
  1546  01F9  3004               	movlw	4
  1547  01FA  0224               	subwf	autoBaud@index^(0+128),w
  1548  01FB                     u1365:	
  1549  01FB  1C03               	skipc
  1550  01FC  29BD               	goto	l1650
  1551  01FD                     l1676:	
  1552                           
  1553                           ;main.c: 271: index = 0;
  1554  01FD  0021               	movlb	1	; select bank1
  1555  01FE  01A4               	clrf	autoBaud@index^(0+128)
  1556  01FF  01A5               	clrf	(autoBaud@index+1)^(0+128)
  1557                           
  1558                           ;main.c: 272: goto try;
  1559  0200  29BD               	goto	l1650
  1560  0201                     l1678:	
  1561  0201  3001               	movlw	1
  1562  0202  0021               	movlb	1	; select bank1
  1563  0203  07A2               	addwf	autoBaud@sync_count^(0+128),f
  1564  0204  3000               	movlw	0
  1565  0205  3DA3               	addwfc	(autoBaud@sync_count+1)^(0+128),f
  1566  0206  29DA               	goto	L3
  1567  0207                     __end_of_autoBaud:	
  1568                           
  1569                           	psect	text5
  1570  0383                     __ptext5:	
  1571 ;; *************** function _UART_write_text *****************
  1572 ;; Defined at:
  1573 ;;		line 89 in file "main.c"
  1574 ;; Parameters:    Size  Location     Type
  1575 ;;  text            2    1[BANK1 ] PTR unsigned char 
  1576 ;;		 -> ISR@str(15), STR_2(3), STR_1(2), 
  1577 ;; Auto vars:     Size  Location     Type
  1578 ;;  count           2    4[BANK1 ] int 
  1579 ;; Return value:  Size  Location     Type
  1580 ;;                  1    wreg      void 
  1581 ;; Registers used:
  1582 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1583 ;; Tracked objects:
  1584 ;;		On entry : 0/0
  1585 ;;		On exit  : 0/0
  1586 ;;		Unchanged: 0/0
  1587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1588 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1589 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  1590 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  1591 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0
  1592 ;;Total ram usage:        5 bytes
  1593 ;; Hardware stack levels used:    1
  1594 ;; Hardware stack levels required when called:    6
  1595 ;; This function calls:
  1596 ;;		_UART_write
  1597 ;; This function is called by:
  1598 ;;		_main
  1599 ;; This function uses a non-reentrant model
  1600 ;;
  1601                           
  1602                           
  1603                           ;psect for function _UART_write_text
  1604  0383                     _UART_write_text:	
  1605                           
  1606                           ;main.c: 91: int count;
  1607                           ;main.c: 92: for(count = 0; text[count]!='\0'; count++)
  1608                           
  1609                           ;incstack = 0
  1610                           ; Regs used in _UART_write_text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1611  0383  0021               	movlb	1	; select bank1
  1612  0384  01A4               	clrf	UART_write_text@count^(0+128)
  1613  0385  01A5               	clrf	(UART_write_text@count+1)^(0+128)
  1614  0386                     l1690:	
  1615  0386  0821               	movf	UART_write_text@text^(0+128),w
  1616  0387  0724               	addwf	UART_write_text@count^(0+128),w
  1617  0388  0084               	movwf	4
  1618  0389  0822               	movf	(UART_write_text@text+1)^(0+128),w
  1619  038A  3D25               	addwfc	(UART_write_text@count+1)^(0+128),w
  1620  038B  0085               	movwf	5
  1621  038C  0012               	moviw fsr0++
  1622  038D  1903               	btfsc	3,2
  1623  038E  0008               	return
  1624                           
  1625                           ;main.c: 93: {
  1626                           ;main.c: 94: UART_write(text[count]);
  1627  038F  0821               	movf	UART_write_text@text^(0+128),w
  1628  0390  0724               	addwf	UART_write_text@count^(0+128),w
  1629  0391  0084               	movwf	4
  1630  0392  0822               	movf	(UART_write_text@text+1)^(0+128),w
  1631  0393  3D25               	addwfc	(UART_write_text@count+1)^(0+128),w
  1632  0394  0085               	movwf	5
  1633  0395  0800               	movf	0,w	;code access
  1634  0396  3183  23FD  3183   	fcall	_UART_write
  1635  0399  3001               	movlw	1
  1636  039A  0021               	movlb	1	; select bank1
  1637  039B  07A4               	addwf	UART_write_text@count^(0+128),f
  1638  039C  3000               	movlw	0
  1639  039D  3DA5               	addwfc	(UART_write_text@count+1)^(0+128),f
  1640  039E  2B86               	goto	l1690
  1641  039F                     __end_of_UART_write_text:	
  1642                           
  1643                           	psect	text6
  1644  03FD                     __ptext6:	
  1645 ;; *************** function _UART_write *****************
  1646 ;; Defined at:
  1647 ;;		line 83 in file "main.c"
  1648 ;; Parameters:    Size  Location     Type
  1649 ;;  data            1    wreg     unsigned char 
  1650 ;; Auto vars:     Size  Location     Type
  1651 ;;  data            1    0[BANK1 ] unsigned char 
  1652 ;; Return value:  Size  Location     Type
  1653 ;;                  1    wreg      void 
  1654 ;; Registers used:
  1655 ;;		wreg
  1656 ;; Tracked objects:
  1657 ;;		On entry : 0/0
  1658 ;;		On exit  : 0/0
  1659 ;;		Unchanged: 0/0
  1660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1662 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  1663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1664 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  1665 ;;Total ram usage:        1 bytes
  1666 ;; Hardware stack levels used:    1
  1667 ;; Hardware stack levels required when called:    5
  1668 ;; This function calls:
  1669 ;;		Nothing
  1670 ;; This function is called by:
  1671 ;;		_UART_write_text
  1672 ;; This function uses a non-reentrant model
  1673 ;;
  1674                           
  1675                           
  1676                           ;psect for function _UART_write
  1677  03FD                     _UART_write:	
  1678                           
  1679                           ;incstack = 0
  1680                           ; Regs used in _UART_write: [wreg]
  1681                           ;UART_write@data stored from wreg
  1682  03FD  0021               	movlb	1	; select bank1
  1683  03FE  00A0               	movwf	UART_write@data^(0+128)
  1684  03FF                     l107:	
  1685                           ;main.c: 85: while(!TRMT);
  1686                           
  1687  03FF  0023               	movlb	3	; select bank3
  1688  0400  1C9E               	btfss	30,1	;volatile
  1689  0401  2BFF               	goto	l107
  1690                           
  1691                           ;main.c: 86: TXREG = data;
  1692  0402  0021               	movlb	1	; select bank1
  1693  0403  0820               	movf	UART_write@data^(0+128),w
  1694  0404  0023               	movlb	3	; select bank3
  1695  0405  009A               	movwf	26	;volatile
  1696  0406  0008               	return
  1697  0407                     __end_of_UART_write:	
  1698                           
  1699                           	psect	intentry
  1700  0004                     __pintentry:	
  1701 ;; *************** function _ISR *****************
  1702 ;; Defined at:
  1703 ;;		line 278 in file "main.c"
  1704 ;; Parameters:    Size  Location     Type
  1705 ;;		None
  1706 ;; Auto vars:     Size  Location     Type
  1707 ;;  i               2   35[BANK0 ] int 
  1708 ;;  x               1   32[BANK0 ] unsigned char 
  1709 ;;  str            15   17[BANK0 ] unsigned char [15]
  1710 ;;  shouldDeboun    2   33[BANK0 ] int 
  1711 ;; Return value:  Size  Location     Type
  1712 ;;                  1    wreg      void 
  1713 ;; Registers used:
  1714 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1715 ;; Tracked objects:
  1716 ;;		On entry : 0/0
  1717 ;;		On exit  : 0/0
  1718 ;;		Unchanged: 0/0
  1719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  1720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1721 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1722 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1723 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0
  1724 ;;Total ram usage:       22 bytes
  1725 ;; Hardware stack levels used:    1
  1726 ;; Hardware stack levels required when called:    4
  1727 ;; This function calls:
  1728 ;;		_default_handler
  1729 ;;		_enable_debounce
  1730 ;;		_process_debounce
  1731 ;;		_sprintf
  1732 ;;		_switch_handler
  1733 ;;		_temperature_handler
  1734 ;;		i1_UART_write_text
  1735 ;;		i1___bmul
  1736 ;; This function is called by:
  1737 ;;		Interrupt level 1
  1738 ;; This function uses a non-reentrant model
  1739 ;;
  1740                           
  1741  0004                     _ISR:	
  1742                           
  1743                           ;incstack = 0
  1744  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  1745                           
  1746                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1747  0005  3180               	pagesel	$
  1748  0006  0020               	movlb	0	; select bank0
  1749  0007  087F               	movf	127,w
  1750  0008  00D5               	movwf	??_ISR+1
  1751                           
  1752                           ;main.c: 279: int shouldDebounce = 0;
  1753  0009  01E6               	clrf	ISR@shouldDebounce
  1754  000A  01E7               	clrf	ISR@shouldDebounce+1
  1755                           
  1756                           ;main.c: 282: if(PIR3bits.TMR6IF){
  1757  000B  1D93               	btfss	19,3	;volatile
  1758  000C  283C               	goto	i1l150
  1759                           
  1760                           ;main.c: 283: T6CONbits.TMR6ON = 0;
  1761  000D  0028               	movlb	8	; select bank8
  1762  000E  111E               	bcf	30,2	;volatile
  1763                           
  1764                           ;main.c: 285: for(int i = 0; i < 6; ++i){
  1765  000F  0020               	movlb	0	; select bank0
  1766  0010  01E8               	clrf	ISR@i
  1767  0011  01E9               	clrf	ISR@i+1
  1768  0012  0869               	movf	ISR@i+1,w
  1769  0013  3A80               	xorlw	128
  1770  0014  00D4               	movwf	??_ISR
  1771  0015  3080               	movlw	128
  1772  0016  0254               	subwf	??_ISR,w
  1773  0017  1D03               	skipz
  1774  0018  281B               	goto	u143_25
  1775  0019  3006               	movlw	6
  1776  001A  0268               	subwf	ISR@i,w
  1777  001B                     u143_25:	
  1778  001B  1803               	btfsc	3,0
  1779  001C  283A               	goto	i1l152
  1780  001D                     i1l1724:	
  1781                           
  1782                           ;main.c: 286: process_debounce(&sensors[i]);
  1783  001D  3006               	movlw	6
  1784  001E  0020               	movlb	0	; select bank0
  1785  001F  00D4               	movwf	??_ISR
  1786  0020  0854               	movf	??_ISR,w
  1787  0021  00F0               	movwf	i1___bmul@multiplicand
  1788  0022  0868               	movf	ISR@i,w
  1789  0023  3183  23DE  3180   	fcall	i1___bmul
  1790  0026  3E21               	addlw	(low (_sensors| 0))& (0+255)
  1791  0027  3182  22E4  3180   	fcall	_process_debounce
  1792  002A  3001               	movlw	1
  1793  002B  0020               	movlb	0	; select bank0
  1794  002C  07E8               	addwf	ISR@i,f
  1795  002D  3000               	movlw	0
  1796  002E  3DE9               	addwfc	ISR@i+1,f
  1797  002F  0869               	movf	ISR@i+1,w
  1798  0030  3A80               	xorlw	128
  1799  0031  00D4               	movwf	??_ISR
  1800  0032  3080               	movlw	128
  1801  0033  0254               	subwf	??_ISR,w
  1802  0034  1D03               	skipz
  1803  0035  2838               	goto	u144_25
  1804  0036  3006               	movlw	6
  1805  0037  0268               	subwf	ISR@i,w
  1806  0038                     u144_25:	
  1807  0038  1C03               	skipc
  1808  0039  281D               	goto	i1l1724
  1809  003A                     i1l152:	
  1810                           
  1811                           ;main.c: 287: }
  1812                           ;main.c: 289: TMR6IF = 0;
  1813  003A  0020               	movlb	0	; select bank0
  1814  003B  1193               	bcf	19,3	;volatile
  1815  003C                     i1l150:	
  1816                           
  1817                           ;main.c: 290: }
  1818                           ;main.c: 294: if(ADIF){
  1819  003C  1F11               	btfss	17,6	;volatile
  1820  003D  2863               	goto	i1l1738
  1821                           
  1822                           ;main.c: 295: sensors[0].handler();
  1823  003E  3003               	movlw	3
  1824  003F  3E21               	addlw	(low (_sensors| 0))& (0+255)
  1825  0040  0086               	movwf	6
  1826  0041  0187               	clrf	7
  1827  0042  3F41               	moviw [1]fsr1
  1828  0043  008A               	movwf	10
  1829  0044  3F40               	moviw [0]fsr1
  1830  0045  000A               	callw
  1831  0046  3180               	pagesel	$
  1832                           
  1833                           ;main.c: 296: char str[15];
  1834                           ;main.c: 297: sprintf(str," %d", ADRES);
  1835  0047  30C3               	movlw	low (STR_3| (0+32768))
  1836  0048  0020               	movlb	0	; select bank0
  1837  0049  00C5               	movwf	sprintf@f
  1838  004A  3083               	movlw	high (STR_3| (0+32768))
  1839  004B  00C6               	movwf	sprintf@f+1
  1840  004C  0021               	movlb	1	; select bank1
  1841  004D  081C               	movf	28,w	;volatile
  1842  004E  0020               	movlb	0	; select bank0
  1843  004F  00C8               	movwf	?_sprintf+3
  1844  0050  0021               	movlb	1	; select bank1
  1845  0051  081B               	movf	27,w	;volatile
  1846  0052  0020               	movlb	0	; select bank0
  1847  0053  00C7               	movwf	?_sprintf+2
  1848  0054  3056               	movlw	(low (ISR@str| 0))& (0+255)
  1849  0055  3180  20CB  3180   	fcall	_sprintf
  1850                           
  1851                           ;main.c: 298: UART_write_text(str);
  1852  0058  3056               	movlw	low ISR@str
  1853  0059  00F1               	movwf	i1UART_write_text@text
  1854  005A  3000               	movlw	high ISR@str
  1855  005B  00F2               	movwf	i1UART_write_text@text+1
  1856  005C  3183  239F  3180   	fcall	i1_UART_write_text
  1857                           
  1858                           ;main.c: 299: ADCON0bits.GO = 0;
  1859  005F  0021               	movlb	1	; select bank1
  1860  0060  109D               	bcf	29,1	;volatile
  1861                           
  1862                           ;main.c: 300: ADIF = 0;
  1863  0061  0020               	movlb	0	; select bank0
  1864  0062  1311               	bcf	17,6	;volatile
  1865  0063                     i1l1738:	
  1866                           
  1867                           ;main.c: 301: }
  1868                           ;main.c: 305: if(PIR1bits.RCIF){
  1869  0063  1E91               	btfss	17,5	;volatile
  1870  0064  286C               	goto	i1l1744
  1871                           
  1872                           ;main.c: 306: char x = RCREG;
  1873  0065  0023               	movlb	3	; select bank3
  1874  0066  0819               	movf	25,w	;volatile
  1875  0067  0020               	movlb	0	; select bank0
  1876  0068  00D4               	movwf	??_ISR
  1877  0069  0854               	movf	??_ISR,w
  1878  006A  00E5               	movwf	ISR@x
  1879                           
  1880                           ;main.c: 307: PIR1bits.RCIF = 0;
  1881  006B  1291               	bcf	17,5	;volatile
  1882  006C                     i1l1744:	
  1883                           
  1884                           ;main.c: 308: }
  1885                           ;main.c: 311: if(PIR1bits.TMR2IF){
  1886  006C  1C91               	btfss	17,1	;volatile
  1887  006D  2872               	goto	i1l155
  1888                           
  1889                           ;main.c: 312: ADCON0bits.GO = 1;
  1890  006E  0021               	movlb	1	; select bank1
  1891  006F  149D               	bsf	29,1	;volatile
  1892                           
  1893                           ;main.c: 313: PIR1bits.TMR2IF = 0;
  1894  0070  0020               	movlb	0	; select bank0
  1895  0071  1091               	bcf	17,1	;volatile
  1896  0072                     i1l155:	
  1897                           
  1898                           ;main.c: 314: }
  1899                           ;main.c: 317: if(IOCAFbits.IOCAF1){
  1900  0072  0027               	movlb	7	; select bank7
  1901  0073  1C93               	btfss	19,1	;volatile
  1902  0074  2880               	goto	i1l1754
  1903                           
  1904                           ;main.c: 318: shouldDebounce = 1;
  1905  0075  3001               	movlw	1
  1906  0076  0020               	movlb	0	; select bank0
  1907  0077  00E6               	movwf	ISR@shouldDebounce
  1908  0078  3000               	movlw	0
  1909  0079  00E7               	movwf	ISR@shouldDebounce+1
  1910                           
  1911                           ;main.c: 319: enable_debounce(&sensors[1]);
  1912  007A  3027               	movlw	(low ((_sensors| 0+6)))& (0+255)
  1913  007B  3183  2363  3180   	fcall	_enable_debounce
  1914                           
  1915                           ;main.c: 320: IOCAFbits.IOCAF1 = 0;
  1916  007E  0027               	movlb	7	; select bank7
  1917  007F  1093               	bcf	19,1	;volatile
  1918  0080                     i1l1754:	
  1919                           
  1920                           ;main.c: 321: }
  1921                           ;main.c: 324: if(IOCAFbits.IOCAF2){
  1922  0080  1D13               	btfss	19,2	;volatile
  1923  0081  288D               	goto	i1l1762
  1924                           
  1925                           ;main.c: 325: shouldDebounce = 1;
  1926  0082  3001               	movlw	1
  1927  0083  0020               	movlb	0	; select bank0
  1928  0084  00E6               	movwf	ISR@shouldDebounce
  1929  0085  3000               	movlw	0
  1930  0086  00E7               	movwf	ISR@shouldDebounce+1
  1931                           
  1932                           ;main.c: 326: enable_debounce(&sensors[2]);
  1933  0087  302D               	movlw	(low ((_sensors| 0+12)))& (0+255)
  1934  0088  3183  2363  3180   	fcall	_enable_debounce
  1935                           
  1936                           ;main.c: 327: IOCAFbits.IOCAF2 = 0;
  1937  008B  0027               	movlb	7	; select bank7
  1938  008C  1113               	bcf	19,2	;volatile
  1939  008D                     i1l1762:	
  1940                           
  1941                           ;main.c: 328: }
  1942                           ;main.c: 331: if(IOCAFbits.IOCAF3){
  1943  008D  1D93               	btfss	19,3	;volatile
  1944  008E  289A               	goto	i1l1770
  1945                           
  1946                           ;main.c: 332: shouldDebounce = 1;
  1947  008F  3001               	movlw	1
  1948  0090  0020               	movlb	0	; select bank0
  1949  0091  00E6               	movwf	ISR@shouldDebounce
  1950  0092  3000               	movlw	0
  1951  0093  00E7               	movwf	ISR@shouldDebounce+1
  1952                           
  1953                           ;main.c: 333: enable_debounce(&sensors[3]);
  1954  0094  3033               	movlw	(low ((_sensors| 0+18)))& (0+255)
  1955  0095  3183  2363  3180   	fcall	_enable_debounce
  1956                           
  1957                           ;main.c: 334: IOCAFbits.IOCAF3 = 0;
  1958  0098  0027               	movlb	7	; select bank7
  1959  0099  1193               	bcf	19,3	;volatile
  1960  009A                     i1l1770:	
  1961                           
  1962                           ;main.c: 335: }
  1963                           ;main.c: 338: if(IOCAFbits.IOCAF4){
  1964  009A  1E13               	btfss	19,4	;volatile
  1965  009B  28A7               	goto	i1l1778
  1966                           
  1967                           ;main.c: 339: shouldDebounce = 1;
  1968  009C  3001               	movlw	1
  1969  009D  0020               	movlb	0	; select bank0
  1970  009E  00E6               	movwf	ISR@shouldDebounce
  1971  009F  3000               	movlw	0
  1972  00A0  00E7               	movwf	ISR@shouldDebounce+1
  1973                           
  1974                           ;main.c: 340: enable_debounce(&sensors[4]);
  1975  00A1  3039               	movlw	(low ((_sensors| 0+24)))& (0+255)
  1976  00A2  3183  2363  3180   	fcall	_enable_debounce
  1977                           
  1978                           ;main.c: 341: IOCAFbits.IOCAF4 = 0;
  1979  00A5  0027               	movlb	7	; select bank7
  1980  00A6  1213               	bcf	19,4	;volatile
  1981  00A7                     i1l1778:	
  1982                           
  1983                           ;main.c: 342: }
  1984                           ;main.c: 345: if(IOCAFbits.IOCAF5){
  1985  00A7  1E93               	btfss	19,5	;volatile
  1986  00A8  28B3               	goto	i1l1786
  1987                           
  1988                           ;main.c: 346: shouldDebounce = 1;
  1989  00A9  3001               	movlw	1
  1990  00AA  0020               	movlb	0	; select bank0
  1991  00AB  00E6               	movwf	ISR@shouldDebounce
  1992  00AC  3000               	movlw	0
  1993  00AD  00E7               	movwf	ISR@shouldDebounce+1
  1994                           
  1995                           ;main.c: 347: enable_debounce(&sensors[5]);
  1996  00AE  303F               	movlw	(low ((_sensors| 0+30)))& (0+255)
  1997  00AF  3183  2363         	fcall	_enable_debounce
  1998                           
  1999                           ;main.c: 348: IOCAFbits.IOCAF5 = 0;
  2000  00B1  0027               	movlb	7	; select bank7
  2001  00B2  1293               	bcf	19,5	;volatile
  2002  00B3                     i1l1786:	
  2003                           
  2004                           ;main.c: 349: }
  2005                           ;main.c: 351: if(shouldDebounce){
  2006  00B3  0020               	movlb	0	; select bank0
  2007  00B4  0866               	movf	ISR@shouldDebounce,w
  2008  00B5  0467               	iorwf	ISR@shouldDebounce+1,w
  2009                           
  2010                           ;main.c: 352: T6CONbits.TMR6ON = 1;
  2011  00B6  0028               	movlb	8	; select bank8
  2012  00B7  1D03               	btfss	3,2
  2013  00B8  151E               	bsf	30,2	;volatile
  2014  00B9  0020               	movlb	0	; select bank0
  2015  00BA  0855               	movf	??_ISR+1,w
  2016  00BB  00FF               	movwf	127
  2017  00BC  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2018  00BD  0009               	retfie
  2019  00BE                     __end_of_ISR:	
  2020                           
  2021                           	psect	text8
  2022  03DE                     __ptext8:	
  2023 ;; *************** function i1___bmul *****************
  2024 ;; Defined at:
  2025 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul8.c"
  2026 ;; Parameters:    Size  Location     Type
  2027 ;;  multiplier      1    wreg     unsigned char 
  2028 ;;  multiplicand    1    0[COMMON] unsigned char 
  2029 ;; Auto vars:     Size  Location     Type
  2030 ;;  multiplier      1    2[COMMON] unsigned char 
  2031 ;;  __bmul          1    3[COMMON] unsigned char 
  2032 ;; Return value:  Size  Location     Type
  2033 ;;                  1    wreg      unsigned char 
  2034 ;; Registers used:
  2035 ;;		wreg, status,2, status,0
  2036 ;; Tracked objects:
  2037 ;;		On entry : 0/0
  2038 ;;		On exit  : 0/0
  2039 ;;		Unchanged: 0/0
  2040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2041 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2042 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2043 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2044 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2045 ;;Total ram usage:        4 bytes
  2046 ;; Hardware stack levels used:    1
  2047 ;; This function calls:
  2048 ;;		Nothing
  2049 ;; This function is called by:
  2050 ;;		_ISR
  2051 ;; This function uses a non-reentrant model
  2052 ;;
  2053                           
  2054                           
  2055                           ;psect for function i1___bmul
  2056  03DE                     i1___bmul:	
  2057                           
  2058                           ;incstack = 0
  2059                           ; Regs used in i1___bmul: [wreg+status,2+status,0]
  2060                           ;i1___bmul@multiplier stored from wreg
  2061  03DE  00F2               	movwf	i1___bmul@multiplier
  2062  03DF  01F3               	clrf	i1___bmul@product
  2063  03E0                     i1l1404:	
  2064  03E0  1C72               	btfss	i1___bmul@multiplier,0
  2065  03E1  2BE6               	goto	i1l1408
  2066  03E2  0870               	movf	i1___bmul@multiplicand,w
  2067  03E3  00F1               	movwf	??i1___bmul
  2068  03E4  0871               	movf	??i1___bmul,w
  2069  03E5  07F3               	addwf	i1___bmul@product,f
  2070  03E6                     i1l1408:	
  2071  03E6  1003               	clrc
  2072  03E7  0DF0               	rlf	i1___bmul@multiplicand,f
  2073  03E8  1003               	clrc
  2074  03E9  0CF2               	rrf	i1___bmul@multiplier,f
  2075  03EA  0872               	movf	i1___bmul@multiplier,w
  2076  03EB  1D03               	btfss	3,2
  2077  03EC  2BE0               	goto	i1l1404
  2078  03ED  0873               	movf	i1___bmul@product,w
  2079  03EE  0008               	return
  2080  03EF                     __end_ofi1___bmul:	
  2081                           
  2082                           	psect	text9
  2083  00CB                     __ptext9:	
  2084 ;; *************** function _sprintf *****************
  2085 ;; Defined at:
  2086 ;;		line 492 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  2087 ;; Parameters:    Size  Location     Type
  2088 ;;  sp              1    wreg     PTR unsigned char 
  2089 ;;		 -> ISR@str(15), 
  2090 ;;  f               2    0[BANK0 ] PTR const unsigned char 
  2091 ;;		 -> STR_3(4), 
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;  sp              1   13[BANK0 ] PTR unsigned char 
  2094 ;;		 -> ISR@str(15), 
  2095 ;;  tmpval          4    0        struct .
  2096 ;;  val             2   11[BANK0 ] unsigned int 
  2097 ;;  cp              2    0        PTR const unsigned char 
  2098 ;;  len             2    0        unsigned int 
  2099 ;;  c               1   14[BANK0 ] char 
  2100 ;;  prec            1   10[BANK0 ] char 
  2101 ;;  flag            1    9[BANK0 ] unsigned char 
  2102 ;;  ap              1    8[BANK0 ] PTR void [1]
  2103 ;;		 -> ?_sprintf(2), 
  2104 ;; Return value:  Size  Location     Type
  2105 ;;                  2    0[BANK0 ] int 
  2106 ;; Registers used:
  2107 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2108 ;; Tracked objects:
  2109 ;;		On entry : 0/0
  2110 ;;		On exit  : 0/0
  2111 ;;		Unchanged: 0/0
  2112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2113 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2114 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2115 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2116 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2117 ;;Total ram usage:       15 bytes
  2118 ;; Hardware stack levels used:    1
  2119 ;; Hardware stack levels required when called:    1
  2120 ;; This function calls:
  2121 ;;		___lwdiv
  2122 ;;		___lwmod
  2123 ;; This function is called by:
  2124 ;;		_ISR
  2125 ;; This function uses a non-reentrant model
  2126 ;;
  2127                           
  2128                           
  2129                           ;psect for function _sprintf
  2130  00CB                     _sprintf:	
  2131                           
  2132                           ;incstack = 0
  2133                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2134                           ;sprintf@sp stored from wreg
  2135  00CB  0020               	movlb	0	; select bank0
  2136  00CC  00D2               	movwf	sprintf@sp
  2137                           
  2138                           ;doprnt.c: 494: va_list ap;
  2139                           ;doprnt.c: 499: signed char c;
  2140                           ;doprnt.c: 506: signed char prec;
  2141                           ;doprnt.c: 508: unsigned char flag;
  2142                           ;doprnt.c: 523: union {
  2143                           ;doprnt.c: 524: unsigned long vd;
  2144                           ;doprnt.c: 525: double integ;
  2145                           ;doprnt.c: 526: } tmpval;
  2146                           ;doprnt.c: 528: unsigned int val;
  2147                           ;doprnt.c: 529: unsigned len;
  2148                           ;doprnt.c: 530: const char * cp;
  2149                           ;doprnt.c: 533: *ap = __va_start();
  2150  00CD  3047               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  2151  00CE  00C9               	movwf	??_sprintf
  2152  00CF  0849               	movf	??_sprintf,w
  2153  00D0  00CD               	movwf	sprintf@ap
  2154  00D1                     i1l1392:	
  2155                           ;doprnt.c: 536: while(c = *f++) {
  2156                           
  2157  00D1  0846               	movf	sprintf@f+1,w
  2158  00D2  00CA               	movwf	??_sprintf+1
  2159  00D3  0845               	movf	sprintf@f,w
  2160  00D4  00C9               	movwf	??_sprintf
  2161  00D5  0AC5               	incf	sprintf@f,f
  2162  00D6  1903               	skipnz
  2163  00D7  0AC6               	incf	sprintf@f+1,f
  2164  00D8  0849               	movf	??_sprintf,w
  2165  00D9  0084               	movwf	4
  2166  00DA  084A               	movf	??_sprintf+1,w
  2167  00DB  0085               	movwf	5
  2168  00DC  0800               	movf	0,w	;code access
  2169  00DD  00CB               	movwf	??_sprintf+2
  2170  00DE  084B               	movf	??_sprintf+2,w
  2171  00DF  00D3               	movwf	sprintf@c
  2172  00E0  0853               	movf	sprintf@c,w
  2173  00E1  1903               	btfsc	3,2
  2174  00E2  2993               	goto	i1l1394
  2175                           
  2176                           ;doprnt.c: 538: if(c != '%')
  2177  00E3  3025               	movlw	37
  2178  00E4  0653               	xorwf	sprintf@c,w
  2179  00E5  1903               	btfsc	3,2
  2180  00E6  28F3               	goto	i1l1348
  2181                           
  2182                           ;doprnt.c: 540: {
  2183                           ;doprnt.c: 541: ((*sp++ = (c)));
  2184  00E7  0853               	movf	sprintf@c,w
  2185  00E8  00C9               	movwf	??_sprintf
  2186  00E9  0852               	movf	sprintf@sp,w
  2187  00EA  0086               	movwf	6
  2188  00EB  0187               	clrf	7
  2189  00EC  0849               	movf	??_sprintf,w
  2190  00ED  0081               	movwf	1
  2191  00EE  3001               	movlw	1
  2192  00EF  00C9               	movwf	??_sprintf
  2193  00F0  0849               	movf	??_sprintf,w
  2194  00F1  07D2               	addwf	sprintf@sp,f
  2195                           
  2196                           ;doprnt.c: 542: continue;
  2197  00F2  28D1               	goto	i1l1392
  2198  00F3                     i1l1348:	
  2199                           
  2200                           ;doprnt.c: 543: }
  2201                           ;doprnt.c: 548: flag = 0;
  2202  00F3  01CE               	clrf	sprintf@flag
  2203                           
  2204                           ;doprnt.c: 822: }
  2205                           
  2206                           ;doprnt.c: 813: continue;
  2207                           
  2208                           ;doprnt.c: 802: default:
  2209                           
  2210                           ;doprnt.c: 698: case 'i':
  2211                           ;doprnt.c: 699: break;
  2212                           
  2213                           ;doprnt.c: 697: case 'd':
  2214                           
  2215                           ;doprnt.c: 638: goto alldone;
  2216                           
  2217                           ;doprnt.c: 637: case 0:
  2218                           
  2219                           ;doprnt.c: 635: switch(c = *f++) {
  2220  00F4  0846               	movf	sprintf@f+1,w
  2221  00F5  00CA               	movwf	??_sprintf+1
  2222  00F6  0845               	movf	sprintf@f,w
  2223  00F7  00C9               	movwf	??_sprintf
  2224  00F8  0AC5               	incf	sprintf@f,f
  2225  00F9  1903               	skipnz
  2226  00FA  0AC6               	incf	sprintf@f+1,f
  2227  00FB  0849               	movf	??_sprintf,w
  2228  00FC  0084               	movwf	4
  2229  00FD  084A               	movf	??_sprintf+1,w
  2230  00FE  0085               	movwf	5
  2231  00FF  0800               	movf	0,w	;code access
  2232  0100  00D3               	movwf	sprintf@c
  2233                           
  2234                           ; Switch size 1, requested type "space"
  2235                           ; Number of cases is 3, Range of values is 0 to 105
  2236                           ; switch strategies available:
  2237                           ; Name         Instructions Cycles
  2238                           ; simple_byte           10     6 (average)
  2239                           ; direct_byte          218     6 (fixed)
  2240                           ; jumptable            260     6 (fixed)
  2241                           ;	Chosen strategy is simple_byte
  2242  0101  3A00               	xorlw	0	; case 0
  2243  0102  1903               	skipnz
  2244  0103  2993               	goto	i1l1394
  2245  0104  3A64               	xorlw	100	; case 100
  2246  0105  1903               	skipnz
  2247  0106  290B               	goto	i1l1354
  2248  0107  3A0D               	xorlw	13	; case 105
  2249  0108  1903               	skipnz
  2250  0109  290B               	goto	i1l1354
  2251  010A  28D1               	goto	i1l1392
  2252  010B                     i1l1354:	
  2253                           
  2254                           ;doprnt.c: 1253: {
  2255                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2256  010B  084D               	movf	sprintf@ap,w
  2257  010C  0086               	movwf	6
  2258  010D  0187               	clrf	7
  2259  010E  3F40               	moviw [0]fsr1
  2260  010F  00D0               	movwf	sprintf@val
  2261  0110  3F41               	moviw [1]fsr1
  2262  0111  00D1               	movwf	sprintf@val+1
  2263  0112  3002               	movlw	2
  2264  0113  00C9               	movwf	??_sprintf
  2265  0114  0849               	movf	??_sprintf,w
  2266  0115  07CD               	addwf	sprintf@ap,f
  2267                           
  2268                           ;doprnt.c: 1261: if((int)val < 0) {
  2269  0116  1FD1               	btfss	sprintf@val+1,7
  2270  0117  2921               	goto	i1l1364
  2271                           
  2272                           ;doprnt.c: 1262: flag |= 0x03;
  2273  0118  3003               	movlw	3
  2274  0119  00C9               	movwf	??_sprintf
  2275  011A  0849               	movf	??_sprintf,w
  2276  011B  04CE               	iorwf	sprintf@flag,f
  2277                           
  2278                           ;doprnt.c: 1263: val = -val;
  2279  011C  09D0               	comf	sprintf@val,f
  2280  011D  09D1               	comf	sprintf@val+1,f
  2281  011E  0AD0               	incf	sprintf@val,f
  2282  011F  1903               	skipnz
  2283  0120  0AD1               	incf	sprintf@val+1,f
  2284  0121                     i1l1364:	
  2285                           
  2286                           ;doprnt.c: 1264: }
  2287                           ;doprnt.c: 1266: }
  2288                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2289  0121  01D3               	clrf	sprintf@c
  2290  0122  0AD3               	incf	sprintf@c,f
  2291  0123  3005               	movlw	5
  2292  0124  0653               	xorwf	sprintf@c,w
  2293  0125  1903               	btfsc	3,2
  2294  0126  2946               	goto	i1l1376
  2295  0127                     i1l1370:	
  2296                           
  2297                           ;doprnt.c: 1306: if(val < dpowers[c])
  2298  0127  0853               	movf	sprintf@c,w
  2299  0128  00C9               	movwf	??_sprintf
  2300  0129  01CA               	clrf	??_sprintf+1
  2301  012A  35C9               	lslf	??_sprintf,f
  2302  012B  0DCA               	rlf	??_sprintf+1,f
  2303  012C  30B9               	movlw	low (_dpowers| (0+32768))
  2304  012D  0749               	addwf	??_sprintf,w
  2305  012E  0084               	movwf	4
  2306  012F  3083               	movlw	high (_dpowers| (0+32768))
  2307  0130  3D4A               	addwfc	??_sprintf+1,w
  2308  0131  0085               	movwf	5
  2309  0132  3F00               	moviw [0]fsr0
  2310  0133  00CB               	movwf	??_sprintf+2
  2311  0134  3F01               	moviw [1]fsr0
  2312  0135  00CC               	movwf	??_sprintf+3
  2313  0136  084C               	movf	??_sprintf+3,w
  2314  0137  0251               	subwf	sprintf@val+1,w
  2315  0138  1D03               	skipz
  2316  0139  293C               	goto	u101_25
  2317  013A  084B               	movf	??_sprintf+2,w
  2318  013B  0250               	subwf	sprintf@val,w
  2319  013C                     u101_25:	
  2320  013C  1C03               	btfss	3,0
  2321  013D  2946               	goto	i1l1376
  2322                           
  2323                           ;doprnt.c: 1307: break;
  2324  013E  3001               	movlw	1
  2325  013F  00C9               	movwf	??_sprintf
  2326  0140  0849               	movf	??_sprintf,w
  2327  0141  07D3               	addwf	sprintf@c,f
  2328  0142  3005               	movlw	5
  2329  0143  0653               	xorwf	sprintf@c,w
  2330  0144  1D03               	btfss	3,2
  2331  0145  2927               	goto	i1l1370
  2332  0146                     i1l1376:	
  2333                           
  2334                           ;doprnt.c: 1422: {
  2335                           ;doprnt.c: 1438: if(flag & 0x03)
  2336  0146  084E               	movf	sprintf@flag,w
  2337  0147  3903               	andlw	3
  2338  0148  1903               	btfsc	3,2
  2339  0149  2955               	goto	i1l1382
  2340                           
  2341                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  2342  014A  302D               	movlw	45
  2343  014B  00C9               	movwf	??_sprintf
  2344  014C  0852               	movf	sprintf@sp,w
  2345  014D  0086               	movwf	6
  2346  014E  0187               	clrf	7
  2347  014F  0849               	movf	??_sprintf,w
  2348  0150  0081               	movwf	1
  2349  0151  3001               	movlw	1
  2350  0152  00C9               	movwf	??_sprintf
  2351  0153  0849               	movf	??_sprintf,w
  2352  0154  07D2               	addwf	sprintf@sp,f
  2353  0155                     i1l1382:	
  2354                           
  2355                           ;doprnt.c: 1469: }
  2356                           ;doprnt.c: 1472: prec = c;
  2357  0155  0853               	movf	sprintf@c,w
  2358  0156  00C9               	movwf	??_sprintf
  2359  0157  0849               	movf	??_sprintf,w
  2360  0158  00CF               	movwf	sprintf@prec
  2361  0159                     i1l1390:	
  2362                           ;doprnt.c: 1474: while(prec--) {
  2363                           
  2364  0159  30FF               	movlw	255
  2365  015A  00C9               	movwf	??_sprintf
  2366  015B  0849               	movf	??_sprintf,w
  2367  015C  07CF               	addwf	sprintf@prec,f
  2368  015D  0A4F               	incf	sprintf@prec,w
  2369  015E  1903               	btfsc	3,2
  2370  015F  28D1               	goto	i1l1392
  2371                           
  2372                           ;doprnt.c: 1478: {
  2373                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2374  0160  300A               	movlw	10
  2375  0161  00F8               	movwf	___lwmod@divisor
  2376  0162  3000               	movlw	0
  2377  0163  00F9               	movwf	___lwmod@divisor+1
  2378  0164  084F               	movf	sprintf@prec,w
  2379  0165  00C9               	movwf	??_sprintf
  2380  0166  01CA               	clrf	??_sprintf+1
  2381  0167  35C9               	lslf	??_sprintf,f
  2382  0168  0DCA               	rlf	??_sprintf+1,f
  2383  0169  30B9               	movlw	low (_dpowers| (0+32768))
  2384  016A  0749               	addwf	??_sprintf,w
  2385  016B  0084               	movwf	4
  2386  016C  3083               	movlw	high (_dpowers| (0+32768))
  2387  016D  3D4A               	addwfc	??_sprintf+1,w
  2388  016E  0085               	movwf	5
  2389  016F  3F00               	moviw [0]fsr0
  2390  0170  00F0               	movwf	___lwdiv@divisor
  2391  0171  3F01               	moviw [1]fsr0
  2392  0172  00F1               	movwf	___lwdiv@divisor+1
  2393  0173  0851               	movf	sprintf@val+1,w
  2394  0174  00F3               	movwf	___lwdiv@dividend+1
  2395  0175  0850               	movf	sprintf@val,w
  2396  0176  00F2               	movwf	___lwdiv@dividend
  2397  0177  3182  22B0  3180   	fcall	___lwdiv
  2398  017A  0871               	movf	?___lwdiv+1,w
  2399  017B  00FB               	movwf	___lwmod@dividend+1
  2400  017C  0870               	movf	?___lwdiv,w
  2401  017D  00FA               	movwf	___lwmod@dividend
  2402  017E  3183  2313  3180   	fcall	___lwmod
  2403  0181  0878               	movf	?___lwmod,w
  2404  0182  3E30               	addlw	48
  2405  0183  0020               	movlb	0	; select bank0
  2406  0184  00CB               	movwf	??_sprintf+2
  2407  0185  084B               	movf	??_sprintf+2,w
  2408  0186  00D3               	movwf	sprintf@c
  2409                           
  2410                           ;doprnt.c: 1523: }
  2411                           ;doprnt.c: 1524: ((*sp++ = (c)));
  2412  0187  0853               	movf	sprintf@c,w
  2413  0188  00C9               	movwf	??_sprintf
  2414  0189  0852               	movf	sprintf@sp,w
  2415  018A  0086               	movwf	6
  2416  018B  0187               	clrf	7
  2417  018C  0849               	movf	??_sprintf,w
  2418  018D  0081               	movwf	1
  2419  018E  3001               	movlw	1
  2420  018F  00C9               	movwf	??_sprintf
  2421  0190  0849               	movf	??_sprintf,w
  2422  0191  07D2               	addwf	sprintf@sp,f
  2423  0192  2959               	goto	i1l1390
  2424  0193                     i1l1394:	
  2425                           ;doprnt.c: 1525: }
  2426                           ;doprnt.c: 1533: }
  2427                           ;doprnt.c: 1535: alldone:
  2428                           
  2429                           
  2430                           ;doprnt.c: 1538: *sp = 0;
  2431  0193  0852               	movf	sprintf@sp,w
  2432  0194  0086               	movwf	6
  2433  0195  0187               	clrf	7
  2434  0196  0181               	clrf	1
  2435  0197  0008               	return
  2436  0198                     __end_of_sprintf:	
  2437                           ;doprnt.c: 1540: return 0;
  2438                           ;	Return value of _sprintf is never used
  2439                           
  2440                           
  2441                           	psect	text10
  2442  0313                     __ptext10:	
  2443 ;; *************** function ___lwmod *****************
  2444 ;; Defined at:
  2445 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  2446 ;; Parameters:    Size  Location     Type
  2447 ;;  divisor         2    8[COMMON] unsigned int 
  2448 ;;  dividend        2   10[COMMON] unsigned int 
  2449 ;; Auto vars:     Size  Location     Type
  2450 ;;  counter         1   13[COMMON] unsigned char 
  2451 ;; Return value:  Size  Location     Type
  2452 ;;                  2    8[COMMON] unsigned int 
  2453 ;; Registers used:
  2454 ;;		wreg, status,2, status,0
  2455 ;; Tracked objects:
  2456 ;;		On entry : 0/0
  2457 ;;		On exit  : 0/0
  2458 ;;		Unchanged: 0/0
  2459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2460 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2461 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2462 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2463 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2464 ;;Total ram usage:        6 bytes
  2465 ;; Hardware stack levels used:    1
  2466 ;; This function calls:
  2467 ;;		Nothing
  2468 ;; This function is called by:
  2469 ;;		_sprintf
  2470 ;; This function uses a non-reentrant model
  2471 ;;
  2472                           
  2473                           
  2474                           ;psect for function ___lwmod
  2475  0313                     ___lwmod:	
  2476                           
  2477                           ;incstack = 0
  2478                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2479  0313  0878               	movf	___lwmod@divisor,w
  2480  0314  0479               	iorwf	___lwmod@divisor+1,w
  2481  0315  1903               	btfsc	3,2
  2482  0316  2B3A               	goto	i1l1188
  2483  0317  01FD               	clrf	___lwmod@counter
  2484  0318  0AFD               	incf	___lwmod@counter,f
  2485  0319                     i1l1178:	
  2486  0319  1BF9               	btfsc	___lwmod@divisor+1,7
  2487  031A  2B25               	goto	i1l1180
  2488  031B  3001               	movlw	1
  2489  031C                     u78_25:	
  2490  031C  35F8               	lslf	___lwmod@divisor,f
  2491  031D  0DF9               	rlf	___lwmod@divisor+1,f
  2492  031E  0B89               	decfsz	9,f
  2493  031F  2B1C               	goto	u78_25
  2494  0320  3001               	movlw	1
  2495  0321  00FC               	movwf	??___lwmod
  2496  0322  087C               	movf	??___lwmod,w
  2497  0323  07FD               	addwf	___lwmod@counter,f
  2498  0324  2B19               	goto	i1l1178
  2499  0325                     i1l1180:	
  2500  0325  0879               	movf	___lwmod@divisor+1,w
  2501  0326  027B               	subwf	___lwmod@dividend+1,w
  2502  0327  1D03               	skipz
  2503  0328  2B2B               	goto	u80_25
  2504  0329  0878               	movf	___lwmod@divisor,w
  2505  032A  027A               	subwf	___lwmod@dividend,w
  2506  032B                     u80_25:	
  2507  032B  1C03               	skipc
  2508  032C  2B31               	goto	i1l1184
  2509  032D  0878               	movf	___lwmod@divisor,w
  2510  032E  02FA               	subwf	___lwmod@dividend,f
  2511  032F  0879               	movf	___lwmod@divisor+1,w
  2512  0330  3BFB               	subwfb	___lwmod@dividend+1,f
  2513  0331                     i1l1184:	
  2514  0331  3001               	movlw	1
  2515  0332                     u81_25:	
  2516  0332  36F9               	lsrf	___lwmod@divisor+1,f
  2517  0333  0CF8               	rrf	___lwmod@divisor,f
  2518  0334  0B89               	decfsz	9,f
  2519  0335  2B32               	goto	u81_25
  2520  0336  3001               	movlw	1
  2521  0337  02FD               	subwf	___lwmod@counter,f
  2522  0338  1D03               	btfss	3,2
  2523  0339  2B25               	goto	i1l1180
  2524  033A                     i1l1188:	
  2525  033A  087B               	movf	___lwmod@dividend+1,w
  2526  033B  00F9               	movwf	?___lwmod+1
  2527  033C  087A               	movf	___lwmod@dividend,w
  2528  033D  00F8               	movwf	?___lwmod
  2529  033E  0008               	return
  2530  033F                     __end_of___lwmod:	
  2531                           
  2532                           	psect	text11
  2533  02B0                     __ptext11:	
  2534 ;; *************** function ___lwdiv *****************
  2535 ;; Defined at:
  2536 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  2537 ;; Parameters:    Size  Location     Type
  2538 ;;  divisor         2    0[COMMON] unsigned int 
  2539 ;;  dividend        2    2[COMMON] unsigned int 
  2540 ;; Auto vars:     Size  Location     Type
  2541 ;;  quotient        2    5[COMMON] unsigned int 
  2542 ;;  counter         1    7[COMMON] unsigned char 
  2543 ;; Return value:  Size  Location     Type
  2544 ;;                  2    0[COMMON] unsigned int 
  2545 ;; Registers used:
  2546 ;;		wreg, status,2, status,0
  2547 ;; Tracked objects:
  2548 ;;		On entry : 0/0
  2549 ;;		On exit  : 0/0
  2550 ;;		Unchanged: 0/0
  2551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2552 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2553 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2554 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2555 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2556 ;;Total ram usage:        8 bytes
  2557 ;; Hardware stack levels used:    1
  2558 ;; This function calls:
  2559 ;;		Nothing
  2560 ;; This function is called by:
  2561 ;;		_sprintf
  2562 ;; This function uses a non-reentrant model
  2563 ;;
  2564                           
  2565                           
  2566                           ;psect for function ___lwdiv
  2567  02B0                     ___lwdiv:	
  2568                           
  2569                           ;incstack = 0
  2570                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2571  02B0  01F5               	clrf	___lwdiv@quotient
  2572  02B1  01F6               	clrf	___lwdiv@quotient+1
  2573  02B2  0870               	movf	___lwdiv@divisor,w
  2574  02B3  0471               	iorwf	___lwdiv@divisor+1,w
  2575  02B4  1903               	btfsc	3,2
  2576  02B5  2ADF               	goto	i1l1166
  2577  02B6  01F7               	clrf	___lwdiv@counter
  2578  02B7  0AF7               	incf	___lwdiv@counter,f
  2579  02B8                     i1l1154:	
  2580  02B8  1BF1               	btfsc	___lwdiv@divisor+1,7
  2581  02B9  2AC4               	goto	i1l1156
  2582  02BA  3001               	movlw	1
  2583  02BB                     u71_25:	
  2584  02BB  35F0               	lslf	___lwdiv@divisor,f
  2585  02BC  0DF1               	rlf	___lwdiv@divisor+1,f
  2586  02BD  0B89               	decfsz	9,f
  2587  02BE  2ABB               	goto	u71_25
  2588  02BF  3001               	movlw	1
  2589  02C0  00F4               	movwf	??___lwdiv
  2590  02C1  0874               	movf	??___lwdiv,w
  2591  02C2  07F7               	addwf	___lwdiv@counter,f
  2592  02C3  2AB8               	goto	i1l1154
  2593  02C4                     i1l1156:	
  2594  02C4  3001               	movlw	1
  2595  02C5                     u73_25:	
  2596  02C5  35F5               	lslf	___lwdiv@quotient,f
  2597  02C6  0DF6               	rlf	___lwdiv@quotient+1,f
  2598  02C7  0B89               	decfsz	9,f
  2599  02C8  2AC5               	goto	u73_25
  2600  02C9  0871               	movf	___lwdiv@divisor+1,w
  2601  02CA  0273               	subwf	___lwdiv@dividend+1,w
  2602  02CB  1D03               	skipz
  2603  02CC  2ACF               	goto	u74_25
  2604  02CD  0870               	movf	___lwdiv@divisor,w
  2605  02CE  0272               	subwf	___lwdiv@dividend,w
  2606  02CF                     u74_25:	
  2607  02CF  1C03               	skipc
  2608  02D0  2AD6               	goto	i1l1162
  2609  02D1  0870               	movf	___lwdiv@divisor,w
  2610  02D2  02F2               	subwf	___lwdiv@dividend,f
  2611  02D3  0871               	movf	___lwdiv@divisor+1,w
  2612  02D4  3BF3               	subwfb	___lwdiv@dividend+1,f
  2613  02D5  1475               	bsf	___lwdiv@quotient,0
  2614  02D6                     i1l1162:	
  2615  02D6  3001               	movlw	1
  2616  02D7                     u75_25:	
  2617  02D7  36F1               	lsrf	___lwdiv@divisor+1,f
  2618  02D8  0CF0               	rrf	___lwdiv@divisor,f
  2619  02D9  0B89               	decfsz	9,f
  2620  02DA  2AD7               	goto	u75_25
  2621  02DB  3001               	movlw	1
  2622  02DC  02F7               	subwf	___lwdiv@counter,f
  2623  02DD  1D03               	btfss	3,2
  2624  02DE  2AC4               	goto	i1l1156
  2625  02DF                     i1l1166:	
  2626  02DF  0876               	movf	___lwdiv@quotient+1,w
  2627  02E0  00F1               	movwf	?___lwdiv+1
  2628  02E1  0875               	movf	___lwdiv@quotient,w
  2629  02E2  00F0               	movwf	?___lwdiv
  2630  02E3  0008               	return
  2631  02E4                     __end_of___lwdiv:	
  2632                           
  2633                           	psect	text12
  2634  02E4                     __ptext12:	
  2635 ;; *************** function _process_debounce *****************
  2636 ;; Defined at:
  2637 ;;		line 14 in file "sensor.c"
  2638 ;; Parameters:    Size  Location     Type
  2639 ;;  sensor          1    wreg     PTR struct sensor_t
  2640 ;;		 -> sensors(36), 
  2641 ;; Auto vars:     Size  Location     Type
  2642 ;;  sensor          1    7[COMMON] PTR struct sensor_t
  2643 ;;		 -> sensors(36), 
  2644 ;; Return value:  Size  Location     Type
  2645 ;;                  1    wreg      void 
  2646 ;; Registers used:
  2647 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2648 ;; Tracked objects:
  2649 ;;		On entry : 0/0
  2650 ;;		On exit  : 0/0
  2651 ;;		Unchanged: 0/0
  2652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2654 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2655 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2656 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2657 ;;Total ram usage:        2 bytes
  2658 ;; Hardware stack levels used:    1
  2659 ;; Hardware stack levels required when called:    3
  2660 ;; This function calls:
  2661 ;;		_default_handler
  2662 ;;		_get_port_pin
  2663 ;;		_switch_handler
  2664 ;;		_temperature_handler
  2665 ;; This function is called by:
  2666 ;;		_ISR
  2667 ;; This function uses a non-reentrant model
  2668 ;;
  2669                           
  2670                           
  2671                           ;psect for function _process_debounce
  2672  02E4                     _process_debounce:	
  2673                           
  2674                           ;incstack = 0
  2675                           ; Regs used in _process_debounce: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2676                           ;process_debounce@sensor stored from wreg
  2677  02E4  00F7               	movwf	process_debounce@sensor
  2678                           
  2679                           ;sensor.c: 15: if(sensor->debounce.should_debounce &&
  2680                           ;sensor.c: 16: sensor->debounce.previous_state == get_port_pin(sensor->port, sensor->pin
      +                          ))
  2681  02E5  0877               	movf	process_debounce@sensor,w
  2682  02E6  3E05               	addlw	5
  2683  02E7  0086               	movwf	6
  2684  02E8  0187               	clrf	7
  2685  02E9  1C01               	btfss	1,0
  2686  02EA  0008               	return
  2687  02EB  0877               	movf	process_debounce@sensor,w
  2688  02EC  3E05               	addlw	5
  2689  02ED  0086               	movwf	6
  2690  02EE  0187               	clrf	7
  2691  02EF  0C01               	rrf	1,w
  2692  02F0  3901               	andlw	1
  2693  02F1  00F6               	movwf	??_process_debounce
  2694  02F2  0877               	movf	process_debounce@sensor,w
  2695  02F3  0086               	movwf	6
  2696  02F4  0187               	clrf	7
  2697  02F5  3F40               	moviw [0]fsr1
  2698  02F6  00F0               	movwf	get_port_pin@port
  2699  02F7  3F41               	moviw [1]fsr1
  2700  02F8  00F1               	movwf	get_port_pin@port+1
  2701  02F9  0877               	movf	process_debounce@sensor,w
  2702  02FA  0086               	movwf	6
  2703  02FB  0187               	clrf	7
  2704  02FC  3F42               	moviw [2]fsr1
  2705  02FD  00F2               	movwf	get_port_pin@pin
  2706  02FE  3183  23EF  3182   	fcall	_get_port_pin
  2707  0301  0676               	xorwf	??_process_debounce,w
  2708  0302  1D03               	skipz
  2709  0303  0008               	return
  2710                           
  2711                           ;sensor.c: 17: {
  2712                           ;sensor.c: 18: sensor->handler();
  2713  0304  0877               	movf	process_debounce@sensor,w
  2714  0305  3E03               	addlw	3
  2715  0306  0086               	movwf	6
  2716  0307  0187               	clrf	7
  2717  0308  3F41               	moviw [1]fsr1
  2718  0309  008A               	movwf	10
  2719  030A  3F40               	moviw [0]fsr1
  2720  030B  000A               	callw
  2721  030C  3182               	pagesel	$
  2722                           
  2723                           ;sensor.c: 19: sensor->debounce.should_debounce = 0;
  2724  030D  0877               	movf	process_debounce@sensor,w
  2725  030E  3E05               	addlw	5
  2726  030F  0086               	movwf	6
  2727  0310  0187               	clrf	7
  2728  0311  1001               	bcf	1,0
  2729  0312  0008               	return
  2730  0313                     __end_of_process_debounce:	
  2731                           
  2732                           	psect	text13
  2733  041B                     __ptext13:	
  2734 ;; *************** function _switch_handler *****************
  2735 ;; Defined at:
  2736 ;;		line 79 in file "main.c"
  2737 ;; Parameters:    Size  Location     Type
  2738 ;;		None
  2739 ;; Auto vars:     Size  Location     Type
  2740 ;;		None
  2741 ;; Return value:  Size  Location     Type
  2742 ;;                  1    wreg      void 
  2743 ;; Registers used:
  2744 ;;		None
  2745 ;; Tracked objects:
  2746 ;;		On entry : 0/0
  2747 ;;		On exit  : 0/0
  2748 ;;		Unchanged: 0/0
  2749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2754 ;;Total ram usage:        0 bytes
  2755 ;; Hardware stack levels used:    1
  2756 ;; This function calls:
  2757 ;;		Nothing
  2758 ;; This function is called by:
  2759 ;;		_initialize_sensors
  2760 ;;		_process_debounce
  2761 ;;		_ISR
  2762 ;; This function uses a non-reentrant model
  2763 ;;
  2764                           
  2765                           
  2766                           ;psect for function _switch_handler
  2767  041B                     _switch_handler:	
  2768                           
  2769                           ;main.c: 80: should_autobaud = 1;
  2770                           
  2771                           ;incstack = 0
  2772                           ; Regs used in _switch_handler: []
  2773  041B  0020               	movlb	0	; select bank0
  2774  041C  01A0               	clrf	_should_autobaud
  2775  041D  0AA0               	incf	_should_autobaud,f
  2776  041E  0008               	return
  2777  041F                     __end_of_switch_handler:	
  2778                           
  2779                           	psect	text14
  2780  0407                     __ptext14:	
  2781 ;; *************** function _default_handler *****************
  2782 ;; Defined at:
  2783 ;;		line 71 in file "main.c"
  2784 ;; Parameters:    Size  Location     Type
  2785 ;;		None
  2786 ;; Auto vars:     Size  Location     Type
  2787 ;;		None
  2788 ;; Return value:  Size  Location     Type
  2789 ;;                  1    wreg      void 
  2790 ;; Registers used:
  2791 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2792 ;; Tracked objects:
  2793 ;;		On entry : 0/0
  2794 ;;		On exit  : 0/0
  2795 ;;		Unchanged: 0/0
  2796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2800 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2801 ;;Total ram usage:        0 bytes
  2802 ;; Hardware stack levels used:    1
  2803 ;; Hardware stack levels required when called:    2
  2804 ;; This function calls:
  2805 ;;		i1_UART_write_text
  2806 ;; This function is called by:
  2807 ;;		_initialize_sensors
  2808 ;;		_process_debounce
  2809 ;;		_ISR
  2810 ;; This function uses a non-reentrant model
  2811 ;;
  2812                           
  2813                           
  2814                           ;psect for function _default_handler
  2815  0407                     _default_handler:	
  2816                           
  2817                           ;main.c: 72: UART_write_text("xy");
  2818                           
  2819                           ;incstack = 0
  2820                           ; Regs used in _default_handler: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2821  0407  30C7               	movlw	low (STR_2| (0+32768))
  2822  0408  00F1               	movwf	i1UART_write_text@text
  2823  0409  3083               	movlw	high (STR_2| (0+32768))
  2824  040A  00F2               	movwf	i1UART_write_text@text+1
  2825  040B  3183  239F         	fcall	i1_UART_write_text
  2826  040D  0008               	return
  2827  040E                     __end_of_default_handler:	
  2828                           
  2829                           	psect	text15
  2830  041F                     __ptext15:	
  2831 ;; *************** function _temperature_handler *****************
  2832 ;; Defined at:
  2833 ;;		line 75 in file "main.c"
  2834 ;; Parameters:    Size  Location     Type
  2835 ;;		None
  2836 ;; Auto vars:     Size  Location     Type
  2837 ;;		None
  2838 ;; Return value:  Size  Location     Type
  2839 ;;                  1    wreg      void 
  2840 ;; Registers used:
  2841 ;;		None
  2842 ;; Tracked objects:
  2843 ;;		On entry : 0/0
  2844 ;;		On exit  : 0/0
  2845 ;;		Unchanged: 0/0
  2846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2850 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2851 ;;Total ram usage:        0 bytes
  2852 ;; Hardware stack levels used:    1
  2853 ;; This function calls:
  2854 ;;		Nothing
  2855 ;; This function is called by:
  2856 ;;		_initialize_sensors
  2857 ;;		_process_debounce
  2858 ;;		_ISR
  2859 ;; This function uses a non-reentrant model
  2860 ;;
  2861                           
  2862                           
  2863                           ;psect for function _temperature_handler
  2864  041F                     _temperature_handler:	
  2865                           
  2866                           ;incstack = 0
  2867                           ; Regs used in _temperature_handler: []
  2868  041F  0008               	return
  2869  0420                     __end_of_temperature_handler:	
  2870                           
  2871                           	psect	text16
  2872  039F                     __ptext16:	
  2873 ;; *************** function i1_UART_write_text *****************
  2874 ;; Defined at:
  2875 ;;		line 89 in file "main.c"
  2876 ;; Parameters:    Size  Location     Type
  2877 ;;  text            2    1[COMMON] PTR unsigned char 
  2878 ;;		 -> ISR@str(15), STR_2(3), STR_1(2), 
  2879 ;; Auto vars:     Size  Location     Type
  2880 ;;  UART_write_t    2    4[COMMON] int 
  2881 ;; Return value:  Size  Location     Type
  2882 ;;                  1    wreg      void 
  2883 ;; Registers used:
  2884 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2885 ;; Tracked objects:
  2886 ;;		On entry : 0/0
  2887 ;;		On exit  : 0/0
  2888 ;;		Unchanged: 0/0
  2889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2890 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2891 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2892 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2893 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2894 ;;Total ram usage:        5 bytes
  2895 ;; Hardware stack levels used:    1
  2896 ;; Hardware stack levels required when called:    1
  2897 ;; This function calls:
  2898 ;;		i1_UART_write
  2899 ;; This function is called by:
  2900 ;;		_default_handler
  2901 ;;		_ISR
  2902 ;; This function uses a non-reentrant model
  2903 ;;
  2904                           
  2905                           
  2906                           ;psect for function i1_UART_write_text
  2907  039F                     i1_UART_write_text:	
  2908                           
  2909                           ;main.c: 91: int count;
  2910                           ;main.c: 92: for(count = 0; text[count]!='\0'; count++)
  2911                           
  2912                           ;incstack = 0
  2913                           ; Regs used in i1_UART_write_text: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2914  039F  01F4               	clrf	i1UART_write_text@count
  2915  03A0  01F5               	clrf	i1UART_write_text@count+1
  2916  03A1                     i1l1116:	
  2917  03A1  0871               	movf	i1UART_write_text@text,w
  2918  03A2  0774               	addwf	i1UART_write_text@count,w
  2919  03A3  0084               	movwf	4
  2920  03A4  0872               	movf	i1UART_write_text@text+1,w
  2921  03A5  3D75               	addwfc	i1UART_write_text@count+1,w
  2922  03A6  0085               	movwf	5
  2923  03A7  0012               	moviw fsr0++
  2924  03A8  1903               	btfsc	3,2
  2925  03A9  0008               	return
  2926                           
  2927                           ;main.c: 93: {
  2928                           ;main.c: 94: UART_write(text[count]);
  2929  03AA  0871               	movf	i1UART_write_text@text,w
  2930  03AB  0774               	addwf	i1UART_write_text@count,w
  2931  03AC  0084               	movwf	4
  2932  03AD  0872               	movf	i1UART_write_text@text+1,w
  2933  03AE  3D75               	addwfc	i1UART_write_text@count+1,w
  2934  03AF  0085               	movwf	5
  2935  03B0  0800               	movf	0,w	;code access
  2936  03B1  3184  240E  3183   	fcall	i1_UART_write
  2937  03B4  3001               	movlw	1
  2938  03B5  07F4               	addwf	i1UART_write_text@count,f
  2939  03B6  3000               	movlw	0
  2940  03B7  3DF5               	addwfc	i1UART_write_text@count+1,f
  2941  03B8  2BA1               	goto	i1l1116
  2942  03B9                     __end_ofi1_UART_write_text:	
  2943                           
  2944                           	psect	text17
  2945  040E                     __ptext17:	
  2946 ;; *************** function i1_UART_write *****************
  2947 ;; Defined at:
  2948 ;;		line 83 in file "main.c"
  2949 ;; Parameters:    Size  Location     Type
  2950 ;;  data            1    wreg     unsigned char 
  2951 ;; Auto vars:     Size  Location     Type
  2952 ;;  data            1    0[COMMON] unsigned char 
  2953 ;; Return value:  Size  Location     Type
  2954 ;;                  1    wreg      void 
  2955 ;; Registers used:
  2956 ;;		wreg
  2957 ;; Tracked objects:
  2958 ;;		On entry : 0/0
  2959 ;;		On exit  : 0/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2963 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2965 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2966 ;;Total ram usage:        1 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; This function calls:
  2969 ;;		Nothing
  2970 ;; This function is called by:
  2971 ;;		i1_UART_write_text
  2972 ;; This function uses a non-reentrant model
  2973 ;;
  2974                           
  2975                           
  2976                           ;psect for function i1_UART_write
  2977  040E                     i1_UART_write:	
  2978                           
  2979                           ;incstack = 0
  2980                           ; Regs used in i1_UART_write: [wreg]
  2981                           ;i1UART_write@data stored from wreg
  2982  040E  00F0               	movwf	i1UART_write@data
  2983  040F                     i1l107:	
  2984                           ;main.c: 85: while(!TRMT);
  2985                           
  2986  040F  0023               	movlb	3	; select bank3
  2987  0410  1C9E               	btfss	30,1	;volatile
  2988  0411  2C0F               	goto	i1l107
  2989                           
  2990                           ;main.c: 86: TXREG = data;
  2991  0412  0870               	movf	i1UART_write@data,w
  2992  0413  009A               	movwf	26	;volatile
  2993  0414  0008               	return
  2994  0415                     __end_ofi1_UART_write:	
  2995                           
  2996                           	psect	text18
  2997  0363                     __ptext18:	
  2998 ;; *************** function _enable_debounce *****************
  2999 ;; Defined at:
  3000 ;;		line 9 in file "sensor.c"
  3001 ;; Parameters:    Size  Location     Type
  3002 ;;  sensor          1    wreg     PTR struct sensor_t
  3003 ;;		 -> sensors(36), 
  3004 ;; Auto vars:     Size  Location     Type
  3005 ;;  sensor          1    5[COMMON] PTR struct sensor_t
  3006 ;;		 -> sensors(36), 
  3007 ;; Return value:  Size  Location     Type
  3008 ;;                  1    wreg      void 
  3009 ;; Registers used:
  3010 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3011 ;; Tracked objects:
  3012 ;;		On entry : 0/0
  3013 ;;		On exit  : 0/0
  3014 ;;		Unchanged: 0/0
  3015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3017 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3018 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3019 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3020 ;;Total ram usage:        2 bytes
  3021 ;; Hardware stack levels used:    1
  3022 ;; Hardware stack levels required when called:    1
  3023 ;; This function calls:
  3024 ;;		_get_port_pin
  3025 ;; This function is called by:
  3026 ;;		_ISR
  3027 ;; This function uses a non-reentrant model
  3028 ;;
  3029                           
  3030                           
  3031                           ;psect for function _enable_debounce
  3032  0363                     _enable_debounce:	
  3033                           
  3034                           ;incstack = 0
  3035                           ; Regs used in _enable_debounce: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3036                           ;enable_debounce@sensor stored from wreg
  3037  0363  00F5               	movwf	enable_debounce@sensor
  3038                           
  3039                           ;sensor.c: 10: sensor->debounce.should_debounce = 1;
  3040  0364  0875               	movf	enable_debounce@sensor,w
  3041  0365  3E05               	addlw	5
  3042  0366  0086               	movwf	6
  3043  0367  0187               	clrf	7
  3044  0368  1401               	bsf	1,0
  3045                           
  3046                           ;sensor.c: 11: sensor->debounce.previous_state = get_port_pin(sensor->port, sensor->pin)
      +                          ;
  3047  0369  0875               	movf	enable_debounce@sensor,w
  3048  036A  0086               	movwf	6
  3049  036B  0187               	clrf	7
  3050  036C  3F40               	moviw [0]fsr1
  3051  036D  00F0               	movwf	get_port_pin@port
  3052  036E  3F41               	moviw [1]fsr1
  3053  036F  00F1               	movwf	get_port_pin@port+1
  3054  0370  0875               	movf	enable_debounce@sensor,w
  3055  0371  0086               	movwf	6
  3056  0372  0187               	clrf	7
  3057  0373  3F42               	moviw [2]fsr1
  3058  0374  00F2               	movwf	get_port_pin@pin
  3059  0375  3183  23EF         	fcall	_get_port_pin
  3060  0377  00F4               	movwf	??_enable_debounce
  3061  0378  0875               	movf	enable_debounce@sensor,w
  3062  0379  3E05               	addlw	5
  3063  037A  0086               	movwf	6
  3064  037B  0187               	clrf	7
  3065  037C  0DF4               	rlf	??_enable_debounce,f
  3066  037D  0801               	movf	1,w
  3067  037E  0674               	xorwf	??_enable_debounce,w
  3068  037F  39FD               	andlw	-3
  3069  0380  0674               	xorwf	??_enable_debounce,w
  3070  0381  0081               	movwf	1
  3071  0382  0008               	return
  3072  0383                     __end_of_enable_debounce:	
  3073                           
  3074                           	psect	text19
  3075  03EF                     __ptext19:	
  3076 ;; *************** function _get_port_pin *****************
  3077 ;; Defined at:
  3078 ;;		line 5 in file "sensor.c"
  3079 ;; Parameters:    Size  Location     Type
  3080 ;;  port            2    0[COMMON] PTR unsigned char 
  3081 ;;		 -> PORTA(1), 
  3082 ;;  pin             1    2[COMMON] unsigned char 
  3083 ;; Auto vars:     Size  Location     Type
  3084 ;;		None
  3085 ;; Return value:  Size  Location     Type
  3086 ;;                  1    wreg      unsigned char 
  3087 ;; Registers used:
  3088 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3089 ;; Tracked objects:
  3090 ;;		On entry : 0/0
  3091 ;;		On exit  : 0/0
  3092 ;;		Unchanged: 0/0
  3093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3094 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3096 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3097 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3098 ;;Total ram usage:        4 bytes
  3099 ;; Hardware stack levels used:    1
  3100 ;; This function calls:
  3101 ;;		Nothing
  3102 ;; This function is called by:
  3103 ;;		_enable_debounce
  3104 ;;		_process_debounce
  3105 ;; This function uses a non-reentrant model
  3106 ;;
  3107                           
  3108                           
  3109                           ;psect for function _get_port_pin
  3110  03EF                     _get_port_pin:	
  3111                           
  3112                           ;sensor.c: 6: return (*port & (1U << pin));
  3113                           
  3114                           ;incstack = 0
  3115                           ; Regs used in _get_port_pin: [wreg+fsr1l+fsr1h+status,2+status,0]
  3116  03EF  0870               	movf	get_port_pin@port,w
  3117  03F0  0086               	movwf	6
  3118  03F1  0871               	movf	get_port_pin@port+1,w
  3119  03F2  0087               	movwf	7
  3120  03F3  3001               	movlw	1
  3121  03F4  00F3               	movwf	??_get_port_pin
  3122  03F5  0A72               	incf	get_port_pin@pin,w
  3123  03F6  2BF8               	goto	u67_24
  3124  03F7                     u67_25:	
  3125  03F7  35F3               	lslf	??_get_port_pin,f
  3126  03F8                     u67_24:	
  3127  03F8  0B89               	decfsz	9,f
  3128  03F9  2BF7               	goto	u67_25
  3129  03FA  0873               	movf	??_get_port_pin,w
  3130  03FB  0501               	andwf	1,w
  3131  03FC  0008               	return
  3132  03FD                     __end_of_get_port_pin:	
  3133  007E                     btemp	set	126	;btemp
  3134  007E                     int$flags	set	126
  3135  007E                     wtemp0	set	126


Data Sizes:
    Strings     9
    Constant    10
    Data        0
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     37      74
    BANK1            80      9       9
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 4
		 -> STR_3(CODE[4]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 15
		 -> ISR@str(BANK0[15]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    process_debounce@sensor.handler	PTR FTN()void  size(2) Largest target is 1
		 -> switch_handler(), temperature_handler(), default_handler(), 

    process_debounce@sensor.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    process_debounce@sensor	PTR struct sensor_t size(1) Largest target is 36
		 -> sensors(BANK0[36]), 

    enable_debounce@sensor.handler	PTR FTN()void  size(2) Largest target is 1
		 -> switch_handler(), temperature_handler(), default_handler(), 

    enable_debounce@sensor.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    enable_debounce@sensor	PTR struct sensor_t size(1) Largest target is 36
		 -> sensors(BANK0[36]), 

    get_port_pin@port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    S23sensor_t$handler	PTR FTN()void  size(2) Largest target is 1
		 -> switch_handler(), temperature_handler(), default_handler(), 

    sensors.handler	PTR FTN()void  size(2) Largest target is 1
		 -> switch_handler(), temperature_handler(), default_handler(), 

    S23sensor_t$port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    sensors.port	PTR unsigned char  size(2) Largest target is 1
		 -> PORTA(SFR0[1]), 

    UART_write_text@text	PTR unsigned char  size(2) Largest target is 15
		 -> ISR@str(BANK0[15]), STR_2(CODE[3]), STR_1(CODE[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _default_handler->i1_UART_write_text
    i1_UART_write_text->i1_UART_write
    _enable_debounce->_get_port_pin

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    _ISR->_sprintf

Critical Paths under _main in BANK1

    _main->_initialize_sensors
    _initialize_sensors->___bmul
    _UART_write_text->_UART_write

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     905
                    _UART_write_text
                           _autoBaud
                     _initialize_PIC
                 _initialize_sensors
 ---------------------------------------------------------------------------------
 (1) _initialize_sensors                                   5     5      0     441
                                              4 BANK1      5     5      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     249
                                              0 BANK1      4     3      1
 ---------------------------------------------------------------------------------
 (1) _initialize_PIC                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _autoBaud                                             6     6      0     142
                                              0 BANK1      6     6      0
 ---------------------------------------------------------------------------------
 (1) _UART_write_text                                      5     3      2     322
                                              1 BANK1      5     3      2
                         _UART_write
 ---------------------------------------------------------------------------------
 (2) _UART_write                                           1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                 22    22      0    2976
                                             15 BANK0     22    22      0
                    _default_handler *
                    _enable_debounce
                   _process_debounce
                            _sprintf
                     _switch_handler *
                _temperature_handler *
                  i1_UART_write_text
                           i1___bmul
 ---------------------------------------------------------------------------------
 (4) i1___bmul                                             4     3      1      87
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             23    19      4    1148
                                              0 BANK0     15    11      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              6     2      4     287
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              8     4      4     290
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (4) _process_debounce                                     2     2      0     626
                                              6 COMMON     2     2      0
                    _default_handler *
                       _get_port_pin
                     _switch_handler *
                _temperature_handler *
 ---------------------------------------------------------------------------------
 (4) _temperature_handler                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _switch_handler                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _default_handler                                      0     0      0     164
                  i1_UART_write_text
 ---------------------------------------------------------------------------------
 (4) i1_UART_write_text                                    5     3      2     164
                                              1 COMMON     5     3      2
                       i1_UART_write
 ---------------------------------------------------------------------------------
 (5) i1_UART_write                                         1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _enable_debounce                                      2     2      0     538
                                              4 COMMON     2     2      0
                       _get_port_pin
 ---------------------------------------------------------------------------------
 (5) _get_port_pin                                         4     1      3     300
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_write_text
     _UART_write
   _autoBaud
   _initialize_PIC
   _initialize_sensors
     ___bmul

 _ISR (ROOT)
   _default_handler *
     i1_UART_write_text
       i1_UART_write
   _enable_debounce *
     _get_port_pin
   _process_debounce *
     _default_handler *
       i1_UART_write_text
         i1_UART_write
     _get_port_pin *
     _switch_handler *
     _temperature_handler *
   _sprintf *
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
   _switch_handler *
   _temperature_handler *
   i1_UART_write_text *
     i1_UART_write
   i1___bmul *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      4A       5       92.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      9       9       7       11.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      61      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      61      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Jan 01 20:49:33 2017

              ___bmul@product 00A2                   __CFG_CP$OFF 0000                            l91 035E  
  __size_ofi1_UART_write_text 001A                 ?_get_port_pin 0070                   __CFG_LVP$ON 0000  
                         l130 01A6                           l107 03FF                           l131 019C  
                         l132 019F                           l133 01A3                           l142 01E5  
                         l134 01A8                           l129 0199                           l138 01D2  
                __CFG_CPD$OFF 0000                           _PR6 041D                           _ISR 0004  
                __CFG_BORV$LO 0000                           wreg 0009                  __CFG_IESO$ON 0000  
                        ?_ISR 0070                          ISR@i 0068                          ISR@x 0065  
                        l1540 03CF                          l1544 03D5                          l1810 01C3  
                        l1650 01BD                          l1706 0359                          l1644 025C  
                        l1638 0215                          l1690 0386                          l1666 01D7  
                        l1658 01BA                          l1676 01FD                          l1678 0201  
                        l1696 0345                          _ADIF 008E                          STR_1 03CA  
                        STR_2 03C7                          STR_3 03C3                          u1335 01E3  
                        _LATC 010E                          u1265 0213                          u1275 025A  
                        u1365 01FB              ??_initialize_PIC 00A0                          _TRMT 0CF1  
                __CFG_WRT$OFF 0000                 __CFG_FCMEN$ON 0000                          _main 033F  
                        fsr0h 0005                          fsr1h 0007                          indf0 0000  
                        fsr0l 0004                          indf1 0001                          fsr1l 0006  
                        btemp 007E              i1UART_write@data 0070                 __CFG_BOREN$ON 0000  
                        start 00BE             ___bmul@multiplier 00A3                 __CFG_MCLRE$ON 0000  
                       ??_ISR 0054                ??_get_port_pin 0073                         ?_main 0070  
                       _ADRES 009B                         _BRG16 0CFB                 __CFG_WDTE$OFF 0000  
                       _T2CON 001C                         _T6CON 041E               __end_of___lwdiv 02E4  
                       i1l107 040F                         i1l150 003C                         i1l152 003A  
                       i1l155 0072               __end_of___lwmod 033F                         _RCREG 0199  
                       _SPBRG 019B                         _PORTA 000C                         u71_25 02BB  
                       u80_25 032B                         u73_25 02C5                         u81_25 0332  
                       u74_25 02CF                         u67_24 03F8                         u67_25 03F7  
                       u75_25 02D7                         u78_25 031C                         _TXREG 019A  
             autoBaud@discard 00A1               __end_of_dpowers 03C3                   ?_UART_write 0070  
             _enable_debounce 0363              __end_ofi1___bmul 03EF                         pclath 000A  
                       status 0003         i1UART_write_text@text 0071                         wtemp0 007E  
             __end_of_sprintf 0198   __end_of_temperature_handler 0420               __initialization 00C0  
                __end_of_main 0363   __size_of_initialize_sensors 005F                        ??_main 00A9  
              __CFG_PLLEN$OFF 0000                        ISR@str 0056     __size_of_process_debounce 002F  
                      _ADCON0 009D                        _ADCON1 009E                        u101_25 013C  
                      i1l1116 03A1                        i1l1162 02D6                        i1l1154 02B8  
                      i1l1156 02C4                        i1l1180 0325                        i1l1404 03E0  
                      i1l1166 02DF                        i1l1184 0331                        i1l1408 03E6  
                      i1l1178 0319                        i1l1370 0127                        i1l1354 010B  
                      i1l1188 033A                        i1l1364 0121                        i1l1348 00F3  
                      i1l1390 0159                        i1l1382 0155                        i1l1376 0146  
                      i1l1392 00D1                        i1l1394 0193                        i1l1724 001D  
                      i1l1744 006C                        i1l1770 009A                        i1l1762 008D  
                      i1l1754 0080                        i1l1738 0063                        i1l1786 00B3  
                      i1l1778 00A7                        u143_25 001B                        u144_25 0038  
                      _INTCON 000B                        _OSCCON 0099                        _SPBRGH 019C  
                      _TMR6IF 009B                __CFG_PWRTE$OFF 0000                        ___bmul 03CC  
            __end_of_autoBaud 0207                __CFG_STVREN$ON 0000                     ??___lwdiv 0074  
                   ??___lwmod 007C           __size_of_UART_write 000A               _default_handler 0407  
     __end_of_enable_debounce 0383               _UART_write_text 0383        i1UART_write_text@count 0074  
                   ??_sprintf 0049          __end_of_get_port_pin 03FD       __end_of__initialization 00C7  
         ___bmul@multiplicand 00A0                __pcstackCOMMON 0070                 ?i1_UART_write 0070  
               autoBaud@index 00A4                     ?i1___bmul 0070         enable_debounce@sensor 0075  
            i1___bmul@product 0073          UART_write_text@count 00A4                    __pbssBANK0 0020  
     __end_of_default_handler 040E                    __pmaintext 033F                       ?___bmul 00A0  
              ??i1_UART_write 0070                    __pintentry 0004           initialize_sensors@i 00A7  
     __end_of_UART_write_text 039F                    ??i1___bmul 0071              ?_enable_debounce 0070  
            _process_debounce 02E4                  ??_UART_write 00A0                     ?_autoBaud 0070  
     __size_of_switch_handler 0004               __size_of___bmul 0012                       ___lwdiv 02B0  
                     ___lwmod 0313            __end_of_UART_write 0407                       __ptext1 0207  
                     __ptext2 03CC                       __ptext3 0266                       __ptext4 0198  
                     __ptext5 0383                       __ptext6 03FD                       __ptext8 03DE  
                     __ptext9 00CB                  __size_of_ISR 00BA                       _dpowers 03B9  
                   _IOCAFbits 0393           i1___bmul@multiplier 0072                     _IOCANbits 0392  
                   _IOCAPbits 0391                     _T6CONbits 041E                       _sensors 0021  
       __size_of_get_port_pin 000E                       _sprintf 00CB                       clrloop0 0416  
        end_of_initialization 00C7                    ??_autoBaud 00A0              ?_default_handler 0070  
                   _RCSTAbits 019D       __size_of_initialize_PIC 004A    __end_of_initialize_sensors 0266  
                __pstringtext 03B9  __size_of_temperature_handler 0001              ?_UART_write_text 00A1  
                _get_port_pin 03EF              __CFG_FOSC$INTOSC 0000                     _TRISAbits 008C  
                   _TRISCbits 008E          __end_ofi1_UART_write 0415                     _TXSTAbits 019E  
      process_debounce@sensor 0077                __end_of___bmul 03DE                   _BAUDCONbits 019F  
           __size_ofi1___bmul 0011           start_initialization 00C0                   __end_of_ISR 00BE  
              _switch_handler 041B                   _APFCON0bits 011D                      ??___bmul 00A1  
    __end_of_process_debounce 0313                     ___latbits 0002                 __pcstackBANK0 0045  
               __pcstackBANK1 00A0        __end_of_switch_handler 041F                   sprintf@flag 004E  
           __size_of_autoBaud 006F                   sprintf@prec 004F           UART_write_text@text 00A1  
            ___lwdiv@dividend 0072                _initialize_PIC 0266                      ?___lwdiv 0070  
                    ?___lwmod 0078              get_port_pin@port 0070               _should_autobaud 0020  
       __size_ofi1_UART_write 0007               ?_switch_handler 0070              ___lwdiv@quotient 0075  
                    ?_sprintf 0045           _temperature_handler 041F      __size_of_enable_debounce 0020  
                   clear_ram0 0415                      _PIE1bits 0091                      _PIE3bits 0093  
      __end_of_initialize_PIC 02B0         i1___bmul@multiplicand 0070                      _PIR1bits 0011  
                    _PIR3bits 0013                  i1_UART_write 040E          ?_temperature_handler 0070  
                    i1___bmul 03DE                    _ADCON0bits 009D                UART_write@data 00A0  
          _initialize_sensors 0207           ?_initialize_sensors 0070               ?_initialize_PIC 0070  
       ??_temperature_handler 0070          ??_initialize_sensors 00A4              __size_of___lwdiv 0034  
            __size_of___lwmod 002C      __size_of_default_handler 0007                    _ANSELAbits 018C  
           i1_UART_write_text 039F                    sprintf@val 0050            ?i1_UART_write_text 0071  
             ___lwdiv@divisor 0070      __size_of_UART_write_text 001C               ___lwdiv@counter 0077  
                    __ptext10 0313                      __ptext11 02B0                      __ptext12 02E4  
                    __ptext13 041B                      __ptext14 0407                      __ptext15 041F  
                    __ptext16 039F                      __ptext17 040E                      __ptext18 0363  
                    __ptext19 03EF               get_port_pin@pin 0072                      _autoBaud 0198  
            __size_of_sprintf 00CD           ??i1_UART_write_text 0073                 __size_of_main 0024  
           ??_enable_debounce 0074             ?_process_debounce 0070                      int$flags 007E  
   __end_ofi1_UART_write_text 03B9            ??_process_debounce 0076             ISR@shouldDebounce 0066  
                    intlevel1 0000                     sprintf@ap 004D                     sprintf@sp 0052  
            ___lwmod@dividend 007A             __CFG_CLKOUTEN$OFF 0000              ??_switch_handler 0070  
                    sprintf@c 0053                      sprintf@f 0045               ___lwmod@divisor 0078  
             ___lwmod@counter 007D             ??_default_handler 0076                    _UART_write 03FD  
          autoBaud@sync_count 00A2             ??_UART_write_text 00A3  
